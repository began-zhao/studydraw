import{_ as p}from"./java8_concurrenthashmap.78655463.js";import{_ as t}from"./plugin-vue_export-helper.21dcd24c.js";import{o as e,c as o,b as n,a as c,d as s,e as l,r as u}from"./app.8c8575b4.js";var i="/assets/image-20200405151029416.49a48864.png";const k={},r=s("\u672C\u6587\u6765\u81EA\u516C\u4F17\u53F7\uFF1A\u672B\u8BFB\u4EE3\u7801\u7684\u6295\u7A3F\uFF0C\u539F\u6587\u5730\u5740\uFF1A"),d={href:"https://mp.weixin.qq.com/s/AHWzboztt53ZfFZmsSnMSw",target:"_blank",rel:"noopener noreferrer"},m=s("https://mp.weixin.qq.com/s/AHWzboztt53ZfFZmsSnMSw"),v=s(" \u3002"),b=l('<p>\u4E0A\u4E00\u7BC7\u6587\u7AE0\u4ECB\u7ECD\u4E86 HashMap \u6E90\u7801\uFF0C\u53CD\u54CD\u4E0D\u9519\uFF0C\u4E5F\u6709\u5F88\u591A\u540C\u5B66\u53D1\u8868\u4E86\u81EA\u5DF1\u7684\u89C2\u70B9\uFF0C\u8FD9\u6B21\u53C8\u6765\u4E86\uFF0C\u8FD9\u6B21\u662F <code>ConcurrentHashMap </code> \u4E86\uFF0C\u4F5C\u4E3A\u7EBF\u7A0B\u5B89\u5168\u7684HashMap \uFF0C\u5B83\u7684\u4F7F\u7528\u9891\u7387\u4E5F\u662F\u5F88\u9AD8\u3002\u90A3\u4E48\u5B83\u7684\u5B58\u50A8\u7ED3\u6784\u548C\u5B9E\u73B0\u539F\u7406\u662F\u600E\u4E48\u6837\u7684\u5462\uFF1F</p><h2 id="_1-concurrenthashmap-1-7" tabindex="-1"><a class="header-anchor" href="#_1-concurrenthashmap-1-7" aria-hidden="true">#</a> 1. ConcurrentHashMap 1.7</h2><h3 id="_1-\u5B58\u50A8\u7ED3\u6784" tabindex="-1"><a class="header-anchor" href="#_1-\u5B58\u50A8\u7ED3\u6784" aria-hidden="true">#</a> 1. \u5B58\u50A8\u7ED3\u6784</h3><blockquote><p>\u4E0B\u56FE\u5B58\u5728\u4E24\u4E2A\u7B14\u8BEF : Segmeng -&gt; Segment ; HashEntity -&gt; HashEntry</p></blockquote><p><img src="'+i+`" alt="Java 7 ConcurrentHashMap \u5B58\u50A8\u7ED3\u6784" loading="lazy"></p><p>Java 7 \u4E2D <code>ConcurrentHashMap</code> \u7684\u5B58\u50A8\u7ED3\u6784\u5982\u4E0A\u56FE\uFF0C<code>ConcurrnetHashMap</code> \u7531\u5F88\u591A\u4E2A <code>Segment</code> \u7EC4\u5408\uFF0C\u800C\u6BCF\u4E00\u4E2A <code>Segment</code> \u662F\u4E00\u4E2A\u7C7B\u4F3C\u4E8E HashMap \u7684\u7ED3\u6784\uFF0C\u6240\u4EE5\u6BCF\u4E00\u4E2A <code>HashMap</code> \u7684\u5185\u90E8\u53EF\u4EE5\u8FDB\u884C\u6269\u5BB9\u3002\u4F46\u662F <code>Segment</code> \u7684\u4E2A\u6570\u4E00\u65E6<strong>\u521D\u59CB\u5316\u5C31\u4E0D\u80FD\u6539\u53D8</strong>\uFF0C\u9ED8\u8BA4 <code>Segment</code> \u7684\u4E2A\u6570\u662F 16 \u4E2A\uFF0C\u4F60\u4E5F\u53EF\u4EE5\u8BA4\u4E3A <code>ConcurrentHashMap</code> \u9ED8\u8BA4\u652F\u6301\u6700\u591A 16 \u4E2A\u7EBF\u7A0B\u5E76\u53D1\u3002</p><h3 id="_2-\u521D\u59CB\u5316" tabindex="-1"><a class="header-anchor" href="#_2-\u521D\u59CB\u5316" aria-hidden="true">#</a> 2. \u521D\u59CB\u5316</h3><p>\u901A\u8FC7 ConcurrentHashMap \u7684\u65E0\u53C2\u6784\u9020\u63A2\u5BFB ConcurrentHashMap \u7684\u521D\u59CB\u5316\u6D41\u7A0B\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * Creates a new, empty map with a default initial capacity (16),
     * load factor (0.75) and concurrencyLevel (16).
     */</span>
    <span class="token keyword">public</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">(</span>DEFAULT_INITIAL_CAPACITY<span class="token punctuation">,</span> DEFAULT_LOAD_FACTOR<span class="token punctuation">,</span> DEFAULT_CONCURRENCY_LEVEL<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u65E0\u53C2\u6784\u9020\u4E2D\u8C03\u7528\u4E86\u6709\u53C2\u6784\u9020\uFF0C\u4F20\u5165\u4E86\u4E09\u4E2A\u53C2\u6570\u7684\u9ED8\u8BA4\u503C\uFF0C\u4ED6\u4EEC\u7684\u503C\u662F\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>    <span class="token doc-comment comment">/**
     * \u9ED8\u8BA4\u521D\u59CB\u5316\u5BB9\u91CF
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_INITIAL_CAPACITY <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * \u9ED8\u8BA4\u8D1F\u8F7D\u56E0\u5B50
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">float</span> DEFAULT_LOAD_FACTOR <span class="token operator">=</span> <span class="token number">0.75f</span><span class="token punctuation">;</span>

    <span class="token doc-comment comment">/**
     * \u9ED8\u8BA4\u5E76\u53D1\u7EA7\u522B
     */</span>
    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DEFAULT_CONCURRENCY_LEVEL <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u63A5\u7740\u770B\u4E0B\u8FD9\u4E2A\u6709\u53C2\u6784\u9020\u51FD\u6570\u7684\u5185\u90E8\u5B9E\u73B0\u903B\u8F91\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">public</span> <span class="token class-name">ConcurrentHashMap</span><span class="token punctuation">(</span><span class="token keyword">int</span> initialCapacity<span class="token punctuation">,</span><span class="token keyword">float</span> loadFactor<span class="token punctuation">,</span> <span class="token keyword">int</span> concurrencyLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u53C2\u6570\u6821\u9A8C</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>loadFactor <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> initialCapacity <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> concurrencyLevel <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">IllegalArgumentException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u6821\u9A8C\u5E76\u53D1\u7EA7\u522B\u5927\u5C0F\uFF0C\u5927\u4E8E 1&lt;&lt;16\uFF0C\u91CD\u7F6E\u4E3A 65536</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>concurrencyLevel <span class="token operator">&gt;</span> MAX_SEGMENTS<span class="token punctuation">)</span>
        concurrencyLevel <span class="token operator">=</span> MAX_SEGMENTS<span class="token punctuation">;</span>
    <span class="token comment">// Find power-of-two sizes best matching arguments</span>
    <span class="token comment">// 2\u7684\u591A\u5C11\u6B21\u65B9</span>
    <span class="token keyword">int</span> sshift <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> ssize <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8FD9\u4E2A\u5FAA\u73AF\u53EF\u4EE5\u627E\u5230 concurrencyLevel \u4E4B\u4E0A\u6700\u8FD1\u7684 2\u7684\u6B21\u65B9\u503C</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>ssize <span class="token operator">&lt;</span> concurrencyLevel<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token operator">++</span>sshift<span class="token punctuation">;</span>
        ssize <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u8BB0\u5F55\u6BB5\u504F\u79FB\u91CF</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>segmentShift <span class="token operator">=</span> <span class="token number">32</span> <span class="token operator">-</span> sshift<span class="token punctuation">;</span>
    <span class="token comment">// \u8BB0\u5F55\u6BB5\u63A9\u7801</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>segmentMask <span class="token operator">=</span> ssize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8BBE\u7F6E\u5BB9\u91CF</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>initialCapacity <span class="token operator">&gt;</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>
        initialCapacity <span class="token operator">=</span> MAXIMUM_CAPACITY<span class="token punctuation">;</span>
    <span class="token comment">// c = \u5BB9\u91CF / ssize \uFF0C\u9ED8\u8BA4 16 / 16 = 1\uFF0C\u8FD9\u91CC\u662F\u8BA1\u7B97\u6BCF\u4E2A Segment \u4E2D\u7684\u7C7B\u4F3C\u4E8E HashMap \u7684\u5BB9\u91CF</span>
    <span class="token keyword">int</span> c <span class="token operator">=</span> initialCapacity <span class="token operator">/</span> ssize<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">*</span> ssize <span class="token operator">&lt;</span> initialCapacity<span class="token punctuation">)</span>
        <span class="token operator">++</span>c<span class="token punctuation">;</span>
    <span class="token keyword">int</span> cap <span class="token operator">=</span> MIN_SEGMENT_TABLE_CAPACITY<span class="token punctuation">;</span>
    <span class="token comment">//Segment \u4E2D\u7684\u7C7B\u4F3C\u4E8E HashMap \u7684\u5BB9\u91CF\u81F3\u5C11\u662F2\u6216\u80052\u7684\u500D\u6570</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>cap <span class="token operator">&lt;</span> c<span class="token punctuation">)</span>
        cap <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// create segments and segments[0]</span>
    <span class="token comment">// \u521B\u5EFA Segment \u6570\u7EC4\uFF0C\u8BBE\u7F6E segments[0]</span>
    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> s0 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>loadFactor<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>cap <span class="token operator">*</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">,</span>
                         <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token punctuation">[</span>cap<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token punctuation">[</span>ssize<span class="token punctuation">]</span><span class="token punctuation">;</span>
    UNSAFE<span class="token punctuation">.</span><span class="token function">putOrderedObject</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> SBASE<span class="token punctuation">,</span> s0<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ordered write of segments[0]</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>segments <span class="token operator">=</span> ss<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u603B\u7ED3\u4E00\u4E0B\u5728 Java 7 \u4E2D ConcurrnetHashMap \u7684\u521D\u59CB\u5316\u903B\u8F91\u3002</p><ol><li>\u5FC5\u8981\u53C2\u6570\u6821\u9A8C\u3002</li><li>\u6821\u9A8C\u5E76\u53D1\u7EA7\u522B concurrencyLevel \u5927\u5C0F\uFF0C\u5982\u679C\u5927\u4E8E\u6700\u5927\u503C\uFF0C\u91CD\u7F6E\u4E3A\u6700\u5927\u503C\u3002\u65E0\u53C2\u6784\u9020<strong>\u9ED8\u8BA4\u503C\u662F 16.</strong></li><li>\u5BFB\u627E\u5E76\u53D1\u7EA7\u522B concurrencyLevel \u4E4B\u4E0A\u6700\u8FD1\u7684 <strong>2 \u7684\u5E42\u6B21\u65B9</strong>\u503C\uFF0C\u4F5C\u4E3A\u521D\u59CB\u5316\u5BB9\u91CF\u5927\u5C0F\uFF0C<strong>\u9ED8\u8BA4\u662F 16</strong>\u3002</li><li>\u8BB0\u5F55 segmentShift \u504F\u79FB\u91CF\uFF0C\u8FD9\u4E2A\u503C\u4E3A\u3010\u5BB9\u91CF = 2 \u7684N\u6B21\u65B9\u3011\u4E2D\u7684 N\uFF0C\u5728\u540E\u9762 Put \u65F6\u8BA1\u7B97\u4F4D\u7F6E\u65F6\u4F1A\u7528\u5230\u3002<strong>\u9ED8\u8BA4\u662F 32 - sshift = 28</strong>.</li><li>\u8BB0\u5F55 segmentMask\uFF0C\u9ED8\u8BA4\u662F ssize - 1 = 16 -1 = 15.</li><li><strong>\u521D\u59CB\u5316 segments[0]</strong>\uFF0C<strong>\u9ED8\u8BA4\u5927\u5C0F\u4E3A 2</strong>\uFF0C<strong>\u8D1F\u8F7D\u56E0\u5B50 0.75</strong>\uFF0C<strong>\u6269\u5BB9\u9600\u503C\u662F 2*0.75=1.5</strong>\uFF0C\u63D2\u5165\u7B2C\u4E8C\u4E2A\u503C\u65F6\u624D\u4F1A\u8FDB\u884C\u6269\u5BB9\u3002</li></ol><h3 id="_3-put" tabindex="-1"><a class="header-anchor" href="#_3-put" aria-hidden="true">#</a> 3. put</h3><p>\u63A5\u7740\u4E0A\u9762\u7684\u521D\u59CB\u5316\u53C2\u6570\u7EE7\u7EED\u67E5\u770B put \u65B9\u6CD5\u6E90\u7801\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Maps the specified key to the specified value in this table.
 * Neither the key nor the value can be null.
 *
 * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span> The value can be retrieved by calling the <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">get</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span> method
 * with a key that is equal to the original key.
 *
 * <span class="token keyword">@param</span> <span class="token parameter">key</span> key with which the specified value is to be associated
 * <span class="token keyword">@param</span> <span class="token parameter">value</span> value to be associated with the specified key
 * <span class="token keyword">@return</span> the previous value associated with <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">key</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span>, or
 *         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java"><span class="token keyword">null</span></span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span> if there was no mapping for <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>tt</span><span class="token punctuation">&gt;</span></span><span class="token code-section"><span class="token line"><span class="token code language-java">key</span></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>tt</span><span class="token punctuation">&gt;</span></span>
 * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">NullPointerException</span></span> if the specified key or value is null
 */</span>
<span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> s<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// hash \u503C\u65E0\u7B26\u53F7\u53F3\u79FB 28\u4F4D\uFF08\u521D\u59CB\u5316\u65F6\u83B7\u5F97\uFF09\uFF0C\u7136\u540E\u4E0E segmentMask=15 \u505A\u4E0E\u8FD0\u7B97</span>
    <span class="token comment">// \u5176\u5B9E\u4E5F\u5C31\u662F\u628A\u9AD84\u4F4D\u4E0EsegmentMask\uFF081111\uFF09\u505A\u4E0E\u8FD0\u7B97</span>
    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>hash <span class="token operator">&gt;&gt;&gt;</span> segmentShift<span class="token punctuation">)</span> <span class="token operator">&amp;</span> segmentMask<span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>UNSAFE<span class="token punctuation">.</span>getObject          <span class="token comment">// nonvolatile; recheck</span>
         <span class="token punctuation">(</span>segments<span class="token punctuation">,</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;&lt;</span> SSHIFT<span class="token punctuation">)</span> <span class="token operator">+</span> SBASE<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">//  in ensureSegment</span>
        <span class="token comment">// \u5982\u679C\u67E5\u627E\u5230\u7684 Segment \u4E3A\u7A7A\uFF0C\u521D\u59CB\u5316</span>
        s <span class="token operator">=</span> <span class="token function">ensureSegment</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/**
 * Returns the segment for the given index, creating it and
 * recording in segment table (via CAS) if not already present.
 *
 * <span class="token keyword">@param</span> <span class="token parameter">k</span> the index
 * <span class="token keyword">@return</span> the segment
 */</span>
<span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
<span class="token keyword">private</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">ensureSegment</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">final</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> ss <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>segments<span class="token punctuation">;</span>
    <span class="token keyword">long</span> u <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;&lt;</span> SSHIFT<span class="token punctuation">)</span> <span class="token operator">+</span> SBASE<span class="token punctuation">;</span> <span class="token comment">// raw offset</span>
    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> seg<span class="token punctuation">;</span>
    <span class="token comment">// \u5224\u65AD u \u4F4D\u7F6E\u7684 Segment \u662F\u5426\u4E3Anull</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>seg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>UNSAFE<span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> proto <span class="token operator">=</span> ss<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// use segment 0 as prototype</span>
        <span class="token comment">// \u83B7\u53D60\u53F7 segment \u91CC\u7684 HashEntry&lt;K,V&gt; \u521D\u59CB\u5316\u957F\u5EA6</span>
        <span class="token keyword">int</span> cap <span class="token operator">=</span> proto<span class="token punctuation">.</span>table<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
        <span class="token comment">// \u83B7\u53D60\u53F7 segment \u91CC\u7684 hash \u8868\u91CC\u7684\u6269\u5BB9\u8D1F\u8F7D\u56E0\u5B50\uFF0C\u6240\u6709\u7684 segment \u7684 loadFactor \u662F\u76F8\u540C\u7684</span>
        <span class="token keyword">float</span> lf <span class="token operator">=</span> proto<span class="token punctuation">.</span>loadFactor<span class="token punctuation">;</span>
        <span class="token comment">// \u8BA1\u7B97\u6269\u5BB9\u9600\u503C</span>
        <span class="token keyword">int</span> threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>cap <span class="token operator">*</span> lf<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// \u521B\u5EFA\u4E00\u4E2A cap \u5BB9\u91CF\u7684 HashEntry \u6570\u7EC4</span>
        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token punctuation">[</span>cap<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>seg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>UNSAFE<span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment">// recheck</span>
            <span class="token comment">// \u518D\u6B21\u68C0\u67E5 u \u4F4D\u7F6E\u7684 Segment \u662F\u5426\u4E3Anull\uFF0C\u56E0\u4E3A\u8FD9\u65F6\u53EF\u80FD\u6709\u5176\u4ED6\u7EBF\u7A0B\u8FDB\u884C\u4E86\u64CD\u4F5C</span>
            <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>lf<span class="token punctuation">,</span> threshold<span class="token punctuation">,</span> tab<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token comment">// \u81EA\u65CB\u68C0\u67E5 u \u4F4D\u7F6E\u7684 Segment \u662F\u5426\u4E3Anull</span>
            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>seg <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>UNSAFE<span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span>
                   <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u4F7F\u7528CAS \u8D4B\u503C\uFF0C\u53EA\u4F1A\u6210\u529F\u4E00\u6B21</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>UNSAFE<span class="token punctuation">.</span><span class="token function">compareAndSwapObject</span><span class="token punctuation">(</span>ss<span class="token punctuation">,</span> u<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> seg <span class="token operator">=</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> seg<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4E0A\u9762\u7684\u6E90\u7801\u5206\u6790\u4E86 ConcurrentHashMap \u5728 put \u4E00\u4E2A\u6570\u636E\u65F6\u7684\u5904\u7406\u6D41\u7A0B\uFF0C\u4E0B\u9762\u68B3\u7406\u4E0B\u5177\u4F53\u6D41\u7A0B\u3002</p><ol><li><p>\u8BA1\u7B97\u8981 put \u7684 key \u7684\u4F4D\u7F6E\uFF0C\u83B7\u53D6\u6307\u5B9A\u4F4D\u7F6E\u7684 Segment\u3002</p></li><li><p>\u5982\u679C\u6307\u5B9A\u4F4D\u7F6E\u7684 Segment \u4E3A\u7A7A\uFF0C\u5219\u521D\u59CB\u5316\u8FD9\u4E2A Segment.</p><p><strong>\u521D\u59CB\u5316 Segment \u6D41\u7A0B\uFF1A</strong></p><ol><li>\u68C0\u67E5\u8BA1\u7B97\u5F97\u5230\u7684\u4F4D\u7F6E\u7684 Segment \u662F\u5426\u4E3Anull.</li><li>\u4E3A null \u7EE7\u7EED\u521D\u59CB\u5316\uFF0C\u4F7F\u7528 Segment[0] \u7684\u5BB9\u91CF\u548C\u8D1F\u8F7D\u56E0\u5B50\u521B\u5EFA\u4E00\u4E2A HashEntry \u6570\u7EC4\u3002</li><li>\u518D\u6B21\u68C0\u67E5\u8BA1\u7B97\u5F97\u5230\u7684\u6307\u5B9A\u4F4D\u7F6E\u7684 Segment \u662F\u5426\u4E3Anull.</li><li>\u4F7F\u7528\u521B\u5EFA\u7684 HashEntry \u6570\u7EC4\u521D\u59CB\u5316\u8FD9\u4E2A Segment.</li><li>\u81EA\u65CB\u5224\u65AD\u8BA1\u7B97\u5F97\u5230\u7684\u6307\u5B9A\u4F4D\u7F6E\u7684 Segment \u662F\u5426\u4E3Anull\uFF0C\u4F7F\u7528 CAS \u5728\u8FD9\u4E2A\u4F4D\u7F6E\u8D4B\u503C\u4E3A Segment.</li></ol></li><li><p>Segment.put \u63D2\u5165 key,value \u503C\u3002</p></li></ol><p>\u4E0A\u9762\u63A2\u7A76\u4E86\u83B7\u53D6 Segment \u6BB5\u548C\u521D\u59CB\u5316 Segment \u6BB5\u7684\u64CD\u4F5C\u3002\u6700\u540E\u4E00\u884C\u7684 Segment \u7684 put \u65B9\u6CD5\u8FD8\u6CA1\u6709\u67E5\u770B\uFF0C\u7EE7\u7EED\u5206\u6790\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u83B7\u53D6 ReentrantLock \u72EC\u5360\u9501\uFF0C\u83B7\u53D6\u4E0D\u5230\uFF0CscanAndLockForPut \u83B7\u53D6\u3002</span>
    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> <span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token keyword">null</span> <span class="token operator">:</span> <span class="token function">scanAndLockForPut</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> hash<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">V</span> oldValue<span class="token punctuation">;</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span>
        <span class="token comment">// \u8BA1\u7B97\u8981put\u7684\u6570\u636E\u4F4D\u7F6E</span>
        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>tab<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">;</span>
        <span class="token comment">// CAS \u83B7\u53D6 index \u5750\u6807\u7684\u503C</span>
        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> <span class="token function">entryAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> first<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token comment">// \u68C0\u67E5\u662F\u5426 key \u5DF2\u7ECF\u5B58\u5728\uFF0C\u5982\u679C\u5B58\u5728\uFF0C\u5219\u904D\u5386\u94FE\u8868\u5BFB\u627E\u4F4D\u7F6E\uFF0C\u627E\u5230\u540E\u66FF\u6362 value</span>
                <span class="token class-name">K</span> k<span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>
                    <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    oldValue <span class="token operator">=</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        e<span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
                        <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span>
                <span class="token comment">// first \u6709\u503C\u6CA1\u8BF4\u660E index \u4F4D\u7F6E\u5DF2\u7ECF\u6709\u503C\u4E86\uFF0C\u6709\u51B2\u7A81\uFF0C\u94FE\u8868\u5934\u63D2\u6CD5\u3002</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> first<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">int</span> c <span class="token operator">=</span> count <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token comment">// \u5BB9\u91CF\u5927\u4E8E\u6269\u5BB9\u9600\u503C\uFF0C\u5C0F\u4E8E\u6700\u5927\u5BB9\u91CF\uFF0C\u8FDB\u884C\u6269\u5BB9</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&gt;</span> threshold <span class="token operator">&amp;&amp;</span> tab<span class="token punctuation">.</span>length <span class="token operator">&lt;</span> MAXIMUM_CAPACITY<span class="token punctuation">)</span>
                    <span class="token function">rehash</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">else</span>
                    <span class="token comment">// index \u4F4D\u7F6E\u8D4B\u503C node\uFF0Cnode \u53EF\u80FD\u662F\u4E00\u4E2A\u5143\u7D20\uFF0C\u4E5F\u53EF\u80FD\u662F\u4E00\u4E2A\u94FE\u8868\u7684\u8868\u5934</span>
                    <span class="token function">setEntryAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> index<span class="token punctuation">,</span> node<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token operator">++</span>modCount<span class="token punctuation">;</span>
                count <span class="token operator">=</span> c<span class="token punctuation">;</span>
                oldValue <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
        <span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> oldValue<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u7531\u4E8E Segment \u7EE7\u627F\u4E86 ReentrantLock\uFF0C\u6240\u4EE5 Segment \u5185\u90E8\u53EF\u4EE5\u5F88\u65B9\u4FBF\u7684\u83B7\u53D6\u9501\uFF0Cput \u6D41\u7A0B\u5C31\u7528\u5230\u4E86\u8FD9\u4E2A\u529F\u80FD\u3002</p><ol><li><p>tryLock() \u83B7\u53D6\u9501\uFF0C\u83B7\u53D6\u4E0D\u5230\u4F7F\u7528 <strong><code>scanAndLockForPut</code></strong> \u65B9\u6CD5\u7EE7\u7EED\u83B7\u53D6\u3002</p></li><li><p>\u8BA1\u7B97 put \u7684\u6570\u636E\u8981\u653E\u5165\u7684 index \u4F4D\u7F6E\uFF0C\u7136\u540E\u83B7\u53D6\u8FD9\u4E2A\u4F4D\u7F6E\u4E0A\u7684 HashEntry \u3002</p></li><li><p>\u904D\u5386 put \u65B0\u5143\u7D20\uFF0C\u4E3A\u4EC0\u4E48\u8981\u904D\u5386\uFF1F\u56E0\u4E3A\u8FD9\u91CC\u83B7\u53D6\u7684 HashEntry \u53EF\u80FD\u662F\u4E00\u4E2A\u7A7A\u5143\u7D20\uFF0C\u4E5F\u53EF\u80FD\u662F\u94FE\u8868\u5DF2\u5B58\u5728\uFF0C\u6240\u4EE5\u8981\u533A\u522B\u5BF9\u5F85\u3002</p><p>\u5982\u679C\u8FD9\u4E2A\u4F4D\u7F6E\u4E0A\u7684 <strong>HashEntry \u4E0D\u5B58\u5728</strong>\uFF1A</p><ol><li>\u5982\u679C\u5F53\u524D\u5BB9\u91CF\u5927\u4E8E\u6269\u5BB9\u9600\u503C\uFF0C\u5C0F\u4E8E\u6700\u5927\u5BB9\u91CF\uFF0C<strong>\u8FDB\u884C\u6269\u5BB9</strong>\u3002</li><li>\u76F4\u63A5\u5934\u63D2\u6CD5\u63D2\u5165\u3002</li></ol><p>\u5982\u679C\u8FD9\u4E2A\u4F4D\u7F6E\u4E0A\u7684 <strong>HashEntry \u5B58\u5728</strong>\uFF1A</p><ol><li>\u5224\u65AD\u94FE\u8868\u5F53\u524D\u5143\u7D20 Key \u548C hash \u503C\u662F\u5426\u548C\u8981 put \u7684 key \u548C hash \u503C\u4E00\u81F4\u3002\u4E00\u81F4\u5219\u66FF\u6362\u503C</li><li>\u4E0D\u4E00\u81F4\uFF0C\u83B7\u53D6\u94FE\u8868\u4E0B\u4E00\u4E2A\u8282\u70B9\uFF0C\u76F4\u5230\u53D1\u73B0\u76F8\u540C\u8FDB\u884C\u503C\u66FF\u6362\uFF0C\u6216\u8005\u94FE\u8868\u8868\u91CC\u5B8C\u6BD5\u6CA1\u6709\u76F8\u540C\u7684\u3002 <ol><li>\u5982\u679C\u5F53\u524D\u5BB9\u91CF\u5927\u4E8E\u6269\u5BB9\u9600\u503C\uFF0C\u5C0F\u4E8E\u6700\u5927\u5BB9\u91CF\uFF0C<strong>\u8FDB\u884C\u6269\u5BB9</strong>\u3002</li><li>\u76F4\u63A5\u94FE\u8868\u5934\u63D2\u6CD5\u63D2\u5165\u3002</li></ol></li></ol></li><li><p>\u5982\u679C\u8981\u63D2\u5165\u7684\u4F4D\u7F6E\u4E4B\u524D\u5DF2\u7ECF\u5B58\u5728\uFF0C\u66FF\u6362\u540E\u8FD4\u56DE\u65E7\u503C\uFF0C\u5426\u5219\u8FD4\u56DE null.</p></li></ol><p>\u8FD9\u91CC\u9762\u7684\u7B2C\u4E00\u6B65\u4E2D\u7684 scanAndLockForPut \u64CD\u4F5C\u8FD9\u91CC\u6CA1\u6709\u4ECB\u7ECD\uFF0C\u8FD9\u4E2A\u65B9\u6CD5\u505A\u7684\u64CD\u4F5C\u5C31\u662F\u4E0D\u65AD\u7684\u81EA\u65CB <code>tryLock()</code> \u83B7\u53D6\u9501\u3002\u5F53\u81EA\u65CB\u6B21\u6570\u5927\u4E8E\u6307\u5B9A\u6B21\u6570\u65F6\uFF0C\u4F7F\u7528 <code>lock()</code> \u963B\u585E\u83B7\u53D6\u9501\u3002\u5728\u81EA\u65CB\u65F6\u987A\u8868\u83B7\u53D6\u4E0B hash \u4F4D\u7F6E\u7684 HashEntry\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token function">scanAndLockForPut</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token keyword">int</span> hash<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> first <span class="token operator">=</span> <span class="token function">entryForHash</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> first<span class="token punctuation">;</span>
    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> node <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> retries <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// negative while locating node</span>
    <span class="token comment">// \u81EA\u65CB\u83B7\u53D6\u9501</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">tryLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">;</span> <span class="token comment">// to recheck first below</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>retries <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token comment">// speculatively create node</span>
                    node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                retries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
                retries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">else</span>
                e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>retries <span class="token operator">&gt;</span> MAX_SCAN_RETRIES<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u81EA\u65CB\u8FBE\u5230\u6307\u5B9A\u6B21\u6570\u540E\uFF0C\u963B\u585E\u7B49\u5230\u53EA\u5230\u83B7\u53D6\u5230\u9501</span>
            <span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>retries <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
                 <span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">entryForHash</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> first<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            e <span class="token operator">=</span> first <span class="token operator">=</span> f<span class="token punctuation">;</span> <span class="token comment">// re-traverse if entry changed</span>
            retries <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> node<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_4-\u6269\u5BB9-rehash" tabindex="-1"><a class="header-anchor" href="#_4-\u6269\u5BB9-rehash" aria-hidden="true">#</a> 4. \u6269\u5BB9 rehash</h3><p>ConcurrentHashMap \u7684\u6269\u5BB9\u53EA\u4F1A\u6269\u5BB9\u5230\u539F\u6765\u7684\u4E24\u500D\u3002\u8001\u6570\u7EC4\u91CC\u7684\u6570\u636E\u79FB\u52A8\u5230\u65B0\u7684\u6570\u7EC4\u65F6\uFF0C\u4F4D\u7F6E\u8981\u4E48\u4E0D\u53D8\uFF0C\u8981\u4E48\u53D8\u4E3A index+ oldSize\uFF0C\u53C2\u6570\u91CC\u7684 node \u4F1A\u5728\u6269\u5BB9\u4E4B\u540E\u4F7F\u7528\u94FE\u8868<strong>\u5934\u63D2\u6CD5</strong>\u63D2\u5165\u5230\u6307\u5B9A\u4F4D\u7F6E\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">rehash</span><span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> node<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> oldTable <span class="token operator">=</span> table<span class="token punctuation">;</span>
    <span class="token comment">// \u8001\u5BB9\u91CF</span>
    <span class="token keyword">int</span> oldCapacity <span class="token operator">=</span> oldTable<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token comment">// \u65B0\u5BB9\u91CF\uFF0C\u6269\u5927\u4E24\u500D</span>
    <span class="token keyword">int</span> newCapacity <span class="token operator">=</span> oldCapacity <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// \u65B0\u7684\u6269\u5BB9\u9600\u503C </span>
    threshold <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>newCapacity <span class="token operator">*</span> loadFactor<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u521B\u5EFA\u65B0\u7684\u6570\u7EC4</span>
    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> newTable <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token punctuation">[</span>newCapacity<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">// \u65B0\u7684\u63A9\u7801\uFF0C\u9ED8\u8BA42\u6269\u5BB9\u540E\u662F4\uFF0C-1\u662F3\uFF0C\u4E8C\u8FDB\u5236\u5C31\u662F11\u3002</span>
    <span class="token keyword">int</span> sizeMask <span class="token operator">=</span> newCapacity <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> oldCapacity <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u904D\u5386\u8001\u6570\u7EC4</span>
        <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> oldTable<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> next <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
            <span class="token comment">// \u8BA1\u7B97\u65B0\u7684\u4F4D\u7F6E\uFF0C\u65B0\u7684\u4F4D\u7F6E\u53EA\u53EF\u80FD\u662F\u4E0D\u4FBF\u6216\u8005\u662F\u8001\u7684\u4F4D\u7F6E+\u8001\u7684\u5BB9\u91CF\u3002</span>
            <span class="token keyword">int</span> idx <span class="token operator">=</span> e<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>next <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>   <span class="token comment">//  Single node on list</span>
                <span class="token comment">// \u5982\u679C\u5F53\u524D\u4F4D\u7F6E\u8FD8\u4E0D\u662F\u94FE\u8868\uFF0C\u53EA\u662F\u4E00\u4E2A\u5143\u7D20\uFF0C\u76F4\u63A5\u8D4B\u503C</span>
                newTable<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> e<span class="token punctuation">;</span>
            <span class="token keyword">else</span> <span class="token punctuation">{</span> <span class="token comment">// Reuse consecutive sequence at same slot</span>
                <span class="token comment">// \u5982\u679C\u662F\u94FE\u8868\u4E86</span>
                <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> lastRun <span class="token operator">=</span> e<span class="token punctuation">;</span>
                <span class="token keyword">int</span> lastIdx <span class="token operator">=</span> idx<span class="token punctuation">;</span>
                <span class="token comment">// \u65B0\u7684\u4F4D\u7F6E\u53EA\u53EF\u80FD\u662F\u4E0D\u4FBF\u6216\u8005\u662F\u8001\u7684\u4F4D\u7F6E+\u8001\u7684\u5BB9\u91CF\u3002</span>
                <span class="token comment">// \u904D\u5386\u7ED3\u675F\u540E\uFF0ClastRun \u540E\u9762\u7684\u5143\u7D20\u4F4D\u7F6E\u90FD\u662F\u76F8\u540C\u7684</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> last <span class="token operator">=</span> next<span class="token punctuation">;</span> last <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> last <span class="token operator">=</span> last<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> k <span class="token operator">=</span> last<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">!=</span> lastIdx<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        lastIdx <span class="token operator">=</span> k<span class="token punctuation">;</span>
                        lastRun <span class="token operator">=</span> last<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
                <span class="token comment">// \uFF0ClastRun \u540E\u9762\u7684\u5143\u7D20\u4F4D\u7F6E\u90FD\u662F\u76F8\u540C\u7684\uFF0C\u76F4\u63A5\u4F5C\u4E3A\u94FE\u8868\u8D4B\u503C\u5230\u65B0\u4F4D\u7F6E\u3002</span>
                newTable<span class="token punctuation">[</span>lastIdx<span class="token punctuation">]</span> <span class="token operator">=</span> lastRun<span class="token punctuation">;</span>
                <span class="token comment">// Clone remaining nodes</span>
                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p <span class="token operator">=</span> e<span class="token punctuation">;</span> p <span class="token operator">!=</span> lastRun<span class="token punctuation">;</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u904D\u5386\u5269\u4F59\u5143\u7D20\uFF0C\u5934\u63D2\u6CD5\u5230\u6307\u5B9A k \u4F4D\u7F6E\u3002</span>
                    <span class="token class-name">V</span> v <span class="token operator">=</span> p<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
                    <span class="token keyword">int</span> h <span class="token operator">=</span> p<span class="token punctuation">.</span>hash<span class="token punctuation">;</span>
                    <span class="token keyword">int</span> k <span class="token operator">=</span> h <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span>
                    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> n <span class="token operator">=</span> newTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    newTable<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> p<span class="token punctuation">.</span>key<span class="token punctuation">,</span> v<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5934\u63D2\u6CD5\u63D2\u5165\u65B0\u7684\u8282\u70B9</span>
    <span class="token keyword">int</span> nodeIndex <span class="token operator">=</span> node<span class="token punctuation">.</span>hash <span class="token operator">&amp;</span> sizeMask<span class="token punctuation">;</span> <span class="token comment">// add the new node</span>
    node<span class="token punctuation">.</span><span class="token function">setNext</span><span class="token punctuation">(</span>newTable<span class="token punctuation">[</span>nodeIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    newTable<span class="token punctuation">[</span>nodeIndex<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">;</span>
    table <span class="token operator">=</span> newTable<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6709\u4E9B\u540C\u5B66\u53EF\u80FD\u4F1A\u5BF9\u6700\u540E\u7684\u4E24\u4E2A for \u5FAA\u73AF\u6709\u7591\u60D1\uFF0C\u8FD9\u91CC\u7B2C\u4E00\u4E2A for \u662F\u4E3A\u4E86\u5BFB\u627E\u8FD9\u6837\u4E00\u4E2A\u8282\u70B9\uFF0C\u8FD9\u4E2A\u8282\u70B9\u540E\u9762\u7684\u6240\u6709 next \u8282\u70B9\u7684\u65B0\u4F4D\u7F6E\u90FD\u662F\u76F8\u540C\u7684\u3002\u7136\u540E\u628A\u8FD9\u4E2A\u4F5C\u4E3A\u4E00\u4E2A\u94FE\u8868\u8D4B\u503C\u5230\u65B0\u4F4D\u7F6E\u3002\u7B2C\u4E8C\u4E2A for \u5FAA\u73AF\u662F\u4E3A\u4E86\u628A\u5269\u4F59\u7684\u5143\u7D20\u901A\u8FC7\u5934\u63D2\u6CD5\u63D2\u5165\u5230\u6307\u5B9A\u4F4D\u7F6E\u94FE\u8868\u3002\u8FD9\u6837\u5B9E\u73B0\u7684\u539F\u56E0\u53EF\u80FD\u662F\u57FA\u4E8E\u6982\u7387\u7EDF\u8BA1\uFF0C\u6709\u6DF1\u5165\u7814\u7A76\u7684\u540C\u5B66\u53EF\u4EE5\u53D1\u8868\u4E0B\u610F\u89C1\u3002</p><h3 id="_5-get" tabindex="-1"><a class="header-anchor" href="#_5-get" aria-hidden="true">#</a> 5. get</h3><p>\u5230\u8FD9\u91CC\u5C31\u5F88\u7B80\u5355\u4E86\uFF0Cget \u65B9\u6CD5\u53EA\u9700\u8981\u4E24\u6B65\u5373\u53EF\u3002</p><ol><li>\u8BA1\u7B97\u5F97\u5230 key \u7684\u5B58\u653E\u4F4D\u7F6E\u3002</li><li>\u904D\u5386\u6307\u5B9A\u4F4D\u7F6E\u67E5\u627E\u76F8\u540C key \u7684 value \u503C\u3002</li></ol><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> s<span class="token punctuation">;</span> <span class="token comment">// manually integrate access methods to reduce overhead</span>
    <span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span>
    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">hash</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> u <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>h <span class="token operator">&gt;&gt;&gt;</span> segmentShift<span class="token punctuation">)</span> <span class="token operator">&amp;</span> segmentMask<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> SSHIFT<span class="token punctuation">)</span> <span class="token operator">+</span> SBASE<span class="token punctuation">;</span>
    <span class="token comment">// \u8BA1\u7B97\u5F97\u5230 key \u7684\u5B58\u653E\u4F4D\u7F6E</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Segment</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>UNSAFE<span class="token punctuation">.</span><span class="token function">getObjectVolatile</span><span class="token punctuation">(</span>segments<span class="token punctuation">,</span> u<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>tab <span class="token operator">=</span> s<span class="token punctuation">.</span>table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">HashEntry</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span> UNSAFE<span class="token punctuation">.</span>getObjectVolatile
                 <span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>tab<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> TSHIFT<span class="token punctuation">)</span> <span class="token operator">+</span> TBASE<span class="token punctuation">)</span><span class="token punctuation">;</span>
             e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u5982\u679C\u662F\u94FE\u8868\uFF0C\u904D\u5386\u67E5\u627E\u5230\u76F8\u540C key \u7684 value\u3002</span>
            <span class="token class-name">K</span> k<span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>k <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> e<span class="token punctuation">.</span>value<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-concurrenthashmap-1-8" tabindex="-1"><a class="header-anchor" href="#_2-concurrenthashmap-1-8" aria-hidden="true">#</a> 2. ConcurrentHashMap 1.8</h2><h3 id="_1-\u5B58\u50A8\u7ED3\u6784-1" tabindex="-1"><a class="header-anchor" href="#_1-\u5B58\u50A8\u7ED3\u6784-1" aria-hidden="true">#</a> 1. \u5B58\u50A8\u7ED3\u6784</h3><p><img src="`+p+`" alt="Java8 ConcurrentHashMap \u5B58\u50A8\u7ED3\u6784\uFF08\u56FE\u7247\u6765\u81EA javadoop\uFF09" loading="lazy"></p><p>\u53EF\u4EE5\u53D1\u73B0 Java8 \u7684 ConcurrentHashMap \u76F8\u5BF9\u4E8E Java7 \u6765\u8BF4\u53D8\u5316\u6BD4\u8F83\u5927\uFF0C\u4E0D\u518D\u662F\u4E4B\u524D\u7684 <strong>Segment \u6570\u7EC4 + HashEntry \u6570\u7EC4 + \u94FE\u8868</strong>\uFF0C\u800C\u662F <strong>Node \u6570\u7EC4 + \u94FE\u8868 / \u7EA2\u9ED1\u6811</strong>\u3002\u5F53\u51B2\u7A81\u94FE\u8868\u8FBE\u5230\u4E00\u5B9A\u957F\u5EA6\u65F6\uFF0C\u94FE\u8868\u4F1A\u8F6C\u6362\u6210\u7EA2\u9ED1\u6811\u3002</p><h3 id="_2-\u521D\u59CB\u5316-inittable" tabindex="-1"><a class="header-anchor" href="#_2-\u521D\u59CB\u5316-inittable" aria-hidden="true">#</a> 2. \u521D\u59CB\u5316 initTable</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Initializes table, using the size recorded in sizeCtl.
 */</span>
<span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token keyword">int</span> sc<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        \uFF0F\uFF0F\u3000\u5982\u679C sizeCtl <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token punctuation">,</span>\u8BF4\u660E\u53E6\u5916\u7684\u7EBF\u7A0B\u6267\u884CCAS \u6210\u529F\uFF0C\u6B63\u5728\u8FDB\u884C\u521D\u59CB\u5316\u3002
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sc <span class="token operator">=</span> sizeCtl<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token comment">// \u8BA9\u51FA CPU \u4F7F\u7528\u6743</span>
            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token keyword">yield</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// lost initialization race; just spin</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">U</span><span class="token punctuation">.</span><span class="token function">compareAndSwapInt</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> SIZECTL<span class="token punctuation">,</span> sc<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">try</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> tab<span class="token punctuation">.</span>length <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token punctuation">(</span>sc <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> sc <span class="token operator">:</span> DEFAULT_CAPACITY<span class="token punctuation">;</span>
                    <span class="token annotation punctuation">@SuppressWarnings</span><span class="token punctuation">(</span><span class="token string">&quot;unchecked&quot;</span><span class="token punctuation">)</span>
                    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> nt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>
                    table <span class="token operator">=</span> tab <span class="token operator">=</span> nt<span class="token punctuation">;</span>
                    sc <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>n <span class="token operator">&gt;&gt;&gt;</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
                sizeCtl <span class="token operator">=</span> sc<span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> tab<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u4ECE\u6E90\u7801\u4E2D\u53EF\u4EE5\u53D1\u73B0 ConcurrentHashMap \u7684\u521D\u59CB\u5316\u662F\u901A\u8FC7<strong>\u81EA\u65CB\u548C CAS</strong> \u64CD\u4F5C\u5B8C\u6210\u7684\u3002\u91CC\u9762\u9700\u8981\u6CE8\u610F\u7684\u662F\u53D8\u91CF <code>sizeCtl</code> \uFF0C\u5B83\u7684\u503C\u51B3\u5B9A\u7740\u5F53\u524D\u7684\u521D\u59CB\u5316\u72B6\u6001\u3002</p><ol><li>-1 \u8BF4\u660E\u6B63\u5728\u521D\u59CB\u5316</li><li>-N \u8BF4\u660E\u6709N-1\u4E2A\u7EBF\u7A0B\u6B63\u5728\u8FDB\u884C\u6269\u5BB9</li><li>\u8868\u793A table \u521D\u59CB\u5316\u5927\u5C0F\uFF0C\u5982\u679C table \u6CA1\u6709\u521D\u59CB\u5316</li><li>\u8868\u793A table \u5BB9\u91CF\uFF0C\u5982\u679C table\u3000\u5DF2\u7ECF\u521D\u59CB\u5316\u3002</li></ol><h3 id="_3-put-1" tabindex="-1"><a class="header-anchor" href="#_3-put-1" aria-hidden="true">#</a> 3. put</h3><p>\u76F4\u63A5\u8FC7\u4E00\u904D put \u6E90\u7801\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">putVal</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** Implementation for put and putIfAbsent */</span>
<span class="token keyword">final</span> <span class="token class-name">V</span> <span class="token function">putVal</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> value<span class="token punctuation">,</span> <span class="token keyword">boolean</span> onlyIfAbsent<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// key \u548C value \u4E0D\u80FD\u4E3A\u7A7A</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> value <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">NullPointerException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> hash <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">int</span> binCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab <span class="token operator">=</span> table<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// f = \u76EE\u6807\u4F4D\u7F6E\u5143\u7D20</span>
        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> f<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> i<span class="token punctuation">,</span> fh<span class="token punctuation">;</span><span class="token comment">// fh \u540E\u9762\u5B58\u653E\u76EE\u6807\u4F4D\u7F6E\u7684\u5143\u7D20 hash \u503C</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>tab <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token comment">// \u6570\u7EC4\u6876\u4E3A\u7A7A\uFF0C\u521D\u59CB\u5316\u6570\u7EC4\u6876\uFF08\u81EA\u65CB+CAS)</span>
            tab <span class="token operator">=</span> <span class="token function">initTable</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>f <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i <span class="token operator">=</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> hash<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u6876\u5185\u4E3A\u7A7A\uFF0CCAS \u653E\u5165\uFF0C\u4E0D\u52A0\u9501\uFF0C\u6210\u529F\u4E86\u5C31\u76F4\u63A5 break \u8DF3\u51FA</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">casTabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>  <span class="token comment">// no lock when adding to empty bin</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fh <span class="token operator">=</span> f<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> MOVED<span class="token punctuation">)</span>
            tab <span class="token operator">=</span> <span class="token function">helpTransfer</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token class-name">V</span> oldVal <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
            <span class="token comment">// \u4F7F\u7528 synchronized \u52A0\u9501\u52A0\u5165\u8282\u70B9</span>
            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span> <span class="token operator">==</span> f<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// \u8BF4\u660E\u662F\u94FE\u8868</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>fh <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        binCount <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                        <span class="token comment">// \u5FAA\u73AF\u52A0\u5165\u65B0\u7684\u6216\u8005\u8986\u76D6\u8282\u70B9</span>
                        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e <span class="token operator">=</span> f<span class="token punctuation">;</span><span class="token punctuation">;</span> <span class="token operator">++</span>binCount<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            <span class="token class-name">K</span> ek<span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> hash <span class="token operator">&amp;&amp;</span>
                                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span>
                                 <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                oldVal <span class="token operator">=</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
                                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>
                                    e<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                            <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> pred <span class="token operator">=</span> e<span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                                pred<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>
                                                          value<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token punctuation">}</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>f <span class="token keyword">instanceof</span> <span class="token class-name">TreeBin</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                        <span class="token comment">// \u7EA2\u9ED1\u6811</span>
                        <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> p<span class="token punctuation">;</span>
                        binCount <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">TreeBin</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">)</span>f<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">putTreeVal</span><span class="token punctuation">(</span>hash<span class="token punctuation">,</span> key<span class="token punctuation">,</span>
                                                       value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                            oldVal <span class="token operator">=</span> p<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
                            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>onlyIfAbsent<span class="token punctuation">)</span>
                                p<span class="token punctuation">.</span>val <span class="token operator">=</span> value<span class="token punctuation">;</span>
                        <span class="token punctuation">}</span>
                    <span class="token punctuation">}</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>binCount <span class="token operator">&gt;=</span> TREEIFY_THRESHOLD<span class="token punctuation">)</span>
                    <span class="token function">treeifyBin</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>oldVal <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
                    <span class="token keyword">return</span> oldVal<span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token function">addCount</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">,</span> binCount<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol><li><p>\u6839\u636E key \u8BA1\u7B97\u51FA hashcode \u3002</p></li><li><p>\u5224\u65AD\u662F\u5426\u9700\u8981\u8FDB\u884C\u521D\u59CB\u5316\u3002</p></li><li><p>\u5373\u4E3A\u5F53\u524D key \u5B9A\u4F4D\u51FA\u7684 Node\uFF0C\u5982\u679C\u4E3A\u7A7A\u8868\u793A\u5F53\u524D\u4F4D\u7F6E\u53EF\u4EE5\u5199\u5165\u6570\u636E\uFF0C\u5229\u7528 CAS \u5C1D\u8BD5\u5199\u5165\uFF0C\u5931\u8D25\u5219\u81EA\u65CB\u4FDD\u8BC1\u6210\u529F\u3002</p></li><li><p>\u5982\u679C\u5F53\u524D\u4F4D\u7F6E\u7684 <code>hashcode == MOVED == -1</code>,\u5219\u9700\u8981\u8FDB\u884C\u6269\u5BB9\u3002</p></li><li><p>\u5982\u679C\u90FD\u4E0D\u6EE1\u8DB3\uFF0C\u5219\u5229\u7528 synchronized \u9501\u5199\u5165\u6570\u636E\u3002</p></li><li><p>\u5982\u679C\u6570\u91CF\u5927\u4E8E <code>TREEIFY_THRESHOLD</code> \u5219\u8981\u6267\u884C\u6811\u5316\u65B9\u6CD5\uFF0C\u5728treeifyBin\u4E2D\u4F1A\u9996\u5148\u5224\u65AD\u5F53\u524D\u6570\u7EC4\u957F\u5EA6\u226564\u65F6\u624D\u4F1A\u5C06\u94FE\u8868\u8F6C\u6362\u4E3A\u7EA2\u9ED1\u6811\u3002</p></li></ol><h3 id="_4-get" tabindex="-1"><a class="header-anchor" href="#_4-get" aria-hidden="true">#</a> 4. get</h3><p>get \u6D41\u7A0B\u6BD4\u8F83\u7B80\u5355\uFF0C\u76F4\u63A5\u8FC7\u4E00\u904D\u6E90\u7801\u3002</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token class-name">V</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">[</span><span class="token punctuation">]</span> tab<span class="token punctuation">;</span> <span class="token class-name">Node</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span><span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> e<span class="token punctuation">,</span> p<span class="token punctuation">;</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> eh<span class="token punctuation">;</span> <span class="token class-name">K</span> ek<span class="token punctuation">;</span>
    <span class="token comment">// key \u6240\u5728\u7684 hash \u4F4D\u7F6E</span>
    <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">spread</span><span class="token punctuation">(</span>key<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>tab <span class="token operator">=</span> table<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> tab<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span>
        <span class="token punctuation">(</span>e <span class="token operator">=</span> <span class="token function">tabAt</span><span class="token punctuation">(</span>tab<span class="token punctuation">,</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> h<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// \u5982\u679C\u6307\u5B9A\u4F4D\u7F6E\u5143\u7D20\u5B58\u5728\uFF0C\u5934\u7ED3\u70B9hash\u503C\u76F8\u540C</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>eh <span class="token operator">=</span> e<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token operator">==</span> h<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token comment">// key hash \u503C\u76F8\u7B49\uFF0Ckey\u503C\u76F8\u540C\uFF0C\u76F4\u63A5\u8FD4\u56DE\u5143\u7D20 value</span>
                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>eh <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>
            <span class="token comment">// \u5934\u7ED3\u70B9hash\u503C\u5C0F\u4E8E0\uFF0C\u8BF4\u660E\u6B63\u5728\u6269\u5BB9\u6216\u8005\u662F\u7EA2\u9ED1\u6811\uFF0Cfind\u67E5\u627E</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>h<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token comment">// \u662F\u94FE\u8868\uFF0C\u904D\u5386\u67E5\u627E</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>e<span class="token punctuation">.</span>hash <span class="token operator">==</span> h <span class="token operator">&amp;&amp;</span>
                <span class="token punctuation">(</span><span class="token punctuation">(</span>ek <span class="token operator">=</span> e<span class="token punctuation">.</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> key <span class="token operator">||</span> <span class="token punctuation">(</span>ek <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> key<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>ek<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                <span class="token keyword">return</span> e<span class="token punctuation">.</span>val<span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u603B\u7ED3\u4E00\u4E0B get \u8FC7\u7A0B\uFF1A</p><ol><li>\u6839\u636E hash \u503C\u8BA1\u7B97\u4F4D\u7F6E\u3002</li><li>\u67E5\u627E\u5230\u6307\u5B9A\u4F4D\u7F6E\uFF0C\u5982\u679C\u5934\u8282\u70B9\u5C31\u662F\u8981\u627E\u7684\uFF0C\u76F4\u63A5\u8FD4\u56DE\u5B83\u7684 value.</li><li>\u5982\u679C\u5934\u8282\u70B9 hash \u503C\u5C0F\u4E8E 0 \uFF0C\u8BF4\u660E\u6B63\u5728\u6269\u5BB9\u6216\u8005\u662F\u7EA2\u9ED1\u6811\uFF0C\u67E5\u627E\u4E4B\u3002</li><li>\u5982\u679C\u662F\u94FE\u8868\uFF0C\u904D\u5386\u67E5\u627E\u4E4B\u3002</li></ol><p>\u603B\u7ED3\uFF1A</p><p>\u603B\u7684\u6765\u8BF4 ConcurrentHashMap \u5728 Java8 \u4E2D\u76F8\u5BF9\u4E8E Java7 \u6765\u8BF4\u53D8\u5316\u8FD8\u662F\u633A\u5927\u7684\uFF0C</p><h2 id="_3-\u603B\u7ED3" tabindex="-1"><a class="header-anchor" href="#_3-\u603B\u7ED3" aria-hidden="true">#</a> 3. \u603B\u7ED3</h2><p>Java7 \u4E2D ConcurrentHashMap \u4F7F\u7528\u7684\u5206\u6BB5\u9501\uFF0C\u4E5F\u5C31\u662F\u6BCF\u4E00\u4E2A Segment \u4E0A\u540C\u65F6\u53EA\u6709\u4E00\u4E2A\u7EBF\u7A0B\u53EF\u4EE5\u64CD\u4F5C\uFF0C\u6BCF\u4E00\u4E2A Segment \u90FD\u662F\u4E00\u4E2A\u7C7B\u4F3C HashMap \u6570\u7EC4\u7684\u7ED3\u6784\uFF0C\u5B83\u53EF\u4EE5\u6269\u5BB9\uFF0C\u5B83\u7684\u51B2\u7A81\u4F1A\u8F6C\u5316\u4E3A\u94FE\u8868\u3002\u4F46\u662F Segment \u7684\u4E2A\u6570\u4E00\u4F46\u521D\u59CB\u5316\u5C31\u4E0D\u80FD\u6539\u53D8\u3002</p><p>Java8 \u4E2D\u7684 ConcurrentHashMap \u4F7F\u7528\u7684 Synchronized \u9501\u52A0 CAS \u7684\u673A\u5236\u3002\u7ED3\u6784\u4E5F\u7531 Java7 \u4E2D\u7684 <strong>Segment \u6570\u7EC4 + HashEntry \u6570\u7EC4 + \u94FE\u8868</strong> \u8FDB\u5316\u6210\u4E86 <strong>Node \u6570\u7EC4 + \u94FE\u8868 / \u7EA2\u9ED1\u6811</strong>\uFF0CNode \u662F\u7C7B\u4F3C\u4E8E\u4E00\u4E2A HashEntry \u7684\u7ED3\u6784\u3002\u5B83\u7684\u51B2\u7A81\u518D\u8FBE\u5230\u4E00\u5B9A\u5927\u5C0F\u65F6\u4F1A\u8F6C\u5316\u6210\u7EA2\u9ED1\u6811\uFF0C\u5728\u51B2\u7A81\u5C0F\u4E8E\u4E00\u5B9A\u6570\u91CF\u65F6\u53C8\u9000\u56DE\u94FE\u8868\u3002</p><p>\u6709\u4E9B\u540C\u5B66\u53EF\u80FD\u5BF9 Synchronized \u7684\u6027\u80FD\u5B58\u5728\u7591\u95EE\uFF0C\u5176\u5B9E Synchronized \u9501\u81EA\u4ECE\u5F15\u5165\u9501\u5347\u7EA7\u7B56\u7565\u540E\uFF0C\u6027\u80FD\u4E0D\u518D\u662F\u95EE\u9898\uFF0C\u6709\u5174\u8DA3\u7684\u540C\u5B66\u53EF\u4EE5\u81EA\u5DF1\u4E86\u89E3\u4E0B Synchronized \u7684<strong>\u9501\u5347\u7EA7</strong>\u3002</p>`,57);function y(g,h){const a=u("ExternalLinkIcon");return e(),o("div",null,[n("blockquote",null,[n("p",null,[r,n("a",d,[m,c(a)]),v])]),b])}var V=t(k,[["render",y],["__file","concurrent-hash-map-source-code.html.vue"]]);export{V as default};
