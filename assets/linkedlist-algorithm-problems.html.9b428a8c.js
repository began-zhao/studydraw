import{_ as e}from"./plugin-vue_export-helper.21dcd24c.js";import{o as t,c as p,b as n,a as o,e as s,d as l,r as c}from"./app.693e7856.js";const i={},u=s(`<h2 id="_1-\u4E24\u6570\u76F8\u52A0" tabindex="-1"><a class="header-anchor" href="#_1-\u4E24\u6570\u76F8\u52A0" aria-hidden="true">#</a> 1. \u4E24\u6570\u76F8\u52A0</h2><h3 id="\u9898\u76EE\u63CF\u8FF0" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0" aria-hidden="true">#</a> \u9898\u76EE\u63CF\u8FF0</h3><blockquote><p>Leetcode:\u7ED9\u5B9A\u4E24\u4E2A\u975E\u7A7A\u94FE\u8868\u6765\u8868\u793A\u4E24\u4E2A\u975E\u8D1F\u6574\u6570\u3002\u4F4D\u6570\u6309\u7167\u9006\u5E8F\u65B9\u5F0F\u5B58\u50A8\uFF0C\u5B83\u4EEC\u7684\u6BCF\u4E2A\u8282\u70B9\u53EA\u5B58\u50A8\u5355\u4E2A\u6570\u5B57\u3002\u5C06\u4E24\u6570\u76F8\u52A0\u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684\u94FE\u8868\u3002</p><p>\u4F60\u53EF\u4EE5\u5047\u8BBE\u9664\u4E86\u6570\u5B57 0 \u4E4B\u5916\uFF0C\u8FD9\u4E24\u4E2A\u6570\u5B57\u90FD\u4E0D\u4F1A\u4EE5\u96F6\u5F00\u5934\u3002</p></blockquote><p>\u793A\u4F8B\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u8F93\u5165\uFF1A(2 -&gt; 4 -&gt; 3) + (5 -&gt; 6 -&gt; 4)
\u8F93\u51FA\uFF1A7 -&gt; 0 -&gt; 8
\u539F\u56E0\uFF1A342 + 465 = 807
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="\u95EE\u9898\u5206\u6790" tabindex="-1"><a class="header-anchor" href="#\u95EE\u9898\u5206\u6790" aria-hidden="true">#</a> \u95EE\u9898\u5206\u6790</h3><p>Leetcode\u5B98\u65B9\u8BE6\u7EC6\u89E3\u7B54\u5730\u5740\uFF1A</p>`,7),d={href:"https://leetcode-cn.com/problems/add-two-numbers/solution/",target:"_blank",rel:"noopener noreferrer"},r=l("https://leetcode-cn.com/problems/add-two-numbers/solution/"),k=s(`<blockquote><p>\u8981\u5BF9\u5934\u7ED3\u70B9\u8FDB\u884C\u64CD\u4F5C\u65F6\uFF0C\u8003\u8651\u521B\u5EFA\u54D1\u8282\u70B9dummy\uFF0C\u4F7F\u7528dummy-&gt;next\u8868\u793A\u771F\u6B63\u7684\u5934\u8282\u70B9\u3002\u8FD9\u6837\u53EF\u4EE5\u907F\u514D\u5904\u7406\u5934\u8282\u70B9\u4E3A\u7A7A\u7684\u8FB9\u754C\u95EE\u9898\u3002</p></blockquote><p>\u6211\u4EEC\u4F7F\u7528\u53D8\u91CF\u6765\u8DDF\u8E2A\u8FDB\u4F4D\uFF0C\u5E76\u4ECE\u5305\u542B\u6700\u4F4E\u6709\u6548\u4F4D\u7684\u8868\u5934\u5F00\u59CB\u6A21\u62DF\u9010 \u4F4D\u76F8\u52A0\u7684\u8FC7\u7A0B\u3002</p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-20/34910956.jpg" alt="\u56FE1\uFF0C\u5BF9\u4E24\u6570\u76F8\u52A0\u65B9\u6CD5\u7684\u53EF\u89C6\u5316: 342 + 465 = 807342+465=807\uFF0C \u6BCF\u4E2A\u7ED3\u70B9\u90FD\u5305\u542B\u4E00\u4E2A\u6570\u5B57\uFF0C\u5E76\u4E14\u6570\u5B57\u6309\u4F4D\u9006\u5E8F\u5B58\u50A8\u3002" loading="lazy"></p><h3 id="solution" tabindex="-1"><a class="header-anchor" href="#solution" aria-hidden="true">#</a> Solution</h3><p><strong>\u6211\u4EEC\u9996\u5148\u4ECE\u6700\u4F4E\u6709\u6548\u4F4D\u4E5F\u5C31\u662F\u5217\u8868 l1\u548C l2 \u7684\u8868\u5934\u5F00\u59CB\u76F8\u52A0\u3002\u6CE8\u610F\u9700\u8981\u8003\u8651\u5230\u8FDB\u4F4D\u7684\u60C5\u51B5\uFF01</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Definition for singly-linked list.
 * public class ListNode <span class="token punctuation">{</span>
 *     int val;
 *     ListNode next;
 *     ListNode(int x) <span class="token punctuation">{</span> val = x; <span class="token punctuation">}</span>
 * <span class="token punctuation">}</span>
 */</span>
 <span class="token comment">//https://leetcode-cn.com/problems/add-two-numbers/description/</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> l1<span class="token punctuation">,</span> <span class="token class-name">ListNode</span> l2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ListNode</span> dummyHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> p <span class="token operator">=</span> l1<span class="token punctuation">,</span> q <span class="token operator">=</span> l2<span class="token punctuation">,</span> curr <span class="token operator">=</span> dummyHead<span class="token punctuation">;</span>
    <span class="token comment">//carry \u8868\u793A\u8FDB\u4F4D\u6570</span>
    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">||</span> q <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> p<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">?</span> q<span class="token punctuation">.</span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">int</span> sum <span class="token operator">=</span> carry <span class="token operator">+</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>
        <span class="token comment">//\u8FDB\u4F4D\u6570</span>
        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>
        <span class="token comment">//\u65B0\u8282\u70B9\u7684\u6570\u503C\u4E3Asum % 10</span>
        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> p <span class="token operator">=</span> p<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> q <span class="token operator">=</span> q<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>carry <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        curr<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span>carry<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> dummyHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-\u7FFB\u8F6C\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#_2-\u7FFB\u8F6C\u94FE\u8868" aria-hidden="true">#</a> 2. \u7FFB\u8F6C\u94FE\u8868</h2><h3 id="\u9898\u76EE\u63CF\u8FF0-1" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0-1" aria-hidden="true">#</a> \u9898\u76EE\u63CF\u8FF0</h3><blockquote><p>\u5251\u6307 offer:\u8F93\u5165\u4E00\u4E2A\u94FE\u8868\uFF0C\u53CD\u8F6C\u94FE\u8868\u540E\uFF0C\u8F93\u51FA\u94FE\u8868\u7684\u6240\u6709\u5143\u7D20\u3002</p></blockquote><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-20/81431871.jpg" alt="\u7FFB\u8F6C\u94FE\u8868" loading="lazy"></p><h3 id="\u95EE\u9898\u5206\u6790-1" tabindex="-1"><a class="header-anchor" href="#\u95EE\u9898\u5206\u6790-1" aria-hidden="true">#</a> \u95EE\u9898\u5206\u6790</h3><p>\u8FD9\u9053\u7B97\u6CD5\u9898\uFF0C\u8BF4\u76F4\u767D\u70B9\u5C31\u662F\uFF1A\u5982\u4F55\u8BA9\u540E\u4E00\u4E2A\u8282\u70B9\u6307\u5411\u524D\u4E00\u4E2A\u8282\u70B9\uFF01\u5728\u4E0B\u9762\u7684\u4EE3\u7801\u4E2D\u5B9A\u4E49\u4E86\u4E00\u4E2A next \u8282\u70B9\uFF0C\u8BE5\u8282\u70B9\u4E3B\u8981\u662F\u4FDD\u5B58\u8981\u53CD\u8F6C\u5230\u5934\u7684\u90A3\u4E2A\u8282\u70B9\uFF0C\u9632\u6B62\u94FE\u8868 \u201C\u65AD\u88C2\u201D\u3002</p><h3 id="solution-1" tabindex="-1"><a class="header-anchor" href="#solution-1" aria-hidden="true">#</a> Solution</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListNode</span> <span class="token punctuation">{</span>
  <span class="token keyword">int</span> val<span class="token punctuation">;</span>
  <span class="token class-name">ListNode</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

  <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * 
 * <span class="token keyword">@author</span> Snailclimb
 * <span class="token keyword">@date</span> 2018\u5E749\u670819\u65E5
 * @Description: TODO
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>

  <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token class-name">ReverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">ListNode</span> next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> pre <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// \u4FDD\u5B58\u8981\u53CD\u8F6C\u5230\u5934\u7684\u90A3\u4E2A\u8282\u70B9</span>
      next <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token comment">// \u8981\u53CD\u8F6C\u7684\u90A3\u4E2A\u8282\u70B9\u6307\u5411\u5DF2\u7ECF\u53CD\u8F6C\u7684\u4E0A\u4E00\u4E2A\u8282\u70B9(\u5907\u6CE8:\u7B2C\u4E00\u6B21\u53CD\u8F6C\u7684\u65F6\u5019\u4F1A\u6307\u5411null)</span>
      head<span class="token punctuation">.</span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>
      <span class="token comment">// \u4E0A\u4E00\u4E2A\u5DF2\u7ECF\u53CD\u8F6C\u5230\u5934\u90E8\u7684\u8282\u70B9</span>
      pre <span class="token operator">=</span> head<span class="token punctuation">;</span>
      <span class="token comment">// \u4E00\u76F4\u5411\u94FE\u8868\u5C3E\u8D70</span>
      head <span class="token operator">=</span> next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> pre<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u6D4B\u8BD5\u65B9\u6CD5\uFF1A</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">ListNode</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> d <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> e <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    a<span class="token punctuation">.</span>next <span class="token operator">=</span> b<span class="token punctuation">;</span>
    b<span class="token punctuation">.</span>next <span class="token operator">=</span> c<span class="token punctuation">;</span>
    c<span class="token punctuation">.</span>next <span class="token operator">=</span> d<span class="token punctuation">;</span>
    d<span class="token punctuation">.</span>next <span class="token operator">=</span> e<span class="token punctuation">;</span>
    <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">ReverseList</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>e <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>
      e <span class="token operator">=</span> e<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>\u8F93\u51FA\uFF1A</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>5
4
3
2
1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_3-\u94FE\u8868\u4E2D\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#_3-\u94FE\u8868\u4E2D\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9" aria-hidden="true">#</a> 3. \u94FE\u8868\u4E2D\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9</h2><h3 id="\u9898\u76EE\u63CF\u8FF0-2" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0-2" aria-hidden="true">#</a> \u9898\u76EE\u63CF\u8FF0</h3><blockquote><p>\u5251\u6307offer: \u8F93\u5165\u4E00\u4E2A\u94FE\u8868\uFF0C\u8F93\u51FA\u8BE5\u94FE\u8868\u4E2D\u5012\u6570\u7B2Ck\u4E2A\u7ED3\u70B9\u3002</p></blockquote><h3 id="\u95EE\u9898\u5206\u6790-2" tabindex="-1"><a class="header-anchor" href="#\u95EE\u9898\u5206\u6790-2" aria-hidden="true">#</a> \u95EE\u9898\u5206\u6790</h3><blockquote><p><strong>\u94FE\u8868\u4E2D\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9\u4E5F\u5C31\u662F\u6B63\u6570\u7B2C(L-K+1)\u4E2A\u8282\u70B9\uFF0C\u77E5\u9053\u4E86\u53EA\u4E00\u70B9\uFF0C\u8FD9\u4E00\u9898\u57FA\u672C\u5C31\u6CA1\u95EE\u9898\uFF01</strong></p></blockquote><p>\u9996\u5148\u4E24\u4E2A\u8282\u70B9/\u6307\u9488\uFF0C\u4E00\u4E2A\u8282\u70B9 node1 \u5148\u5F00\u59CB\u8DD1\uFF0C\u6307\u9488 node1 \u8DD1\u5230 k-1 \u4E2A\u8282\u70B9\u540E\uFF0C\u53E6\u4E00\u4E2A\u8282\u70B9 node2 \u5F00\u59CB\u8DD1\uFF0C\u5F53 node1 \u8DD1\u5230\u6700\u540E\u65F6\uFF0Cnode2 \u6240\u6307\u7684\u8282\u70B9\u5C31\u662F\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9\u4E5F\u5C31\u662F\u6B63\u6570\u7B2C(L-K+1)\u4E2A\u8282\u70B9\u3002</p><h3 id="solution-2" tabindex="-1"><a class="header-anchor" href="#solution-2" aria-hidden="true">#</a> Solution</h3><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/</span>

<span class="token comment">// \u65F6\u95F4\u590D\u6742\u5EA6O(n),\u4E00\u6B21\u904D\u5386\u5373\u53EF</span>
<span class="token comment">// https://www.nowcoder.com/practice/529d3ae5a407492994ad2a246518148a?tpId=13&amp;tqId=11167&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token class-name">FindKthToTail</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u5982\u679C\u94FE\u8868\u4E3A\u7A7A\u6216\u8005k\u5C0F\u4E8E\u7B49\u4E8E0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> k <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u58F0\u660E\u4E24\u4E2A\u6307\u5411\u5934\u7ED3\u70B9\u7684\u8282\u70B9</span>
    <span class="token class-name">ListNode</span> node1 <span class="token operator">=</span> head<span class="token punctuation">,</span> node2 <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token comment">// \u8BB0\u5F55\u8282\u70B9\u7684\u4E2A\u6570</span>
    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// \u8BB0\u5F55k\u503C\uFF0C\u540E\u9762\u8981\u4F7F\u7528</span>
    <span class="token keyword">int</span> index <span class="token operator">=</span> k<span class="token punctuation">;</span>
    <span class="token comment">// p\u6307\u9488\u5148\u8DD1\uFF0C\u5E76\u4E14\u8BB0\u5F55\u8282\u70B9\u6570\uFF0C\u5F53node1\u8282\u70B9\u8DD1\u4E86k-1\u4E2A\u8282\u70B9\u540E\uFF0Cnode2\u8282\u70B9\u5F00\u59CB\u8DD1\uFF0C</span>
    <span class="token comment">// \u5F53node1\u8282\u70B9\u8DD1\u5230\u6700\u540E\u65F6\uFF0Cnode2\u8282\u70B9\u6240\u6307\u7684\u8282\u70B9\u5C31\u662F\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node1 <span class="token operator">=</span> node1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      count<span class="token operator">++</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node2 <span class="token operator">=</span> node2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      k<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u5982\u679C\u8282\u70B9\u4E2A\u6570\u5C0F\u4E8E\u6240\u6C42\u7684\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9\uFF0C\u5219\u8FD4\u56DE\u7A7A</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> index<span class="token punctuation">)</span>
      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> node2<span class="token punctuation">;</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_4-\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2Cn\u4E2A\u8282\u70B9" tabindex="-1"><a class="header-anchor" href="#_4-\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2Cn\u4E2A\u8282\u70B9" aria-hidden="true">#</a> 4. \u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2CN\u4E2A\u8282\u70B9</h2><blockquote><p>Leetcode:\u7ED9\u5B9A\u4E00\u4E2A\u94FE\u8868\uFF0C\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C n \u4E2A\u8282\u70B9\uFF0C\u5E76\u4E14\u8FD4\u56DE\u94FE\u8868\u7684\u5934\u7ED3\u70B9\u3002</p></blockquote><p><strong>\u793A\u4F8B\uFF1A</strong></p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>\u7ED9\u5B9A\u4E00\u4E2A\u94FE\u8868: 1-&gt;2-&gt;3-&gt;4-&gt;5, \u548C n = 2.

\u5F53\u5220\u9664\u4E86\u5012\u6570\u7B2C\u4E8C\u4E2A\u8282\u70B9\u540E\uFF0C\u94FE\u8868\u53D8\u4E3A 1-&gt;2-&gt;3-&gt;5.

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u8BF4\u660E\uFF1A</strong></p><p>\u7ED9\u5B9A\u7684 n \u4FDD\u8BC1\u662F\u6709\u6548\u7684\u3002</p><p><strong>\u8FDB\u9636\uFF1A</strong></p><p>\u4F60\u80FD\u5C1D\u8BD5\u4F7F\u7528\u4E00\u8D9F\u626B\u63CF\u5B9E\u73B0\u5417\uFF1F</p><p>\u8BE5\u9898\u5728 leetcode \u4E0A\u6709\u8BE6\u7EC6\u89E3\u7B54\uFF0C\u5177\u4F53\u53EF\u53C2\u8003 Leetcode.</p><h3 id="\u95EE\u9898\u5206\u6790-3" tabindex="-1"><a class="header-anchor" href="#\u95EE\u9898\u5206\u6790-3" aria-hidden="true">#</a> \u95EE\u9898\u5206\u6790</h3><p>\u6211\u4EEC\u6CE8\u610F\u5230\u8FD9\u4E2A\u95EE\u9898\u53EF\u4EE5\u5BB9\u6613\u5730\u7B80\u5316\u6210\u53E6\u4E00\u4E2A\u95EE\u9898\uFF1A\u5220\u9664\u4ECE\u5217\u8868\u5F00\u5934\u6570\u8D77\u7684\u7B2C (L - n + 1)\u4E2A\u7ED3\u70B9\uFF0C\u5176\u4E2D L\u662F\u5217\u8868\u7684\u957F\u5EA6\u3002\u53EA\u8981\u6211\u4EEC\u627E\u5230\u5217\u8868\u7684\u957F\u5EA6 L\uFF0C\u8FD9\u4E2A\u95EE\u9898\u5C31\u5F88\u5BB9\u6613\u89E3\u51B3\u3002</p><p><img src="https://my-blog-to-use.oss-cn-beijing.aliyuncs.com/18-9-20/94354387.jpg" alt="\u56FE 1. \u5220\u9664\u5217\u8868\u4E2D\u7684\u7B2C L - n + 1 \u4E2A\u5143\u7D20" loading="lazy"></p><h3 id="solution-3" tabindex="-1"><a class="header-anchor" href="#solution-3" aria-hidden="true">#</a> Solution</h3><p><strong>\u4E24\u6B21\u904D\u5386\u6CD5</strong></p><p>\u9996\u5148\u6211\u4EEC\u5C06\u6DFB\u52A0\u4E00\u4E2A <strong>\u54D1\u7ED3\u70B9</strong> \u4F5C\u4E3A\u8F85\u52A9\uFF0C\u8BE5\u7ED3\u70B9\u4F4D\u4E8E\u5217\u8868\u5934\u90E8\u3002\u54D1\u7ED3\u70B9\u7528\u6765\u7B80\u5316\u67D0\u4E9B\u6781\u7AEF\u60C5\u51B5\uFF0C\u4F8B\u5982\u5217\u8868\u4E2D\u53EA\u542B\u6709\u4E00\u4E2A\u7ED3\u70B9\uFF0C\u6216\u9700\u8981\u5220\u9664\u5217\u8868\u7684\u5934\u90E8\u3002\u5728\u7B2C\u4E00\u6B21\u904D\u5386\u4E2D\uFF0C\u6211\u4EEC\u627E\u51FA\u5217\u8868\u7684\u957F\u5EA6 L\u3002\u7136\u540E\u8BBE\u7F6E\u4E00\u4E2A\u6307\u5411\u54D1\u7ED3\u70B9\u7684\u6307\u9488\uFF0C\u5E76\u79FB\u52A8\u5B83\u904D\u5386\u5217\u8868\uFF0C\u76F4\u81F3\u5B83\u5230\u8FBE\u7B2C (L - n) \u4E2A\u7ED3\u70B9\u90A3\u91CC\u3002<strong>\u6211\u4EEC\u628A\u7B2C (L - n)\u4E2A\u7ED3\u70B9\u7684 next \u6307\u9488\u91CD\u65B0\u94FE\u63A5\u81F3\u7B2C (L - n + 2)\u4E2A\u7ED3\u70B9\uFF0C\u5B8C\u6210\u8FD9\u4E2A\u7B97\u6CD5\u3002</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Definition for singly-linked list.
 * public class ListNode <span class="token punctuation">{</span>
 *     int val;
 *     ListNode next;
 *     ListNode(int x) <span class="token punctuation">{</span> val = x; <span class="token punctuation">}</span>
 * <span class="token punctuation">}</span>
 */</span>
<span class="token comment">// https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/description/</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u54D1\u7ED3\u70B9\uFF0C\u54D1\u7ED3\u70B9\u7528\u6765\u7B80\u5316\u67D0\u4E9B\u6781\u7AEF\u60C5\u51B5\uFF0C\u4F8B\u5982\u5217\u8868\u4E2D\u53EA\u542B\u6709\u4E00\u4E2A\u7ED3\u70B9\uFF0C\u6216\u9700\u8981\u5220\u9664\u5217\u8868\u7684\u5934\u90E8</span>
    <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// \u54D1\u7ED3\u70B9\u6307\u5411\u5934\u7ED3\u70B9</span>
    dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token comment">// \u4FDD\u5B58\u94FE\u8868\u957F\u5EA6</span>
    <span class="token keyword">int</span> length <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> len <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>len <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      length<span class="token operator">++</span><span class="token punctuation">;</span>
      len <span class="token operator">=</span> len<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    length <span class="token operator">=</span> length <span class="token operator">-</span> n<span class="token punctuation">;</span>
    <span class="token class-name">ListNode</span> target <span class="token operator">=</span> dummy<span class="token punctuation">;</span>
    <span class="token comment">// \u627E\u5230 L-n \u4F4D\u7F6E\u7684\u8282\u70B9</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      target <span class="token operator">=</span> target<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      length<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// \u628A\u7B2C (L - n)\u4E2A\u7ED3\u70B9\u7684 next \u6307\u9488\u91CD\u65B0\u94FE\u63A5\u81F3\u7B2C (L - n + 2)\u4E2A\u7ED3\u70B9</span>
    target<span class="token punctuation">.</span>next <span class="token operator">=</span> target<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>\u590D\u6742\u5EA6\u5206\u6790\uFF1A</strong></p><ul><li><strong>\u65F6\u95F4\u590D\u6742\u5EA6 O(L)</strong> \uFF1A\u8BE5\u7B97\u6CD5\u5BF9\u5217\u8868\u8FDB\u884C\u4E86\u4E24\u6B21\u904D\u5386\uFF0C\u9996\u5148\u8BA1\u7B97\u4E86\u5217\u8868\u7684\u957F\u5EA6 LL \u5176\u6B21\u627E\u5230\u7B2C (L - n)(L\u2212n) \u4E2A\u7ED3\u70B9\u3002 \u64CD\u4F5C\u6267\u884C\u4E86 2L-n2L\u2212n \u6B65\uFF0C\u65F6\u95F4\u590D\u6742\u5EA6\u4E3A O(L)O(L)\u3002</li><li><strong>\u7A7A\u95F4\u590D\u6742\u5EA6 O(1)</strong> \uFF1A\u6211\u4EEC\u53EA\u7528\u4E86\u5E38\u91CF\u7EA7\u7684\u989D\u5916\u7A7A\u95F4\u3002</li></ul><p><strong>\u8FDB\u9636\u2014\u2014\u4E00\u6B21\u904D\u5386\u6CD5\uFF1A</strong></p><blockquote><p>\u94FE\u8868\u4E2D\u5012\u6570\u7B2CN\u4E2A\u8282\u70B9\u4E5F\u5C31\u662F\u6B63\u6570\u7B2C(L-N+1)\u4E2A\u8282\u70B9\u3002</p></blockquote><p>\u5176\u5B9E\u8FD9\u79CD\u65B9\u6CD5\u5C31\u548C\u6211\u4EEC\u4E0A\u9762\u7B2C\u56DB\u9898\u627E\u201C\u94FE\u8868\u4E2D\u5012\u6570\u7B2Ck\u4E2A\u8282\u70B9\u201D\u6240\u7528\u7684\u601D\u60F3\u662F\u4E00\u6837\u7684\u3002<strong>\u57FA\u672C\u601D\u8DEF\u5C31\u662F\uFF1A</strong> \u5B9A\u4E49\u4E24\u4E2A\u8282\u70B9 node1\u3001node2;node1 \u8282\u70B9\u5148\u8DD1\uFF0Cnode1\u8282\u70B9 \u8DD1\u5230\u7B2C n+1 \u4E2A\u8282\u70B9\u7684\u65F6\u5019,node2 \u8282\u70B9\u5F00\u59CB\u8DD1.\u5F53node1 \u8282\u70B9\u8DD1\u5230\u6700\u540E\u4E00\u4E2A\u8282\u70B9\u65F6\uFF0Cnode2 \u8282\u70B9\u6240\u5728\u7684\u4F4D\u7F6E\u5C31\u662F\u7B2C \uFF08L-n \uFF09 \u4E2A\u8282\u70B9\uFF08L\u4EE3\u8868\u603B\u94FE\u8868\u957F\u5EA6\uFF0C\u4E5F\u5C31\u662F\u5012\u6570\u7B2C n+1 \u4E2A\u8282\u70B9\uFF09</p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token doc-comment comment">/**
 * Definition for singly-linked list.
 * public class ListNode <span class="token punctuation">{</span>
 *     int val;
 *     ListNode next;
 *     ListNode(int x) <span class="token punctuation">{</span> val = x; <span class="token punctuation">}</span>
 * <span class="token punctuation">}</span>
 */</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
  <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token class-name">ListNode</span> dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>
    <span class="token comment">// \u58F0\u660E\u4E24\u4E2A\u6307\u5411\u5934\u7ED3\u70B9\u7684\u8282\u70B9</span>
    <span class="token class-name">ListNode</span> node1 <span class="token operator">=</span> dummy<span class="token punctuation">,</span> node2 <span class="token operator">=</span> dummy<span class="token punctuation">;</span>

    <span class="token comment">// node1 \u8282\u70B9\u5148\u8DD1\uFF0Cnode1\u8282\u70B9 \u8DD1\u5230\u7B2C n \u4E2A\u8282\u70B9\u7684\u65F6\u5019,node2 \u8282\u70B9\u5F00\u59CB\u8DD1</span>
    <span class="token comment">// \u5F53node1 \u8282\u70B9\u8DD1\u5230\u6700\u540E\u4E00\u4E2A\u8282\u70B9\u65F6\uFF0Cnode2 \u8282\u70B9\u6240\u5728\u7684\u4F4D\u7F6E\u5C31\u662F\u7B2C \uFF08L-n \uFF09 \u4E2A\u8282\u70B9\uFF0C\u4E5F\u5C31\u662F\u5012\u6570\u7B2C n+1\uFF08L\u4EE3\u8868\u603B\u94FE\u8868\u957F\u5EA6\uFF09</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>node1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      node1 <span class="token operator">=</span> node1<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> node1 <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        node2 <span class="token operator">=</span> node2<span class="token punctuation">.</span>next<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
      n<span class="token operator">--</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    node2<span class="token punctuation">.</span>next <span class="token operator">=</span> node2<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span>

  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_5-\u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u7684\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#_5-\u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u7684\u94FE\u8868" aria-hidden="true">#</a> 5. \u5408\u5E76\u4E24\u4E2A\u6392\u5E8F\u7684\u94FE\u8868</h2><h3 id="\u9898\u76EE\u63CF\u8FF0-3" tabindex="-1"><a class="header-anchor" href="#\u9898\u76EE\u63CF\u8FF0-3" aria-hidden="true">#</a> \u9898\u76EE\u63CF\u8FF0</h3><blockquote><p>\u5251\u6307offer:\u8F93\u5165\u4E24\u4E2A\u5355\u8C03\u9012\u589E\u7684\u94FE\u8868\uFF0C\u8F93\u51FA\u4E24\u4E2A\u94FE\u8868\u5408\u6210\u540E\u7684\u94FE\u8868\uFF0C\u5F53\u7136\u6211\u4EEC\u9700\u8981\u5408\u6210\u540E\u7684\u94FE\u8868\u6EE1\u8DB3\u5355\u8C03\u4E0D\u51CF\u89C4\u5219\u3002</p></blockquote><h3 id="\u95EE\u9898\u5206\u6790-4" tabindex="-1"><a class="header-anchor" href="#\u95EE\u9898\u5206\u6790-4" aria-hidden="true">#</a> \u95EE\u9898\u5206\u6790</h3><p>\u6211\u4EEC\u53EF\u4EE5\u8FD9\u6837\u5206\u6790:</p><ol><li>\u5047\u8BBE\u6211\u4EEC\u6709\u4E24\u4E2A\u94FE\u8868 A,B\uFF1B</li><li>A\u7684\u5934\u8282\u70B9A1\u7684\u503C\u4E0EB\u7684\u5934\u7ED3\u70B9B1\u7684\u503C\u6BD4\u8F83\uFF0C\u5047\u8BBEA1\u5C0F\uFF0C\u5219A1\u4E3A\u5934\u8282\u70B9\uFF1B</li><li>A2\u518D\u548CB1\u6BD4\u8F83\uFF0C\u5047\u8BBEB1\u5C0F,\u5219\uFF0CA1\u6307\u5411B1\uFF1B</li><li>A2\u518D\u548CB2\u6BD4\u8F83 \u5C31\u8FD9\u6837\u5FAA\u73AF\u5F80\u590D\u5C31\u884C\u4E86\uFF0C\u5E94\u8BE5\u8FD8\u7B97\u597D\u7406\u89E3\u3002</li></ol><p>\u8003\u8651\u901A\u8FC7\u9012\u5F52\u7684\u65B9\u5F0F\u5B9E\u73B0\uFF01</p><h3 id="solution-4" tabindex="-1"><a class="header-anchor" href="#solution-4" aria-hidden="true">#</a> Solution</h3><p><strong>\u9012\u5F52\u7248\u672C\uFF1A</strong></p><div class="language-java ext-java line-numbers-mode"><pre class="language-java"><code><span class="token comment">/*
public class ListNode {
    int val;
    ListNode next = null;

    ListNode(int val) {
        this.val = val;
    }
}*/</span>
<span class="token comment">//https://www.nowcoder.com/practice/d8b6b4358f774294a89de2a6ac4d9337?tpId=13&amp;tqId=11169&amp;tPage=1&amp;rp=1&amp;ru=/ta/coding-interviews&amp;qru=/ta/coding-interviews/question-ranking</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
<span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token class-name">Merge</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> list1<span class="token punctuation">,</span><span class="token class-name">ListNode</span> list2<span class="token punctuation">)</span> <span class="token punctuation">{</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>list1 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">return</span> list2<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>list2 <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
           <span class="token keyword">return</span> list1<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
       <span class="token keyword">if</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>val <span class="token operator">&lt;=</span> list2<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">{</span>
           list1<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Merge</span><span class="token punctuation">(</span>list1<span class="token punctuation">.</span>next<span class="token punctuation">,</span> list2<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">return</span> list1<span class="token punctuation">;</span>
       <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
           list2<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token class-name">Merge</span><span class="token punctuation">(</span>list1<span class="token punctuation">,</span> list2<span class="token punctuation">.</span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>
           <span class="token keyword">return</span> list2<span class="token punctuation">;</span>
       <span class="token punctuation">}</span>       
   <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,59);function v(m,b){const a=c("ExternalLinkIcon");return t(),p("div",null,[u,n("p",null,[n("a",d,[r,o(a)])]),k])}var y=e(i,[["render",v],["__file","linkedlist-algorithm-problems.html.vue"]]);export{y as default};
