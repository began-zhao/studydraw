export const pagesRoutes = [
  ["v-79fdd481","/home.html",{"title":"项目主页","icon":"home","type":"home","readingTime":{"minutes":2.61,"words":782},"excerpt":"<!-- 这是项目主页的案例。你可以在这里放置你的主体内容。 想要使用此布局，你需要在页面 front matter 中设置 home: true。 配置项的相关说明详见 项目主页配置。 -->"},["/home","/home.md"]],
  ["v-8daa1a0e","/",{"title":"主页","icon":"home","type":"home","readingTime":{"minutes":0.72,"words":217},"excerpt":"<!-- 这是一个博客主页的案例。 要使用此布局，你应该在页面前端设置 layout: Blog 和 home: true。 相关配置文档请见 博客主页。 -->"},["/index.html","/README.md"]],
  ["v-0e503981","/slide.html",{"title":"幻灯片页","icon":"slides","type":"slide","readingTime":{"minutes":4.52,"words":1355},"excerpt":"@slidestart 幻灯片演示 一个简单的幻灯片演示与各种小贴士。\r\" 作者 Mr.Hope. 请滚动鼠标滚轮进入下一页\" --- 标注幻灯片 👇 -- 标注幻灯片 使用 --- 标注水平幻灯片 在水平幻灯片中使用 -- 分割垂直幻灯片 使用 `` 在幻灯片上添加属性 使用 `` 在前一个 HTML 元素上添加属性 --- Markdown 你可以在幻","date":"2021-05-03T00:00:00.000Z","localizedDate":"2021年5月3日"},["/slide","/slide.md"]],
  ["v-32bda6e0","/design/APP.html",{"title":"APP 组件设计规范","icon":"app","type":"article","readingTime":{"minutes":3.23,"words":970},"excerpt":"<p>本文对应用程序设计中常见的组件及其作用进行了介绍。</p>\n","date":"2019-11-24T00:00:00.000Z","localizedDate":"2019年11月24日","category":["设计"],"tag":["UI"]},["/design/APP","/design/APP.md"]],
  ["v-72582dd0","/design/",{"title":"UI 设计","icon":"skin","type":"article","readingTime":{"minutes":0.44,"words":132},"excerpt":"<p>本文列出了一些 UI 设计相关的资源。</p>\n","date":"2019-11-24T00:00:00.000Z","localizedDate":"2019年11月24日","category":["设计"]},["/design/index.html","/design/README.md"]],
  ["v-146a1089","/code/",{"title":"代码笔记","icon":"code","type":"article","readingTime":{"minutes":0.57,"words":172},"excerpt":"<p>此处是 咖飞 存放的一些代码相关笔记，部分为转载文章，侵删。</p>\n","date":"2020-11-26T00:00:00.000Z","localizedDate":"2020年11月26日","sticky":8,"star":true},["/code/index.html","/code/README.md"]],
  ["v-62184a02","/interview/Collections-FAQ.html",{"title":"Java 集合部分","type":"article","readingTime":{"minutes":59.63,"words":17889},"excerpt":"「直击面试」—— Java 集合，你肯定也会被问到这些 作为一位小菜 ”一面面试官“，面试过程中，我肯定会问 Java 集合的内容，同时作为求职者，也肯定会被问到集合，所以整理下 Java 集合面试题\r\" 说说常见的集合有哪些吧？\"\r\"\"\r\" HashMap说一下，其中的Key需要重写hashCode()和equals()吗？\"\r\"\"\r\" HashMap中k","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日"},["/interview/Collections-FAQ","/interview/Collections-FAQ.md"]],
  ["v-53e419f0","/interview/Design-Pattern-FAQ.html",{"title":"设计模式部分","type":"article","readingTime":{"minutes":11.91,"words":3573},"excerpt":"\" 使用UML类图画出原型模式核心角色\"\r\"\"\r\" 原型设计模式的深拷贝和浅拷贝是什么，并写出深拷贝的两种方式的源码(重写 clone 方法实现深拷贝、使用序列化来实现深拷贝 \"\r\"\"\r\" 设计模式的七大原则\"\r\"\"\r\" 在 Spring 框架中哪里使用到原型模式，并对源码进行分析 \"\r\"\"\r\" 介绍解释器设计模式是什么?\" 1. 什么是设计模式？你是否在你","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/Design-Pattern-FAQ","/interview/Design-Pattern-FAQ.md"]],
  ["v-597d6a1a","/interview/Elasticsearch-FAQ.html",{"title":"ElasticSearch 部分","type":"article","readingTime":{"minutes":7.76,"words":2327},"excerpt":"目前的 ES 有 4个 节点、14个索引、236个分片、文档数 12 亿 写可以达到 2 万 bulk 1000 左右 1、elasticsearch了解多少，说说你们公司es的集群架构，索引数据大小，分片有多少，以及一些调优手段 。 面试官 ：想了解应聘者之前公司接触的ES使用场景、规模，有没有做过比较大规模的索引设计、规划、调优。解答 ：如实结合自己的实","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/Elasticsearch-FAQ","/interview/Elasticsearch-FAQ.md"]],
  ["v-0b28948d","/interview/GC-FAQ.html",{"title":"GC 垃圾回收","type":"article","readingTime":{"minutes":24.62,"words":7387},"excerpt":"\" 《面试必备：GC 垃圾回收十大考点及图文详解》\" Java 发展历史上出现过很多垃圾回收器，各有各的适应场景，很多网上的旧内容已经跟不上最新的变化。而且“Java 的内存布局以及 GC 原理”又是 Java 开发人员绕不开的话题，更是面试中常见的高频问题之一。 我们将详细介绍 Java 的内存布局，以及各种 GC 原理。这也就包括了经典面试考点：垃圾判断","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/GC-FAQ","/interview/GC-FAQ.md"]],
  ["v-89d8cc72","/interview/Java-Basics-FAQ.html",{"title":"Java 基础部分","type":"article","readingTime":{"minutes":31.18,"words":9355},"excerpt":"JDK和JRE、 JVM\rJDK（Java Development Kit）是 Java 开发工具包，包括了 Java 运行环境 JRE、Java 工具和 Java 基础类库。; \rJRE（Java Runtime Environment）是运行 Java 程序所必须的环境的集合，包含 JVM 标准实现及 Java 核心类库。; \rJVM（Java Virt","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/Java-Basics-FAQ","/interview/Java-Basics-FAQ.md"]],
  ["v-15392d37","/interview/Java-Develop-FAQ.html",{"title":"Java 应用开发中的注入攻击","type":"article","readingTime":{"minutes":2.36,"words":707},"excerpt":"你了解 Java 应用开发中的注入攻击吗？ 注入式（Inject）攻击是一类非常常见的攻击方式，其基本特征是程序允许攻击者将不可信的动态内容注入到程序中，并将其执行，这就可能完全改变最初预计的执行过程，产生恶意效果。 下面是几种主要的注入式攻击途径，原则上提供动态执行能力的语言特性，都需要提防发生注入攻击的可能。 首先，就是最常见的 SQL 注入攻击。一个典","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/Java-Develop-FAQ","/interview/Java-Develop-FAQ.md"]],
  ["v-5e397d7f","/interview/JUC-FAQ.html",{"title":"Java 多线程部分","type":"article","readingTime":{"minutes":93.12,"words":27935},"excerpt":"\" JUC 面试，围绕着这么几个方向准备\"\r\"\"\r\" - 多线程的一些概念（进程、线程、并行、并发啥的，谈谈你对高并发的认识）\"\r\" - Java 内存模型相关（也可以算是 JVM 的范畴）\"\r\" - 同步机制（locks、synchronzied、atomic）\"\r\" - 并发容器类\"\r\" - ConcurrentHashMap、CopyOnWriteAr","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/JUC-FAQ","/interview/JUC-FAQ.md"]],
  ["v-7dfc9b76","/interview/JVM-FAQ.html",{"title":"JVM 部分","type":"article","readingTime":{"minutes":55.31,"words":16592},"excerpt":"请谈谈你对 OOM 的认识？\r\" GC 垃圾回收算法和垃圾收集器的关系？分别是什么请你谈谈？\"\r\"\"\r\" 怎么查看服务器默认的垃圾收集器是哪个？生产上如何配置垃圾收集器的？谈谈你对垃圾收集器的理解？\"\r\"\"\r\" G1 垃圾收集器？\"\r\"\"\r\" 生产环境服务器变慢，诊断思路和性能评估谈谈？\"\r\"\"\r\" 假如生产环境出现 CPU 占用过高，请谈谈你的分析思路和定","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/JVM-FAQ","/interview/JVM-FAQ.md"]],
  ["v-5c32d4d1","/interview/Kafka-FAQ.html",{"title":"Kafka 部分","type":"article","readingTime":{"minutes":39.74,"words":11923},"excerpt":"\" Kafak 知识是对分布式，或者直接说是中间件、消息队列考察点的必问内容\" 一、概念性问题 1、为什么需要消息队列 1. 解耦： 允许你独立的扩展或修改两边的处理过程，只要确保它们遵守同样的接口约束。 2. 冗余：消息队列把数据进行持久化直到它们已经被完全处理，通过这一方式规避了数据丢失风险。许多消息队列所采用的\"插入-获取-删除\"范式中，在把一个消息从","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/Kafka-FAQ","/interview/Kafka-FAQ.md"]],
  ["v-54ded724","/interview/MyBatis-FAQ.html",{"title":"Mybatis 部分","type":"article","readingTime":{"minutes":16.6,"words":4979},"excerpt":"MyBatis是一个支持普通SQL查询，存储过程和高级映射的优秀持久层框架。MyBatis消除了几乎所有的JDBC代码和参数的手工设置以及对结果集的检索封装。MyBatis可以使用简单的XML或注解用于配置和原始映射，将接口和Java的POJO（Plain Old Java Objects，普通的Java对象）映射成数据库中的记录。 JDBC 有几个步骤？ ","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/MyBatis-FAQ","/interview/MyBatis-FAQ.md"]],
  ["v-7e716216","/interview/MySQL-FAQ.html",{"title":"MYSQL 部分","type":"article","readingTime":{"minutes":115.76,"words":34728},"excerpt":"MySQL 三万字精华总结 + 面试100 问，和面试官扯皮绰绰有余\r\" 写在之前：不建议那种上来就是各种面试题罗列，然后背书式的去记忆，对技术的提升帮助很小，对正经面试也没什么帮助，有点东西的面试官深挖下就懵逼了。\"\r\"\"\r\" 个人建议把面试题看作是费曼学习法中的回顾、简化的环节，准备面试的时候，跟着题目先自己讲给自己听，看看自己会满意吗，不满意就继续学习","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/MySQL-FAQ","/interview/MySQL-FAQ.md"]],
  ["v-4126dd09","/interview/Network-FAQ.html",{"title":"计算机网络部分","type":"article","readingTime":{"minutes":51.3,"words":15391},"excerpt":"\" 在浏览器中输入一个 URL 至页面呈现，网络上都发生了什么事？\"\r\"\"\r\" 能说说 ISO 七层模型和 TCP/IP 四层模型吗？\"\r\"\"\r\" TCP/IP 与 HTTP 有什么关系吗？\"\r\"\"\r\" TCP协议与UDP协议的区别？\"\r\"\"\r\" 请详细介绍一下 TCP 的三次握手机制，为什么要三次握手？挥手却又是四次呢？\"\r\"\"\r\" 详细讲一下TCP的滑动","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/Network-FAQ","/interview/Network-FAQ.md"]],
  ["v-22c28f4e","/interview/networks-interview.html",{"title":"计算机网络面试突击","type":"article","readingTime":{"minutes":116.56,"words":34968},"excerpt":"计算机网络面试突击 一：各协议层以及它们的服务类型 1. OSI 七层模型 OSI 模型全称为开放式通信系统互连参考模型，是国际标准化组织 ( ISO ) 提出的一个试图使各种计算机在世界范围内互连为网络的标准框架。 OSI 将计算机网络体系结构划分为七层，每一层实现各自的功能和协议，并完成与相邻层的接口通信。OSI 的服务定义详细说明了各层所提供的服务。某","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/networks-interview","/interview/networks-interview.md"]],
  ["v-71b3ae87","/interview/",{"title":"烤面筋","icon":"result","type":"article","readingTime":{"minutes":0.46,"words":137},"excerpt":"这里是常见的一些面试考点，存放到博客中，方便复习查看。 目录\rJava 基础部分; \rJava 集合部分; \rJava 多线程部分; \rJVM 部分; \rMySQL 部分; \rRedis 部分; \r计算机网络部分; \rKafka 部分; \rZookeeper 部分; \rRPC 部分; \rMyBatis 部分; \rSpring 部分; \rSpring Boot","date":"2020-03-15T00:00:00.000Z","localizedDate":"2020年3月15日","category":["interview"],"star":true},["/interview/index.html","/interview/README.md"]],
  ["v-374cb61c","/interview/Redis-FAQ.html",{"title":"Redis 部分","type":"article","readingTime":{"minutes":96.32,"words":28895},"excerpt":"一、Redis 基础问题 Redis是什么 Redis：REmote DIctionary Server(远程字典服务器)。 Redis 是一个全开源免费（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件， 和 Memcached 类似，它支持存储的 value 类型相对更多，包括string(字符串)、list(链表)、set(","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/Redis-FAQ","/interview/Redis-FAQ.md"]],
  ["v-9961aa9c","/interview/RPC-FAQ.html",{"title":"RPC 部分","type":"article","readingTime":{"minutes":7.98,"words":2393},"excerpt":"什么是 RPC ？\rRPC (Remote Procedure Call)即远程过程调用，是分布式系统常见的一种通信方法。它允许程序调用另一个地址空间（通常是共享网络的另一台机器上）的过程或函数，而不用程序员显式编码这个远程调用的细节。; \r除 RPC 之外，常见的多系统数据交互方案还有分布式消息队列、HTTP 请求调用、数据库和分布式缓存等。; \r其中 R","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/RPC-FAQ","/interview/RPC-FAQ.md"]],
  ["v-9a4c3448","/interview/Spring-FAQ.html",{"title":"Spring 部分","type":"article","readingTime":{"minutes":45.11,"words":13532},"excerpt":"Spring 面试集\r\" 基于Spring Framework 4.x 总结的常见面试题，系统学习建议还是官方文档走起：https://spring.io/projects/spring-framework#learn\" 一、一般问题 开发中主要使用 Spring 的什么技术 ? 1. IOC 容器管理各层的组件 2. 使用 AOP 配置声明式事务 3. 整","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/Spring-FAQ","/interview/Spring-FAQ.md"]],
  ["v-1bc6a50a","/interview/SpringBoot-FAQ.html",{"title":"SpringBoot 部分","type":"article","readingTime":{"minutes":18.14,"words":5443},"excerpt":"概述 说说 Spring Boot 和 Spring 的关系 spring boot 我理解就是把 spring spring mvc spring data jpa 等等的一些常用的常用的基础框架组合起来，提供默认的配置，然后提供可插拔的设计，就是各种 starter ，来方便开发者使用这一系列的技术，套用官方的一句话， spring 家族发展到今天，已经","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/SpringBoot-FAQ","/interview/SpringBoot-FAQ.md"]],
  ["v-2c3c3085","/interview/Tomcat-FAQ.html",{"title":"Tomcat 部分","type":"article","readingTime":{"minutes":1.15,"words":345},"excerpt":"Tomcat简介 Tomcat是用java编写的，属于Apache软件基金会的一个核心项目，可以运行Servlet和jsp，是一个小型的轻量级应用服务器，运行时占用系统资源少、扩展性好、支持负载均衡和邮件服务等的开发应用系统中的常见功能，使用中小型系统和并发访问用户不太多的系统。 Tomcat既是一个开放源码、免费支持JSP和Servlet技术的容器，同时又","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/Tomcat-FAQ","/interview/Tomcat-FAQ.md"]],
  ["v-dae0686a","/interview/ZooKeeper-FAQ.html",{"title":"Zookeeper 部分","type":"article","readingTime":{"minutes":40.14,"words":12043},"excerpt":"谈下你对 Zookeeper 的认识？ ZooKeeper 是一个分布式的，开放源码的分布式应用程序协调服务。它是一个为分布式应用提供一致性服务的软件，提供的功能包括：配置维护、域名服务、分布式同步、组服务等。 ZooKeeper 的目标就是封装好复杂易出错的关键服务，将简单易用的接口和性能高效、功能稳定的系统提供给用户。 ------ Zookeeper ","date":"2020-11-23T00:00:00.000Z","localizedDate":"2020年11月23日","category":["interview"]},["/interview/ZooKeeper-FAQ","/interview/ZooKeeper-FAQ.md"]],
  ["v-b0e7af4e","/linux/centos.html",{"title":"CentOS 教程","icon":"centos","type":"article","readingTime":{"minutes":0.19,"words":56},"excerpt":"管理工具\ryum (Centos 7); \rdnf (Centos 8); yarn 测试是否安装成功:","date":"2019-11-23T00:00:00.000Z","localizedDate":"2019年11月23日","category":["Linux"]},["/linux/centos","/linux/centos.md"]],
  ["v-f0383c18","/linux/",{"title":"Linux","icon":"linux","type":"article","readingTime":{"minutes":0.49,"words":146},"excerpt":"Linux 教程\rLinux 介绍; \rLinux 介绍; \rLinux 历史; \rLinux 编写语言; \rLinux 优势; \rLinux 桌面环境; \rLinux 文件; \rLinux 文件; \rLinux 目录; \r挂载; \rLinux 命令; \r命令格式简介; \r目录相关; \r文件相关; \r其他命令; \r命令的自动补全; \r命令的执行; \r环境变量","date":"2019-11-15T00:00:00.000Z","localizedDate":"2019年11月15日","category":["Linux"],"star":true},["/linux/index.html","/linux/README.md"]],
  ["v-e51c9476","/linux/ssh.html",{"title":"ssh","icon":"mount","type":"article","readingTime":{"minutes":0.8,"words":240},"excerpt":"使用密码登录 1. 执行以下命令，连接 Linux 云服务器。\rusername 即为前提条件中获得的默认帐号。; \rhostname or IP address 为您的 Linux 实例公网 IP 或自定义域名。; 1. 输入已获取的密码，按 Enter，即可完成登录。 使用密钥登录 1. 执行以下命令，赋予私钥文件仅本人可读权限。 1. 执行以下命令，进","date":"2019-11-23T00:00:00.000Z","localizedDate":"2019年11月23日","category":["基础"]},["/linux/ssh","/linux/ssh.md"]],
  ["v-6441b3dd","/linux/WSL.html",{"title":"WSL","icon":"api","type":"article","readingTime":{"minutes":0.27,"words":82},"excerpt":"<p>WSL 可以直接在 Windows 系统上安装并运行 Linux。目前最新的版本是 WSL2。</p>\n","date":"2019-11-23T00:00:00.000Z","localizedDate":"2019年11月23日","category":["Linux"]},["/linux/WSL","/linux/WSL.md"]],
  ["v-15054f24","/note/",{"title":"咖飞的随笔","icon":"note","type":"article","readingTime":{"minutes":0.22,"words":66},"excerpt":"这里是咖飞的一些随笔，后续被整理进博客中。 闲聊\r介绍 一些简单的碎碎叨叨\r点击前往; Debug 相关\rdebug 相关;","date":"2019-11-24T00:00:00.000Z","localizedDate":"2019年11月24日","category":["随笔"],"sticky":7,"star":7},["/note/index.html","/note/README.md"]],
  ["v-14ce05ae","/about/author/",{"title":"个人介绍 Q&A","icon":"note","type":"article","readingTime":{"minutes":0.29,"words":88},"excerpt":"后面或通过 Q&A 的形式简单介绍一下我自己 闲聊\r介绍 👋 你好 😄很高兴你点开了我的主页 🌱 我是一个后端工程师 💞️ 维护了一个公众号：程序猴咖飞 👀 希望我写下的东西能帮助到你","category":["更多"],"sticky":9,"star":true},["/about/author/index.html","/about/author/README.md"]],
  ["v-3a8e3ae8","/about/openSourceProject/big-data.html",{"title":"大数据","icon":"storage","type":"article","readingTime":{"minutes":0.77,"words":231},"excerpt":"Spark :Spark 是用于大规模数据处理的统一分析引擎。; \rFlink ：Apache Flink 是一个框架和分布式处理引擎，用于在无边界和有边界数据流上进行有状态的计算。Flink 能在所有常见集群环境中运行，并能以内存速度和任意规模进行计算。; \rHBase： HBase – Hadoop Database，是一个高可靠性、高性能、面向列、可伸","date":"2021-11-23T00:00:00.000Z","localizedDate":"2021年11月23日","category":["开源项目"]},["/about/openSourceProject/big-data","/about/openSourceProject/big-data.md"]],
  ["v-07d92b1f","/about/openSourceProject/machine-learning.html",{"title":"机器学习","icon":"set","type":"article","readingTime":{"minutes":0.28,"words":85},"excerpt":"Deeplearning4j ： Deeplearning4j 是第一个为 Java 和 Scala 编写的商业级，开源，分布式深度学习库。; \rSmile ：基于 Java 和 Scala 的机器学习库。; 相关阅读：Java 能用于机器学习和数据科学吗？-InfoQ","date":"2021-11-23T00:00:00.000Z","localizedDate":"2021年11月23日","category":["开源项目"]},["/about/openSourceProject/machine-learning","/about/openSourceProject/machine-learning.md"]],
  ["v-a254e4a4","/about/openSourceProject/practical-project.html",{"title":"实战项目","icon":"proxy","type":"article","readingTime":{"minutes":7.23,"words":2168},"excerpt":"博客/论坛/考试系统 下面这几个项目都是非常适合 Spring Boot 初学者学习的，下面的大部分项目的总体代码架构我都看过，个人觉得还算不错，不会误导没有实际做过项目的朋友。\rvhr ：微人事是一个前后端分离的人力资源管理系统，项目采用 SpringBoot+Vue 开发。; \rfavorites-web :云收藏 Spring Boot 2.X 开源项","date":"2021-11-23T00:00:00.000Z","localizedDate":"2021年11月23日","category":["开源项目"]},["/about/openSourceProject/practical-project","/about/openSourceProject/practical-project.md"]],
  ["v-c034c7d4","/about/openSourceProject/",{"title":"Java 开源项目精选","type":"article","readingTime":{"minutes":0.24,"words":73},"excerpt":"精选 Github 和 Gitee 上优质的 Java 开源项目，希望能够帮助到你。 如果有更好的项目推荐或者学习方式，欢迎关注公众号【程序猴咖飞】留言，相互学习。","date":"2021-11-23T00:00:00.000Z","localizedDate":"2021年11月23日","category":["开源项目"]},["/about/openSourceProject/index.html","/about/openSourceProject/readme.md"]],
  ["v-169d9dd3","/about/openSourceProject/system-design.html",{"title":"系统设计","icon":"extend","type":"article","readingTime":{"minutes":16.44,"words":4933},"excerpt":"基础框架\rSpring Boot ：Spring Boot 可以轻松创建独立的生产级基于 Spring 的应用程序,内置 web 服务器让你可以像运行普通 Java 程序一样运行项 目。另外，大部分 Spring Boot 项目只需要少量的配置即可，这有别于 Spring 的重配置。; \rJavalin ：一个轻量级的 Web 框架，同时支持 Java 和 ","date":"2021-11-23T00:00:00.000Z","localizedDate":"2021年11月23日","category":["开源项目"]},["/about/openSourceProject/system-design","/about/openSourceProject/system-design.md"]],
  ["v-70653dbd","/about/openSourceProject/tool-library.html",{"title":"工具类库","icon":"repair","type":"article","readingTime":{"minutes":3.41,"words":1022},"excerpt":"代码质量\rlombok :使用 Lombok 我们可以简化我们的 Java 代码，比如使用它之后我们通过注释就可以实现 getter/setter、equals 等方法。; \rguava ：Guava 是一组核心库，其中包括新的集合类型（例如 multimap 和 multiset），不可变集合，图形库以及用于并发、I / O、哈希、原始类型、字符串等的实用","date":"2021-11-23T00:00:00.000Z","localizedDate":"2021年11月23日","category":["开源项目"]},["/about/openSourceProject/tool-library","/about/openSourceProject/tool-library.md"]],
  ["v-0be76074","/about/openSourceProject/tools.html",{"title":"开发工具","icon":"tool","type":"article","readingTime":{"minutes":1.48,"words":443},"excerpt":"Java 相关\rJADX ：一款功能强大的反编译工具。; \rRecaf ： Java 字节码编辑器，基于 ASM（Java 字节码操作框架） 来修改字节码，可简化编辑已编译 Java 应用程序的过程。; Redis 可视化管理\rAnother Redis Desktop Manager ：更快、更好、更稳定的 Redis 桌面(GUI)管理客户端。; \rRe","date":"2021-11-23T00:00:00.000Z","localizedDate":"2021年11月23日","category":["开源项目"]},["/about/openSourceProject/tools","/about/openSourceProject/tools.md"]],
  ["v-0f45b7e5","/about/openSourceProject/tutorial.html",{"title":"技术教程","icon":"repo","type":"article","readingTime":{"minutes":3.46,"words":1039},"excerpt":"Java\rJavaGuide :【Java 学习+面试指南】 一份涵盖大部分 Java 程序员所需要掌握的核心知识。; \rinterview-guide ：总结了后端面试八股文中的重点，希望能帮助各位准备互联网开发岗校招面试的同学。; \rtoBeBetterJavaer ：一份通俗易懂、风趣幽默的 Java 学习指南，内容涵盖 Java 基础、Java 集合","date":"2021-11-23T00:00:00.000Z","localizedDate":"2021年11月23日","category":["开源项目"]},["/about/openSourceProject/tutorial","/about/openSourceProject/tutorial.md"]],
  ["v-31bd837a","/design/articles/gestalt-principle.html",{"title":"格式塔原则","icon":"note","type":"article","readingTime":{"minutes":29.05,"words":8716},"excerpt":"好的设计师理解心理学在视觉感知中的强大作用。当别人的目光与您的设计创作相遇时，会发生什么? 他们对您分享的信息有什么反应? 格式塔原理概述 前言 举一个场景化的栗子，大家平时逛街的时候能记住哪些广告呢? 我们虽然每天看到那么多的信息，但是真正记住的却不多。还有当我们看到复杂的事物的时候，心里会涌现不舒服的奇怪感受，有时候这种感受没有办法用语言来描述。那么为什","author":"印迹","date":"2020-09-26T00:00:00.000Z","localizedDate":"2020年9月26日","category":["设计"],"tag":["UI"]},["/design/articles/gestalt-principle","/design/articles/gestalt-principle.md"]],
  ["v-e4adfaa4","/design/articles/infomation-flow.html",{"title":"信息流介绍","icon":"note","type":"article","readingTime":{"minutes":7.07,"words":2120},"excerpt":"今日头条的出现颠覆了传统新闻产品(如网易、新浪和搜狐新闻)。 传统新闻依靠着编辑人员的推荐，将新闻触达给用户，而今日头条则依靠着新闻算法，抛弃传统人工分发的思路，使分发效率数以万计的提升，其迅速崛起，成为头部新闻资讯产品。 今日头条作为新闻信息流的头部产品，里面的设计细节和设计逻辑值得我们思考和分析。 信息流样式 什么是信息流? 信息流由两部分组成，信息流=","date":"2020-09-26T00:00:00.000Z","localizedDate":"2020年9月26日","category":["设计"],"tag":["UI"]},["/design/articles/infomation-flow","/design/articles/infomation-flow.md"]],
  ["v-2255681b","/design/articles/left-or-right.html",{"title":"布局中的左和右","icon":"note","type":"article","readingTime":{"minutes":6.9,"words":2069},"excerpt":"左右横跳的泳道 最近经常在人人视频上看电视剧，发现人人视频在设计上有个很有意思的点。 它的电影页中有很多推荐电影片单，每个片单里有 5-12 部电影；碍于手机尺寸，用户只能看到 3 部电影；如果您对这个片单里的电影比较感兴趣，可以滑动查看更多的电影——这种横向滑动的设计又被称之为“泳道”。 那么问题来了，究竟向哪个方向滑动呢? 或许您会觉得这是一个送分题，肯","date":"2020-09-26T00:00:00.000Z","localizedDate":"2020年9月26日","category":["设计"],"tag":["UI"]},["/design/articles/left-or-right","/design/articles/left-or-right.md"]],
  ["v-16be477a","/design/articles/",{"title":"设计文章","icon":"note","type":"article","readingTime":{"minutes":0.15,"words":44},"excerpt":"文章列表\r格式塔原则; \r布局中的左和右; \r信息流介绍;","date":"2020-09-26T00:00:00.000Z","localizedDate":"2020年9月26日","category":["设计"],"tag":["UI"]},["/design/articles/index.html","/design/articles/README.md"]],
  ["v-f228952e","/design/icon/apply.html",{"title":"图标应用","icon":"tool","type":"article","readingTime":{"minutes":10.16,"words":3049},"excerpt":"<p>在 UI 设计中，图标不是孤立存在的。我们学习图标的设计，不是为了画一组套图，然后上传到设计平台中分享或求赞，而是要在真实的项目中发挥作用。如果不了解图标应用到项目中的知识点，那么真实的图标设计水平就会在项目设计过程中被损耗。</p>\n<p>所以，本章讲述工具图标在项目中应用的方法。</p>\n","date":"2020-09-14T00:00:00.000Z","localizedDate":"2020年9月14日","category":["设计"],"tag":["Icon"]},["/design/icon/apply","/design/icon/apply.md"]],
  ["v-40ea6a4a","/design/icon/decorative.html",{"title":"装饰性图标设计","icon":"decorate","type":"article","readingTime":{"minutes":6.63,"words":1990},"excerpt":"<p>装饰图标最主要的应用区域，集中在首页的快速入口上，也是今天多数应用中会使用的组件。下面，我们会讲解国内主流应用中的几种装饰图标的设计。</p>\n","date":"2020-09-14T00:00:00.000Z","localizedDate":"2020年9月14日","category":["设计"],"tag":["Icon"]},["/design/icon/decorative","/design/icon/decorative.md"]],
  ["v-0a4c5b17","/design/icon/draw.html",{"title":"图标绘制流程","icon":"skin","type":"article","readingTime":{"minutes":2.22,"words":665},"excerpt":"情绪板 情绪板是在执行一项设计操作之前非常重要的一个步骤，情绪板并不是像设计平台展示作品集里那样放几张图片，几个关键词，而是一套对接下来设计的一个风格走向定位。根据不同的用户人群，不同颜色的色彩情绪，不同产品的业务，将用户调研的结果，产品的背景进行总结与思考，定位接下来的设计风格。 绘制流程 选取照片 观察生活，对想画的图标进行照片实物造型的提取。图标是对生","date":"2020-09-15T00:00:00.000Z","localizedDate":"2020年9月15日","category":["设计"],"tag":["Icon"]},["/design/icon/draw","/design/icon/draw.md"]],
  ["v-638e2b11","/design/icon/flour.html",{"title":"面性图标设计","icon":"emoji","type":"article","readingTime":{"minutes":5.3,"words":1591},"excerpt":"面性图标在操作中和线性图标的最大差别就在于描边和填充模式，我们知道为了满足像素对齐的要求，线性描边会在操作中产生很多不可控的因素，要用很多额外的操作步骤去弥补。在面性图标中，就不需要使用描边，并且使用相同的图标模板即可。 下面就进入本篇的具体案例演示。 基本面性风格 如图所示，我们使用线性图标中的样式，设计成面性效果。具体的操作步骤就不需要再完整演示了，只需","date":"2020-09-13T00:00:00.000Z","localizedDate":"2020年9月13日","category":["设计"],"tag":["Icon"]},["/design/icon/flour","/design/icon/flour.md"]],
  ["v-f500f2ca","/design/icon/guide.html",{"title":"图标设计指南","icon":"guide","type":"article","readingTime":{"minutes":13.09,"words":3928},"excerpt":"图标的可用性 图标可用性，顾名思义就是图标绘制出来是否能被用户所看懂并快速识别，是否可以为业务赋能。以下是总结的四条图标绘制的评判标准。 凸显性 用户是否能在某页面上迅速找到该图标，凸显性的目的是可以快速查找，帮助用户做选择。图标在识别的速度上远远大于文字，所以在一些页面中的重要功能使用图标的目的是为了吸引用户的注意力，让重要功能得到凸显，提高重要功能的点击","date":"2020-09-13T00:00:00.000Z","localizedDate":"2020年9月13日","category":["设计"],"tag":["Icon"]},["/design/icon/guide","/design/icon/guide.md"]],
  ["v-66effdaa","/design/icon/intro.html",{"title":"图标介绍","icon":"info","type":"article","readingTime":{"minutes":2.3,"words":689},"excerpt":"图标的基本认识 图标，是一种图形化的标识，它有广义和狭义两种概念，广义指的是所有现实中有明确指向含义的图形符号，狭义主要指在计算机设备界面中的图形符号，有非常大的覆盖范围。 对于 UI 设计师而言，主要针对的就是狭义的概念，它是 UI 界面视觉组成的关键元素之一。 在当下最常见的扁平化设计风格中，界面的实际视觉组成只有 4 种元素，图片、文字、几何图形、图标","date":"2020-09-13T00:00:00.000Z","localizedDate":"2020年9月13日","category":["设计"],"tag":["Icon"]},["/design/icon/intro","/design/icon/intro.md"]],
  ["v-d301f332","/design/icon/line.html",{"title":"线性图标设计","icon":"exercise","type":"article","readingTime":{"minutes":10.14,"words":3042},"excerpt":"<p>线性图标是所有图标中最基础的设计形式，也是最简单的入门。在我们后续设计其它的风格图标前，首先要通过练习线性图标来打下坚实的基础。</p>\n","date":"2020-09-13T00:00:00.000Z","localizedDate":"2020年9月13日","category":["设计"],"tag":["Icon"]},["/design/icon/line","/design/icon/line.md"]],
  ["v-4d2058be","/design/icon/",{"title":"图标","icon":"discover","type":"article","readingTime":{"minutes":1.4,"words":419},"excerpt":"<p>本文介绍了 UI 设计中图标的相关介绍与技巧。</p>\n","date":"2020-09-13T00:00:00.000Z","localizedDate":"2020年9月13日","category":["设计"],"tag":["Icon"]},["/design/icon/index.html","/design/icon/README.md"]],
  ["v-f6497742","/design/icon/rule.html",{"title":"图标设计准则","icon":"notice","type":"article","readingTime":{"minutes":13.07,"words":3920},"excerpt":"<p>规范是图标设计的重点。</p>\n","date":"2020-09-15T00:00:00.000Z","localizedDate":"2020年9月15日","category":["设计"],"tag":["Icon"]},["/design/icon/rule","/design/icon/rule.md"]],
  ["v-3d2f7734","/design/icon/skill.html",{"title":"图标设计技巧","icon":"creative","type":"article","readingTime":{"minutes":2.05,"words":614},"excerpt":"图标是 UI 设计中最基础也是很重要的部分，辅助人们更好的理解功能内容。随着扁平化设计风格的普及，图标的风格越来越简约，看似简单的图形，实际要准确的表达含义，也是需要注意一些方法的。下面是是图标设计的实用技巧。 简单 一个图标一个非写实的表现。不需要担心图标不够真实，消除不必要的细节，用基本的形状只保留最基础的部分，让这个图标更容易被理解。 有时候图标会因为","date":"2020-09-14T00:00:00.000Z","localizedDate":"2020年9月14日","category":["设计"],"tag":["Icon"]},["/design/icon/skill","/design/icon/skill.md"]],
  ["v-2863c8d8","/design/icon/software.html",{"title":"学习图标所需的软件","icon":"software","type":"article","readingTime":{"minutes":2.65,"words":795},"excerpt":"<p>了解了图标的类型，就要开始了解做出这些图标应该使用哪些软件了。通常，UI 主要使用的设计软件包含 PS、AI、Sketch、XD 四款，理论上，它们都包含了图标绘制的功能，下面介绍这四款软件对于图标设计的优劣，以及需要掌握的部分。</p>\n","date":"2020-09-13T00:00:00.000Z","localizedDate":"2020年9月13日","category":["设计"],"tag":["Icon"]},["/design/icon/software","/design/icon/software.md"]],
  ["v-23d2ecf5","/design/icon/start.html",{"title":"启动图标设计指南","icon":"launch","type":"article","readingTime":{"minutes":6.46,"words":1937},"excerpt":"想要在启动图标设计上入门，就要先从规范开始学习，然后了解不同的风格以及对应风格的设计过程。 启动图标的设计规范 说到启动图标的规范，首先会想到的，就是 iOS 提供的图标栅格。通过这个栅格，会规范图形的尺寸，以及所处的位置。 这个模板和工具图标的使用方法类似，我们在后面的案例进一步讲解。接着，来说明一个更重要的问题，就是启动图标画布的尺寸。 默认的情况下，我","date":"2020-09-14T00:00:00.000Z","localizedDate":"2020年9月14日","category":["设计"],"tag":["Icon"]},["/design/icon/start","/design/icon/start.md"]],
  ["v-2081c2e1","/design/icon/type.html",{"title":"图标种类","icon":"type","type":"article","readingTime":{"minutes":6.32,"words":1896},"excerpt":"<p>设计图标可以划分成三种大类:</p>\n<ul>\n<li>工具图标</li>\n<li>装饰图标</li>\n<li>主体图标</li>\n</ul>\n<p>下面将对它们分别进行介绍，以及展示相关的设计类型。</p>\n","date":"2020-09-13T00:00:00.000Z","localizedDate":"2020年9月13日","category":["设计"],"tag":["Icon"]},["/design/icon/type","/design/icon/type.md"]],
  ["v-135802a1","/design/interact/",{"title":"交互设计","icon":"interact","type":"article","readingTime":{"minutes":0.1,"words":29},"excerpt":"文章列表\r搜索框; \r文本框;","date":"2020-09-26T00:00:00.000Z","localizedDate":"2020年9月26日","category":["设计"],"tag":["UI"]},["/design/interact/index.html","/design/interact/README.md"]],
  ["v-06603a20","/design/interact/search.html",{"title":"搜索框设计","icon":"search","type":"article","readingTime":{"minutes":6.89,"words":2066},"excerpt":"搜索框是我们最常用到的 UI 控件之一，它几乎存在于所有的网站和 APP 当中。许多人认为搜索框不需要设计，因为它似乎就是由两个最简单的元素构成的。在以内容为导向的网站中，搜索框的重要性会相对更明显，用户需要快速又无痛地找到他们想要的内容。而对于设计相对负责的网站而言，这个需求尤其明显。搜索框的可用性设计，是整个设计的关键，也就是如何让用户尽量节省时间，搜到","date":"2020-09-15T00:00:00.000Z","localizedDate":"2020年9月15日","category":["设计"],"tag":["UI"]},["/design/interact/search","/design/interact/search.md"]],
  ["v-3bd48bfe","/design/interact/text-field.html",{"title":"文本框设计","icon":"input","type":"article","readingTime":{"minutes":7.07,"words":2122},"excerpt":"文本框的出现几乎可以追溯到可视化交互诞生的源头，是一个再经典不过的「鼻祖」控件了。我们每天都在和文本框打交道，不论您是产品设计者还是用户。 文本框的拆解 文本框(Text Fields)根据 Material Design 指导规范，被拆解为七个部分。分别是:\r容器(Container); \r前导图标(Leading icon); \r标签文本(Label t","date":"2020-09-26T00:00:00.000Z","localizedDate":"2020年9月26日","category":["设计"],"tag":["UI"]},["/design/interact/text-field","/design/interact/text-field.md"]],
  ["v-5837a6b0","/design/navigation/intro.html",{"title":"导航设计介绍","icon":"info","type":"article","readingTime":{"minutes":17.64,"words":5293},"excerpt":"其实网页或者 App 中的导航(Navigation)这个概念远不止我们熟悉的导航栏，而是一个更加广的交互概念: 引导用户和产品进行有效的交互，实现用户的目标。本文将详细地介绍界面的导航设计。 一个网页或 App 产品要想有很好的可用性(usability)，需要做好的最基本的一点是导航的设计或者说引导用户的设计。如果用户在使用一个网站或者 App 的时候找","date":"2020-09-15T00:00:00.000Z","localizedDate":"2020年9月15日","category":["设计"],"tag":["导航"]},["/design/navigation/intro","/design/navigation/intro.md"]],
  ["v-5e53b161","/design/navigation/navbar-design.html",{"title":"导航栏设计技巧","icon":"navbar","type":"article","readingTime":{"minutes":6.17,"words":1851},"excerpt":"评判导航菜单的设计好坏有多种不同的维度，由于它太过常用，它的好坏并没有得到更多重视。实际上，导航作为网站设计的一个基础组成部分，对于可用性的要求并不低。以下是一些常见的设计技巧。 超大菜单栏 即使许多设计师不喜欢这样的设计，而且从美学的角度上它也是反智的，但是对于许多客户而言，它依然是一个客户反响很好的设计方案。但是这样的设计对于用户可能还是有一些困扰，并且","date":"2020-09-15T00:00:00.000Z","localizedDate":"2020年9月15日","category":["设计"],"tag":["导航","Navbar"]},["/design/navigation/navbar-design","/design/navigation/navbar-design.md"]],
  ["v-662b9e66","/design/navigation/navbar.html",{"title":"导航栏设计","icon":"footer","type":"article","readingTime":{"minutes":7.62,"words":2287},"excerpt":"其实网页或者 App 中的导航(Navigation)这个概念远不止我们熟悉的导航栏，而是一个更加广的交互概念: 引导用户和产品进行有效的交互，实现用户的目标。 导航栏究竟在哪里 导航栏 Navigation Bar，也简称为 Navbar。一定会有不少刚入门的 UI 新人，在诸多的 Bar 控件中，难以区分它所指代的区域。 在 iOS 上，导航栏是指显示在","date":"2020-09-15T00:00:00.000Z","localizedDate":"2020年9月15日","category":["设计"],"tag":["导航","Navbar"]},["/design/navigation/navbar","/design/navigation/navbar.md"]],
  ["v-bd999efa","/design/navigation/",{"title":"导航设计教程","icon":"navigate","type":"article","readingTime":{"minutes":0.24,"words":73},"excerpt":"目录\r导航设计介绍; \r导航栏概述与设计方式; \r导航栏设计技巧; \r侧边导航设计; \r标签导航设计; \r标签导航设计技巧;","date":"2020-09-15T00:00:00.000Z","localizedDate":"2020年9月15日","category":["设计"],"tag":["导航"]},["/design/navigation/index.html","/design/navigation/README.md"]],
  ["v-ca9d9698","/design/navigation/sidebar-navigate.html",{"title":"侧边栏导航","icon":"sidebar","type":"article","readingTime":{"minutes":5.47,"words":1640},"excerpt":"厌倦了传统顶部导航的设计师，越来越偏爱侧边栏导航了。这种常见于页面左侧的侧边栏设计，已经成了许多独树一帜的设计师的选择了。 无处不在的侧边栏导航 侧边栏导航和菜单设计的演变有着密不可分的关系。响应式设计的流行使得向移动端偏移的网页设计，不得不采用菜单栏来替代传统的导航模式，其直接的影响就是催生了汉堡图标。 随着汉堡图标的流行，弹出式的菜单也越发的常见。其中有","date":"2020-09-15T00:00:00.000Z","localizedDate":"2020年9月15日","category":["设计"],"tag":["导航","Sidebar"]},["/design/navigation/sidebar-navigate","/design/navigation/sidebar-navigate.md"]],
  ["v-5a59a8af","/design/navigation/tabbar-design.html",{"title":"标签导航设计技巧","icon":"footer","type":"article","readingTime":{"minutes":5.47,"words":1641},"excerpt":"底部导航栏图标重要性及维度 重要性 底部导航栏的图标是路牌，承担着指路的作用，给用户指明进入产品后可以分别通往什么页面。早期的底部导航栏是单一的指路功能，经过多年的交互设计迭代后，附加了「信息展示」和「引导操作」的作用，这点会在下文中详细阐述。 三个重要评估维度 品牌调性 品牌调性决定了图标的体量感、差异化和创意延展。怎样评估图标设计能够体现出品牌调性呢? ","date":"2020-09-15T00:00:00.000Z","localizedDate":"2020年9月15日","category":["设计"],"tag":["导航","Tabbar"]},["/design/navigation/tabbar-design","/design/navigation/tabbar-design.md"]],
  ["v-4e2f22d8","/design/navigation/tabbar.html",{"title":"标签导航设计","icon":"footer","type":"article","readingTime":{"minutes":3.07,"words":921},"excerpt":"导航分很多类别，如标签导航、抽屉式导航、九宫格导航、混合组合导航、列表式导航、Tab 导航、平铺导航等等。 现在用到更多的导航其实是标签导航(tabbar)，它随处可见，相信目前大部分的 App 用的导航都是标签形式的。 理清产品框架 相信很多设计师在设计导航时，一上来就开始 YY 自己的导航要放什么，因为这个时候他已经被标签形式的导航洗脑了，认为自己的 A","date":"2020-09-15T00:00:00.000Z","localizedDate":"2020年9月15日","category":["设计"],"tag":["导航","Tabbar"]},["/design/navigation/tabbar","/design/navigation/tabbar.md"]],
  ["v-f59c452e","/code/basic/ci.html",{"title":"持续集成","icon":"ci","type":"article","readingTime":{"minutes":4.58,"words":1375},"excerpt":"<p>持续集成 (Continuous Integration) 指的是，频繁地 (一天多次) 将代码集成到主干，每次集成都通过自动化的构建 (包括编译，发布，自动化测试) 来验证，从而尽早地发现集成错误。</p>\n<p>持续集成的目的让产品可以快速迭代，同时还能保持高质量。就是说每完成一个完整的部分，就向下个环节交付，发现问题可以马上调整，使得问题不会放大到其他部分和后面的环节。</p>\n","date":"2021-02-18T00:00:00.000Z","localizedDate":"2021年2月18日","category":["基础"]},["/code/basic/ci","/code/basic/ci.md"]],
  ["v-79b2d958","/code/basic/computer.html",{"title":"计算机","icon":"computer","type":"article","readingTime":{"minutes":2.07,"words":622},"excerpt":"<p>计算机是一台机器，它按照用户的要求接收信息、存储数据、处理数据，然后再将处理结果输出(文字、图片、音频、视频等)。</p>\n<p>计算机的核心就是: 接受使用者输入指令与资料，经由中央处理器的数学与逻辑单元运算处理后，以产生或储存成有用的资讯。</p>\n","date":"2019-12-26T00:00:00.000Z","localizedDate":"2019年12月26日","category":["基础"]},["/code/basic/computer","/code/basic/computer.md"]],
  ["v-58d3b970","/code/basic/debug.html",{"title":"开发简介","icon":"debug","type":"article","readingTime":{"minutes":3.59,"words":1078},"excerpt":"<p>开发是根据用户要求建造出合理程序的过程。过程一般是用某种程序设计语言来实现的。通常采用开发工具可以进行开发。</p>\n","date":"2019-12-27T00:00:00.000Z","localizedDate":"2019年12月27日","category":["基础"]},["/code/basic/debug","/code/basic/debug.md"]],
  ["v-4d5d081c","/code/basic/encoding.html",{"title":"计算机编码介绍","icon":"number","type":"article","readingTime":{"minutes":5.77,"words":1732},"excerpt":"<p>计算机，不能直接存储文字，存储的是编码。</p>\n<p>计算机只能处理二进制的数据，也就是说计算机只能处理数字。如果要处理文本，比如: <code v-pre>0-9</code>、<code v-pre>a-z</code>、<code v-pre>A-Z</code>，就必须先把文本转换为数字才能处理。对于这些字符，可以定义一套规则来显示，比如: <code v-pre>A</code> 用 <code v-pre>110</code> 表示，<code v-pre>B</code> 用 <code v-pre>111</code> 表示等。</p>\n","date":"2019-12-27T00:00:00.000Z","localizedDate":"2019年12月27日","category":["基础"]},["/code/basic/encoding","/code/basic/encoding.md"]],
  ["v-690f86be","/code/basic/file-extension.html",{"title":"文件名与文件扩展名","icon":"file","type":"article","readingTime":{"minutes":1.41,"words":423},"excerpt":"文件名 文件名就是文件的名称，是为了方便人们区分计算机中的不同文件，而给每个文件设定一个指定的名称。 文件名不能包含控制字符: / \\ | : \" * ?` 文件扩展名 文件扩展名 (filename extension) 也称为文件的延伸文件名、后缀名，是操作系统用来标记文件类型的一种机制。通常来说，一个扩展名是跟在主文件名后面的，由一个分隔符分隔。 文件","date":"2019-12-26T00:00:00.000Z","localizedDate":"2019年12月26日","category":["基础"]},["/code/basic/file-extension","/code/basic/file-extension.md"]],
  ["v-2d7e4bd2","/code/basic/glob.html",{"title":"Glob","icon":"regexp","type":"article","readingTime":{"minutes":1.66,"words":497},"excerpt":"<p>本文介绍 Glob 匹配。</p>\n","author":"陈慧玲","date":"2021-02-18T00:00:00.000Z","localizedDate":"2021年2月18日","category":["基础"]},["/code/basic/glob","/code/basic/glob.md"]],
  ["v-77ae947c","/code/basic/license.html",{"title":"开源协议","icon":"license","type":"article","readingTime":{"minutes":5.26,"words":1578},"excerpt":"<p>开源软件在追求“自由”的同时，不能牺牲程序员的利益，否则将会影响程序员的创造激情，因此世界上现在有 60 多种被开源促进组织 (Open Source Initiative) 认可的开源许可协议来保证开源工作者的权益。</p>\n<p>开源协议规定了您在使用开源软件时的权利和责任，也就是规定了您可以做什么，不可以做什么。</p>\n<p>开源协议虽然不一定具备法律效力，但是当涉及软件版权纠纷时，开源协议也是非常重要的证据之一。</p>\n","date":"2019-12-27T00:00:00.000Z","localizedDate":"2019年12月27日","category":["基础"]},["/code/basic/license","/code/basic/license.md"]],
  ["v-78befac4","/code/basic/open-source-and-free.html",{"title":"开源与免费","icon":"compare","type":"article","readingTime":{"minutes":5.53,"words":1660},"excerpt":"<p>开源软件和免费软件是两个概念:</p>\n<ul>\n<li>\n<p>开源软件是指公开源代码的软件。开源软件在发行的时候会附上软件的源代码，并授权允许用户更改、传播或者二次开发。</p>\n</li>\n<li>\n<p>免费软件就是免费提供给用户使用的软件，但是在免费的同时，通常也会有一些限制，比如源代码不公开，用户不能随意修改、不能二次发布等。</p>\n</li>\n</ul>\n","date":"2020-06-05T00:00:00.000Z","localizedDate":"2020年6月5日","category":["基础"]},["/code/basic/open-source-and-free","/code/basic/open-source-and-free.md"]],
  ["v-3daa9eab","/code/basic/OS.html",{"title":"操作系统","icon":"OS","type":"article","readingTime":{"minutes":1.76,"words":527},"excerpt":"<p>操作系统 (Operating System，OS) 是软件的一部分，它是硬件基础上的第一层软件，是硬件和其它软件沟通的桥梁(或者说接口、中间人、中介等)。</p>\n","date":"2019-12-26T00:00:00.000Z","localizedDate":"2019年12月26日","category":["基础"]},["/code/basic/OS","/code/basic/OS.md"]],
  ["v-888fe0ec","/code/basic/path.html",{"title":"路径","icon":"navigation","type":"article","readingTime":{"minutes":2.98,"words":895},"excerpt":"<p>无论是我们想直接访问一个文件，还是在一个文件中希望访问另一个文件，都涉及到一个获取文件的操作。而无论是在 Windows 中还是在 Linux 中，文件的具体位置都用文档的路径标注。</p>\n<p>路径常常涉及到物理路径，相对路径，绝对路径，根目录的概念，现加以说明。</p>\n","date":"2019-09-20T00:00:00.000Z","localizedDate":"2019年9月20日","category":["基础"]},["/code/basic/path","/code/basic/path.md"]],
  ["v-06c910ec","/code/basic/",{"title":"基础介绍","icon":"module","type":"article","readingTime":{"minutes":0.33,"words":100},"excerpt":"<p>这些是一些最为基础的内容，是后来补充进博客中的，供访客查阅。</p>\n","date":"2019-12-26T00:00:00.000Z","localizedDate":"2019年12月26日","category":["基础"],"star":true},["/code/basic/index.html","/code/basic/README.md"]],
  ["v-1637646f","/code/github/deploy.html",{"title":"自动部署","icon":"network","type":"article","readingTime":{"minutes":4.27,"words":1280},"excerpt":"<p>本文介绍如何利用 Git 和 GitHub Action，自动部署代码到服务器。</p>\n","date":"2019-03-26T00:00:00.000Z","localizedDate":"2019年3月26日","category":["GitHub"],"tag":["Git","deploy"]},["/code/github/deploy","/code/github/deploy.md"]],
  ["v-61d56a30","/code/github/intro.html",{"title":"GitHub 简介","icon":"info","type":"article","readingTime":{"minutes":5.41,"words":1624},"excerpt":"GitHub 是世界上最大的 代码托管网站 :yum:当然在上面交友也是极好的(这是重点，圈起来要考的:sunglasses:)。 基本概念 Repository 仓库。一个仓库即是一个项目。仓库是 GitHub 上的主要内容。每当您新建一个项目并想要在 GitHub。 Star 收藏。在每一个仓库主页的上方可以看到 star 按钮。其上的数值为收藏该项目的","date":"2019-11-20T00:00:00.000Z","localizedDate":"2019年11月20日","category":["GitHub"],"tag":["介绍"]},["/code/github/intro","/code/github/intro.md"]],
  ["v-cdde1050","/code/github/pages.html",{"title":"GitHub Pages","icon":"page","type":"article","readingTime":{"minutes":3.07,"words":920},"excerpt":"<p>GitHub Pages 是静态站点托管服务，可直接从 GitHub 上的存储库中获取 HTML，CSS 和 JavaScript 文件，还可以选择在构建过程中运行这些文件并发布网站。</p>\n<p>您可以将站点托管在 GitHub 的 <code v-pre>github.io</code> 域名或您自己的自定义域名上。</p>\n","date":"2019-02-20T00:00:00.000Z","localizedDate":"2019年2月20日","category":["GitHub"]},["/code/github/pages","/code/github/pages.md"]],
  ["v-1d1d5298","/code/github/pr.html",{"title":"Pull Request","icon":"merge","type":"article","readingTime":{"minutes":3.3,"words":989},"excerpt":"简介 对于一个用户的公开仓库，在默认情况下虽然其他用户可以拉取该库的代码，但是他们并不能够直接向这个库进行推送。 GitHub 是一个代码社区，这意味着鼓励大家互相提交与贡献代码。所以这就是 Fork 和 Pull Request 出现的意义。没有人会给一个陌生人添加访问自己仓库的权限，所以我们需要一种方式，能够让大家向仓库所有者发起贡献代码的请求。这就是 ","date":"2021-02-18T00:00:00.000Z","localizedDate":"2021年2月18日","category":["GitHub"]},["/code/github/pr","/code/github/pr.md"]],
  ["v-a5f157fa","/code/github/",{"title":"GitHub","icon":"github","type":"article","readingTime":{"minutes":2.51,"words":753},"excerpt":"快速上手\rGitHub 介绍; \rPull Request; \r语义化提交; \rGitHub Pages; \r利用 Gitee 加速 GitHub 克隆; 官方文档\r全部文档; 入门指南\r查看详情; 快速入门\r设置 Git; \r创建仓库; \r复刻仓库; \r社交化; 了解 GitHub\r账户类型; \rGitHub 上的访问权限; \rGitHub 词汇表; 生态","date":"2019-11-20T00:00:00.000Z","localizedDate":"2019年11月20日","category":["GitHub"]},["/code/github/index.html","/code/github/README.md"]],
  ["v-aa6ff0a0","/code/github/semantic.html",{"title":"语义化提交","icon":"semantic","type":"article","readingTime":{"minutes":2.66,"words":797},"excerpt":"Semantic 对于一个大型项目，几千个 commit 是很常见的，这些 commit 部分是项目维护者提交的 commit，部分是一些热心的开发者通过 PR 贡献的。 无论是对于项目维护者，还是想要贡献代码的热心开发者来说，一个简洁明了的 commit 描述都是必不可少的。也就是说我们需要用尽可能简短的备注信息，备注每一个 commit 的作用，以便大家","date":"2019-03-26T00:00:00.000Z","localizedDate":"2019年3月26日","category":["GitHub"]},["/code/github/semantic","/code/github/semantic.md"]],
  ["v-200df47a","/code/github/speedup.html",{"title":"加速 GitHub 克隆","icon":"speed","type":"article","readingTime":{"minutes":1.73,"words":519},"excerpt":"由于天朝墙的存在，GitHub 的访问速度在大部分国内地区都很慢。如果需要克隆体积比较大的项目，可能需要很长时间，也很大概率会在中途因为网络波动、终端问题导致克隆失败。 本文介绍如何使用 Gitee 加快 GitHub 项目克隆。 Gitee Gitee 又称码云，是一个国内的代码托管商，国内访问 Gitee 的速度是十分 Amazing 的。 注册 Git","date":"2019-03-26T00:00:00.000Z","localizedDate":"2019年3月26日","category":["GitHub"]},["/code/github/speedup","/code/github/speedup.md"]],
  ["v-1cf146c3","/code/github/token.html",{"title":"GitHub Token","icon":"token","type":"article","readingTime":{"minutes":0.53,"words":158},"excerpt":"<p>Personal Access Token (PAT)，又称个人访问令牌，是一种代替密码进行 GitHub 身份认证的方式。</p>\n","date":"2019-03-26T00:00:00.000Z","localizedDate":"2019年3月26日","category":["GitHub"]},["/code/github/token","/code/github/token.md"]],
  ["v-1b8bc633","/code/windows/add-path.html",{"title":"环境变量的添加","icon":"shell","type":"article","readingTime":{"minutes":0.41,"words":122},"excerpt":"以 Windows 10 系统为例，直接在左下角搜索栏中输入“系统变量” 在弹出的框中点击环境变量 在弹出的新窗口中找到 path，选中并点击编辑 点击添加输入想要添加到 path 的路径或者执行文件名即可","date":"2019-09-08T00:00:00.000Z","localizedDate":"2019年9月8日","category":["基础"],"tag":["Win10"]},["/code/windows/add-path","/code/windows/add-path.md"]],
  ["v-ce519718","/code/windows/cmd.html",{"title":"打开命令行","icon":"shell","type":"article","readingTime":{"minutes":0.51,"words":154},"excerpt":"<p>打开命令行 (命令提示符) 有多种方式。</p>\n<ol>\n<li>运行 - cmd: <code v-pre>Win + R</code> 打开运行，然后敲入 <code v-pre>cmd</code> 后回车。</li>\n<li>搜索 - cmd: 点击左下角搜索，输入 cmd，然后单击命令提示符。</li>\n<li>开始菜单 - Windows 系统 - 命令提示符。</li>\n</ol>\n<p>如果想要快速打开特定路径的 cmd，请打开对应的文件夹，在地址栏直接输入 <code v-pre>cmd</code> 并回车。</p>\n","date":"2019-09-08T00:00:00.000Z","localizedDate":"2019年9月8日","category":["基础"],"tag":["Win10"]},["/code/windows/cmd","/code/windows/cmd.md"]],
  ["v-9ac8afe2","/code/windows/hidden-file.html",{"title":"显示文件后缀名与隐藏文件","icon":"eye","type":"article","readingTime":{"minutes":0.18,"words":53},"excerpt":"显示文件后缀名与隐藏文件","date":"2020-09-15T00:00:00.000Z","localizedDate":"2020年9月15日","category":["基础"],"tag":["Win10"]},["/code/windows/hidden-file","/code/windows/hidden-file.md"]],
  ["v-1595002d","/code/windows/notepad.html",{"title":"记事本的遗留问题","icon":"warn","type":"article","readingTime":{"minutes":0.95,"words":286},"excerpt":"在编写代码的时候，临时的软件选择需要注意。 请注意，绝对不能用 Word 和写字板。Word 和写字板保存的不是纯文本文件。 千万不要使用 Windows 自带的记事本编辑任何文本文件。 原因是 Microsoft 开发记事本的团队使用了一个非常弱智的行为来保存 UTF-8 编码的文件，他们自作聪明地在每个文件开头添加了几个特殊字符(UTF-8 BOM，即 ","date":"2019-09-07T00:00:00.000Z","localizedDate":"2019年9月7日","tag":["Win10"]},["/code/windows/notepad","/code/windows/notepad.md"]],
  ["v-677e2595","/code/windows/",{"title":"基础知识","icon":"windows","type":"article","readingTime":{"minutes":0.25,"words":75},"excerpt":"<p>以下是有关于 Windows 10 系统的一些基础知识。</p>\n","date":"2019-09-07T00:00:00.000Z","localizedDate":"2019年9月7日","category":["基础"],"tag":["Win10"]},["/code/windows/index.html","/code/windows/README.md"]],
  ["v-b9441ae8","/code/windows/shortcut-key.html",{"title":"常用快捷键","icon":"keyboard","type":"article","readingTime":{"minutes":3.69,"words":1107},"excerpt":"<p>熟练掌握各种 Windows 快捷键，能够更加高效的使用 Windows。</p>\n","date":"2019-09-07T00:00:00.000Z","localizedDate":"2019年9月7日","category":["基础"],"tag":["快捷键","Win10"]},["/code/windows/shortcut-key","/code/windows/shortcut-key.md"]],
  ["v-bf8c45b0","/linux/bash/arithmetic.html",{"title":"Bash 的算术运算","icon":"calculate","type":"article","readingTime":{"minutes":5.88,"words":1765},"excerpt":"算术表达式 ((...)) 语法可以进行整数的算术运算。 ((...)) 会自动忽略内部的空格，所以下面的写法都正确，得到同样的结果。 这个语法不返回值，命令执行的结果根据算术运算的结果而定。只要算术结果不是 0，命令就算执行成功。 上面例子中，3 + 2 的结果是 5，命令就算执行成功，环境变量 $? 为 0。 如果算术结果为 0，命令就算执行失败。 上面","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/arithmetic","/linux/bash/arithmetic.md"]],
  ["v-58565872","/linux/bash/array.html",{"title":"数组","icon":"array","type":"article","readingTime":{"minutes":6.66,"words":1998},"excerpt":"<p>数组(array)是一个包含多个值的变量。成员的编号从 0 开始，数量没有上限，也没有要求成员被连续索引。</p>\n","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/array","/linux/bash/array.md"]],
  ["v-a381d276","/linux/bash/condition.html",{"title":"条件判断","icon":"condition","type":"article","readingTime":{"minutes":14,"words":4200},"excerpt":"<p>本章介绍 Bash 脚本的条件判断语法。</p>\n","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/condition","/linux/bash/condition.md"]],
  ["v-a32bc7e6","/linux/bash/debug.html",{"title":"脚本除错","icon":"debug","type":"article","readingTime":{"minutes":4.45,"words":1335},"excerpt":"<p>本章介绍如何对 Shell 脚本除错。</p>\n","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/debug","/linux/bash/debug.md"]],
  ["v-5675dda1","/linux/bash/expansion.html",{"title":"Bash 的模式扩展","icon":"expansion","type":"article","readingTime":{"minutes":16.33,"words":4899},"excerpt":"简介 Shell 接收到用户输入的命令以后，会根据空格将用户的输入，拆分成一个个词元(token)。然后，Shell 会扩展词元里面的特殊字符，扩展完成后才会调用相应的命令。 这种特殊字符的扩展，称为模式扩展(globbing)。其中有些用到通配符，又称为通配符扩展(wildcard expansion)。Bash 一共提供八种扩展。\r波浪线扩展; \r? 字","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/expansion","/linux/bash/expansion.md"]],
  ["v-5e8a6e0c","/linux/bash/function.html",{"title":"Bash 函数","icon":"function","type":"article","readingTime":{"minutes":3.91,"words":1173},"excerpt":"<p>本章介绍 Bash 函数的用法。</p>\n","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/function","/linux/bash/function.md"]],
  ["v-5a1d9d0e","/linux/bash/grammar.html",{"title":"Bash 的基本语法","icon":"quote","type":"article","readingTime":{"minutes":5.92,"words":1776},"excerpt":"<p>本章介绍 Bash 的最基本语法。</p>\n","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/grammar","/linux/bash/grammar.md"]],
  ["v-670a7394","/linux/bash/intro.html",{"title":"Bash 简介","icon":"info","type":"article","readingTime":{"minutes":5.77,"words":1732},"excerpt":"<p>Bash 是 Unix 系统和 Linux 系统的一种 Shell(命令行环境)，是目前绝大多数 Linux 发行版的默认 Shell。</p>\n","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/intro","/linux/bash/intro.md"]],
  ["v-31da8ba4","/linux/bash/loop.html",{"title":"循环","icon":"loop","type":"article","readingTime":{"minutes":6.82,"words":2047},"excerpt":"<p>Bash 提供三种循环语法 <code v-pre>for</code>、<code v-pre>while</code> 和 <code v-pre>until</code>。</p>\n","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/loop","/linux/bash/loop.md"]],
  ["v-a3b03640","/linux/bash/mktemp.html",{"title":"mktemp 命令，trap 命令","icon":"shell","type":"article","readingTime":{"minutes":4.97,"words":1492},"excerpt":"<p>Bash 脚本有时需要创建临时文件或临时目录。常见的做法是，在 <code v-pre>/tmp</code> 目录里面创建文件或目录，这样做有很多弊端，使用 <code v-pre>mktemp</code> 命令是最安全的做法。</p>\n","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/mktemp","/linux/bash/mktemp.md"]],
  ["v-1a11652e","/linux/bash/prompt.html",{"title":"命令提示符","icon":"shell","type":"article","readingTime":{"minutes":3.89,"words":1166},"excerpt":"<p>用户进入 Bash 以后，Bash 会显示一个命令提示符，用来提示用户在该位置后面输入命令。</p>\n","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/prompt","/linux/bash/prompt.md"]],
  ["v-53238cf4","/linux/bash/quotation.html",{"title":"引号和转义","icon":"quote","type":"article","readingTime":{"minutes":7.07,"words":2122},"excerpt":"<p>Bash 只有一种数据类型，就是字符串。不管用户输入什么数据，Bash 都视为字符串。因此，字符串相关的引号和转义，对 Bash 来说就非常重要。</p>\n","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/quotation","/linux/bash/quotation.md"]],
  ["v-58d02e7c","/linux/bash/read.html",{"title":"read 命令","icon":"read","type":"article","readingTime":{"minutes":5.24,"words":1572},"excerpt":"用法 有时，脚本需要在执行过程中，由用户提供一部分数据，这时可以使用 read 命令。它将用户的输入存入一个变量，方便后面的代码使用。用户按下回车键，就表示输入结束。 read 命令的格式如下。 上面语法中，options 是参数选项，variable 是用来保存输入数值的一个或多个变量名。如果没有提供变量名，环境变量 REPLY 会包含用户输入的一整行数据","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/read","/linux/bash/read.md"]],
  ["v-020bcd88","/linux/bash/readline.html",{"title":"Bash 行操作","icon":"line","type":"article","readingTime":{"minutes":7.24,"words":2173},"excerpt":"简介 Bash 内置了 Readline 库，具有这个库提供的很多“行操作”功能，比如命令的自动补全，可以大大加快操作速度。 这个库默认采用 Emacs 快捷键，也可以改成 Vi 快捷键。 下面的命令可以改回 Emacs 快捷键。 如果想永久性更改编辑模式(Emacs / Vi)，可以将命令写在 ~/.inputrc 文件，这个文件是 Readline 的配","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/readline","/linux/bash/readline.md"]],
  ["v-f35beb32","/linux/bash/",{"title":"Bash 教程","icon":"shell","type":"article","readingTime":{"minutes":0.49,"words":147},"excerpt":"目录\r简介; \r基本语法; \r模式扩展; \r引号和转义; \r变量; \r字符串操作; \r算术运算; \r行操作; \r目录堆栈; \r脚本入门; \rread 命令; \r条件判断; \r循环; \r函数; \r数组; \rset 命令; \r脚本除错; \rmktemp 命令，trap 命令; \r启动环境; \r命令提示符;","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/index.html","/linux/bash/README.md"]],
  ["v-b48b13b2","/linux/bash/script.html",{"title":"Bash 脚本入门","icon":"code","type":"article","readingTime":{"minutes":12.6,"words":3779},"excerpt":"<p>脚本(script)就是包含一系列命令的一个文本文件。Shell 读取这个文件，依次执行里面的所有命令，就好像这些命令直接输入到命令行一样。所有能够在命令行完成的任务，都能够用脚本完成。</p>\n<p>脚本的好处是可以重复使用，也可以指定在特定场合自动调用，比如系统启动或关闭时自动执行脚本。</p>\n","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/script","/linux/bash/script.md"]],
  ["v-8c4eb5c4","/linux/bash/set.html",{"title":"set 命令","icon":"set","type":"article","readingTime":{"minutes":7.5,"words":2251},"excerpt":"<p><code v-pre>set</code> 命令是 Bash 脚本的重要环节，却常常被忽视，导致脚本的安全性和可维护性出问题。本章介绍 <code v-pre>set</code> 的基本用法，帮助您写出更安全的 Bash 脚本。</p>\n","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/set","/linux/bash/set.md"]],
  ["v-d5076e10","/linux/bash/stack.html",{"title":"目录堆栈","icon":"stack","type":"article","readingTime":{"minutes":3.07,"words":920},"excerpt":"<p>为了方便用户在不同目录之间切换，Bash 提供了目录堆栈功能。</p>\n","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/stack","/linux/bash/stack.md"]],
  ["v-341fac63","/linux/bash/startup.html",{"title":"Bash 启动环境","icon":"leaf","type":"article","readingTime":{"minutes":3.35,"words":1006},"excerpt":"Session 用户每次使用 Shell，都会开启一个与 Shell 的 Session(对话)。 Session 有两种类型: 登录 Session 和非登录 Session，也可以叫做 login shell 和 non-login shell。 登录 Session 登录 Session 是用户登录系统以后，系统为用户开启的原始 Session，通常需","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/startup","/linux/bash/startup.md"]],
  ["v-5e9f82a1","/linux/bash/string.html",{"title":"字符串操作","icon":"string","type":"article","readingTime":{"minutes":6.53,"words":1958},"excerpt":"<p>本章介绍 Bash 字符串操作的语法。</p>\n","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/string","/linux/bash/string.md"]],
  ["v-b3ea1e54","/linux/bash/variable.html",{"title":"Bash 变量","icon":"variable","type":"article","readingTime":{"minutes":11.48,"words":3445},"excerpt":"<p>Bash 变量分成环境变量和自定义变量两类。</p>\n","author":"咖飞","date":"2019-02-14T00:00:00.000Z","localizedDate":"2019年2月14日","category":["Linux"],"tag":["Bash"]},["/linux/bash/variable","/linux/bash/variable.md"]],
  ["v-8fbbf5e0","/linux/command/add.html",{"title":"命令补全","icon":"square-check","type":"article","readingTime":{"minutes":3.91,"words":1173},"excerpt":"<p>文件名(或者目录名)是执行 Linux 命令中最常见的参数，例如前面介绍的 <code v-pre>cd</code>、<code v-pre>mkdir</code>、<code v-pre>cp</code> 等命令，都涉及到了文件名。然而对初学者来说，输入完整的文件名感觉很麻烦，尤其面临文件名(目录名)特别长的时候。</p>\n<p>考虑到这种情况，Shell (Bash) 提供了一种称为“命令行自动补全”的功能，即在输入文件名的时候，只需要输入该文件名的前几个字符，然后按 Tab 键，Shell 就可以自动将文件名补全。</p>\n","date":"2019-11-20T00:00:00.000Z","localizedDate":"2019年11月20日","category":["Linux"]},["/linux/command/add","/linux/command/add.md"]],
  ["v-7ffa5ca6","/linux/command/command.html",{"title":"基本格式","icon":"shell","type":"article","readingTime":{"minutes":3.26,"words":978},"excerpt":"命令提示符 登录系统后，第一眼看到的内容是: 这就是 Linux 系统的命令提示符。那么，这个提示符的含义是什么呢?\r[]: 这是提示符的分隔符号，没有特殊含义。; \rroot: 显示的是当前的登录用户，笔者现在使用的是 root 用户登录。; \r@: 分隔符号，没有特殊含义。; \rlocalhost: 当前系统的简写主机名(完整主机名是 localhost","date":"2019-11-18T00:00:00.000Z","localizedDate":"2019年11月18日","category":["Linux"]},["/linux/command/command","/linux/command/command.md"]],
  ["v-10288ca4","/linux/command/dir.html",{"title":"文件夹","icon":"tree","type":"article","readingTime":{"minutes":5.31,"words":1593},"excerpt":"pwd 命令 由于 Linux 文件系统中有许多目录，当用户执行一条 Linux 命令又没有指定该命令或参数所在的目录时，Linux 系统就会首先在当前目录(目前的工作目录)搜寻这个命令或它的参数。因此，用户在执行命令之前，常常需要确定目前所在的工作目录，即当前目录。 当用户登陆 Linux 系统之后，其当前目录就是它的主目录。那么，如何确定当前目录呢? 可","date":"2019-11-18T00:00:00.000Z","localizedDate":"2019年11月18日","category":["Linux"]},["/linux/command/dir","/linux/command/dir.md"]],
  ["v-0859f348","/linux/command/excu.html",{"title":"命令执行","icon":"play","type":"article","readingTime":{"minutes":2.37,"words":711},"excerpt":"前面讲过，在 Linux 系统中“一切皆文件”，Linux 命令也不例外。那么，当编辑完成 Linux 命令并回车后，系统底层到底发生了什么事情呢? 简单来说，Linux 命令的执行过程分为如下 4 个步骤。 1. 判断路径 判断用户是否以绝对路径或相对路径的方式输入命令(如 /bin/ls)，如果是的话直接执行。 1. 检查别名 Linux 系统会检查用户","date":"2019-11-20T00:00:00.000Z","localizedDate":"2019年11月20日","category":["Linux"]},["/linux/command/excu","/linux/command/excu.md"]],
  ["v-3ab05fa5","/linux/command/file.html",{"title":"文件","icon":"file","type":"article","readingTime":{"minutes":4.3,"words":1291},"excerpt":"touch 命令 需要注意的是，touch 命令不光可以用来创建文件(当指定操作文件不存在时，该命令会在当前位置建立一个空文件)，此命令更重要的功能是修改文件的时间参数(但当文件存在时，会修改此文件的时间参数)。 Linux 系统中，每个文件主要拥有 3 个时间参数(通过 stat 命令进行查看)，分别是文件的访问时间、数据修改时间以及状态修改时间:\r访问时","date":"2019-11-19T00:00:00.000Z","localizedDate":"2019年11月19日","category":["Linux"]},["/linux/command/file","/linux/command/file.md"]],
  ["v-7b0f6d5f","/linux/command/ln.html",{"title":"链接","icon":"ask","type":"article","readingTime":{"minutes":7.56,"words":2267},"excerpt":"<p>建立硬链接和软链接非常简单，那这两种链接有什么区别? 它们都有什么作用? 这才是链接文件最不容易理解的地方，我们分别来讲讲。</p>\n","date":"2019-11-20T00:00:00.000Z","localizedDate":"2019年11月20日","category":["Linux"]},["/linux/command/ln","/linux/command/ln.md"]],
  ["v-3ba103fe","/linux/command/other.html",{"title":"其他文件命令","icon":"sort","type":"article","readingTime":{"minutes":10.93,"words":3279},"excerpt":"cp 命令 cp 命令，主要用来复制文件和目录，同时借助某些选项，还可以实现复制整个目录，以及比对两文件的新旧而予以升级等功能。 cp 命令的基本格式如下: 选项:\r-a: 相当于 -d、-p、-r 选项的集合，这几个选项我们一一介绍；; \r-d: 如果源文件为软链接(对硬链接无效)，则复制出的目标文件也为软链接；; \r-i: 询问，如果目标文件已经存在，则","date":"2019-11-19T00:00:00.000Z","localizedDate":"2019年11月19日","category":["Linux"]},["/linux/command/other","/linux/command/other.md"]],
  ["v-72a3b29c","/linux/command/path.html",{"title":"环境变量","icon":"shell","type":"article","readingTime":{"minutes":5.03,"words":1509},"excerpt":"环境变量 变量 变量是计算机系统用于保存可变值的数据类型，我们可以直接通过变量名称来提取到对应的变量值。在 Linux 系统中，环境变量是用来定义系统运行环境的一些参数，比如每个用户不同的家目录 (HOME)、邮件存放位置 (MAIL)等。 值得一提的是，Linux 系统中环境变量的名称一般都是大写的，这是一种约定俗成的规范。 我们可以使用 env 命令来查","date":"2019-11-20T00:00:00.000Z","localizedDate":"2019年11月20日","category":["Linux"]},["/linux/command/path","/linux/command/path.md"]],
  ["v-47c2b838","/linux/command/",{"title":"Linux 命令格式","icon":"shell","type":"article","readingTime":{"minutes":0.21,"words":62},"excerpt":"目录\r命令格式简介; \r目录相关; \r文件相关; \r其他命令; \r命令的自动补全; \r命令的执行; \r环境变量; \r创建链接;","date":"2019-11-18T00:00:00.000Z","localizedDate":"2019年11月18日","category":["Linux"]},["/linux/command/index.html","/linux/command/README.md"]],
  ["v-02d56f66","/linux/command/temp.html",{"title":"其他指令","type":"article","readingTime":{"minutes":3.69,"words":1107},"excerpt":"其他指令 文件 创建文件\rtouch; \rvi; 编辑文件\rvi; \r使用 vi 命令后，默认进入浏览模式。 按 i 进入 insert 模式， 按 ESC 退出。 1. 命令模式下，输入: / 字符串 比如搜索 user, 输入 /user 按下回车之后，可以看到 vim 已经把光标移动到该字符处和高亮了匹配的字符串 1. 查看下一个匹配，按下 n(小写 ","date":"2019-11-18T00:00:00.000Z","localizedDate":"2019年11月18日","category":["Linux"]},["/linux/command/temp","/linux/command/temp.md"]],
  ["v-7c524e2b","/linux/file/dir.html",{"title":"目录","icon":"tree","type":"article","readingTime":{"minutes":8.67,"words":2600},"excerpt":"Linux 文件目录结构 学习 Linux，不仅限于学习各种命令，了解整个 Linux 文件系统的目录结构以及各个目录的功能同样至关重要。 使用 Linux 时，通过命令行输入 ls -l / 可以看到，在 Linux 根目录 (/) 下包含很多的子目录(称为一级目录)，例如 bin、boot、dev 等。同时，各一级目录下还含有很多子目录(称为二级目录)，","date":"2019-11-17T00:00:00.000Z","localizedDate":"2019年11月17日","category":["Linux"]},["/linux/file/dir","/linux/file/dir.md"]],
  ["v-53becefe","/linux/file/file.html",{"title":"文件","icon":"file","type":"article","readingTime":{"minutes":5.2,"words":1560},"excerpt":"文件系统 目录就相当于 Windows 中的文件夹，目录中存放的既可以是文件，也可以是其他的子目录，而文件中存储的是真正的信息。 文件系统的最顶层是由根目录开始的，系统使用“/”来表示根目录，在根目录之下的既可以是目录，也可以是文件，而每一个目录中又可以包含(子)目录或文件。如此反复就可以构成一个庞大的文件系统。 其实，使用这种树状、具有层次的文件结构主要目","date":"2019-11-17T00:00:00.000Z","localizedDate":"2019年11月17日","category":["Linux"]},["/linux/file/file","/linux/file/file.md"]],
  ["v-42f6fa5f","/linux/file/mount.html",{"title":"Linux 挂载","icon":"mount","type":"article","readingTime":{"minutes":2.13,"words":639},"excerpt":"Linux 挂载 前面讲过，Linux 系统中“一切皆文件”，所有文件都放置在以根目录为树根的树形目录结构中。在 Linux 看来，任何硬件设备也都是文件，它们各有自己的一套文件系统(文件目录结构)。 因此产生的问题是，当在 Linux 系统中使用这些硬件设备时，只有将 Linux 本身的文件目录与硬件设备的文件目录合二为一，硬件设备才能为我们所用。合二为一","date":"2019-11-17T00:00:00.000Z","localizedDate":"2019年11月17日","category":["Linux"]},["/linux/file/mount","/linux/file/mount.md"]],
  ["v-f2e41e82","/linux/file/",{"title":"文件","icon":"file","type":"article","readingTime":{"minutes":0.08,"words":24},"excerpt":"目录\rLinux 文件; \rLinux 目录; \r挂载;","date":"2019-11-17T00:00:00.000Z","localizedDate":"2019年11月17日","category":["Linux"]},["/linux/file/index.html","/linux/file/README.md"]],
  ["v-072ab185","/linux/intro/advantage.html",{"title":"Linux 的优点","icon":"compare","type":"article","readingTime":{"minutes":2.33,"words":698},"excerpt":"Linux 的优点 相比 Windows 系统，Linux 系统有更好的稳定性。此外，Linux 还有如下优点: 1. 大量的可用软件及免费软件 Linux 系统上有着大量的可用软件，且绝大多数是免费的，比如声名赫赫的 Apache、Samba、PHP、MySQL 等，构建成本低廉，是 Linux 被众多企业青睐的原因之一。当然，这和 Linux 出色的性能","date":"2019-11-16T00:00:00.000Z","localizedDate":"2019年11月16日","category":["Linux"]},["/linux/intro/advantage","/linux/intro/advantage.md"]],
  ["v-9f906c18","/linux/intro/desktop.html",{"title":"桌面系统","icon":"computer","type":"article","readingTime":{"minutes":6.55,"words":1965},"excerpt":"桌面系统 KDE 桌面系统 KDE 是 K Desktop Environment 的缩写，中文译为“K 桌面环境”。 KDE 是基于大名鼎鼎的 Qt 的，最初于 1996 年作为开源项目公布，并在 1998 年发布了第一个版本，现在 KDE 几乎是排名第一的桌面环境了。 许多流行的 Linux 发行版都提供了 KDE 桌面环境，比如 Ubuntu、Linu","date":"2019-11-16T00:00:00.000Z","localizedDate":"2019年11月16日","category":["Linux"]},["/linux/intro/desktop","/linux/intro/desktop.md"]],
  ["v-00bcff08","/linux/intro/history.html",{"title":"Linux 和 UNIX","icon":"time","type":"article","readingTime":{"minutes":12.51,"words":3752},"excerpt":"Linux 和 UNIX UNIX 与 Linux 之间的关系是一个很有意思的话题。在目前主流的服务器端操作系统中，UNIX 诞生于 20 世纪 60 年代末，Windows 诞生于 20 世纪 80 年代中期，Linux 诞生于 20 世纪 90 年代初，可以说 UNIX 是操作系统中的\"老大哥\"，后来的 Windows 和 Linux 都参考了 UNIX","date":"2019-11-15T00:00:00.000Z","localizedDate":"2019年11月15日","category":["Linux"],"tag":["介绍"]},["/linux/intro/history","/linux/intro/history.md"]],
  ["v-3419e764","/linux/intro/intro.html",{"title":"Linux 简介","icon":"info","type":"article","readingTime":{"minutes":6.49,"words":1947},"excerpt":"Linux 简介 Linux 内核最初只是由芬兰人林纳斯·托瓦兹 (Linus Torvalds) 在赫尔辛基大学上学时出于个人爱好而编写的。 Linux 是一套免费使用和自由传播的类 Unix 操作系统，是一个基于 POSIX 和 UNIX 的多用户、多任务、支持多线程和多 CPU 的操作系统。 Linux 能运行主要的 UNIX 工具软件、应用程序和网络","date":"2019-11-15T00:00:00.000Z","localizedDate":"2019年11月15日","category":["Linux"],"tag":["介绍"]},["/linux/intro/intro","/linux/intro/intro.md"]],
  ["v-56f593aa","/linux/intro/language.html",{"title":"语言","icon":"language","type":"article","readingTime":{"minutes":7.31,"words":2194},"excerpt":"<p>Linux 中大量使用脚本语言，而不是 C 语言!</p>\n","date":"2019-11-16T00:00:00.000Z","localizedDate":"2019年11月16日","category":["Linux"]},["/linux/intro/language","/linux/intro/language.md"]],
  ["v-50990237","/linux/intro/",{"title":"Linux","icon":"info","type":"article","readingTime":{"minutes":0.12,"words":37},"excerpt":"Linux 简介\rLinux 介绍; \rLinux 历史; \rLinux 编写语言; \rLinux 优势; \rLinux 桌面环境;","date":"2019-11-15T00:00:00.000Z","localizedDate":"2019年11月15日","category":["Linux"]},["/linux/intro/index.html","/linux/intro/README.md"]],
  ["v-09bd279a","/linux/intro/startup.html",{"title":"系统启动过程","type":"article","readingTime":{"minutes":3.53,"words":1058},"excerpt":"Linux 系统启动过程\r本篇教程以 CentOS 为例介绍系统的启动过程。 Linux 启动时我们会看到许多启动信息。 Linux 系统的启动过程并不是大家想象中的那么复杂，其过程可以分为 5 个阶段:\r内核的引导。; \r运行 init。; \r系统初始化。; \r建立终端 。; \r用户登录系统。; \rinit 程序的类型:\rSysV: init, CentO","date":"2019-11-15T00:00:00.000Z","localizedDate":"2019年11月15日","category":["Linux"]},["/linux/intro/startup","/linux/intro/startup.md"]],
  ["v-40785b1a","/linux/ubuntu/debug.html",{"title":"开发软件","icon":"debug","type":"article","readingTime":{"minutes":0.91,"words":273},"excerpt":"开发软件 安装 VS Code\r使用 snap; \r在 WSL 环境下 snap 无法使用，则使用以下命令安装 code 库。; 然后正常安装: 可能还需要安装 remote 插件安装 nvm 在 Linux 上可能需要重新链接终端，命令才可用。 测试命令，输入 nvm 即安装成功: 安装命令: 切换命令: 安装 Git yarn 测试是否安装成功:","date":"2019-11-21T00:00:00.000Z","localizedDate":"2019年11月21日","category":["Linux"]},["/linux/ubuntu/debug","/linux/ubuntu/debug.md"]],
  ["v-7d579877","/linux/ubuntu/lang.html",{"title":"语言切换","icon":"language","type":"article","readingTime":{"minutes":0.18,"words":55},"excerpt":"语言切换 查看当前语言包: locale -a 中文语言是: zh_CN.utf8 安装中文语言包 之后修改 /etc/default/locale，将 LANG 改为 zh_CN.utf8","date":"2019-11-22T00:00:00.000Z","localizedDate":"2019年11月22日","category":["Linux"]},["/linux/ubuntu/lang","/linux/ubuntu/lang.md"]],
  ["v-69b91c60","/linux/ubuntu/manage.html",{"title":"管理工具","icon":"tool","type":"article","readingTime":{"minutes":1.15,"words":344},"excerpt":"管理工具 apt-get apt-get 命令默认的源在国内访问很慢，可以考虑换源。\r获取软件包更新:; \r更新软件包:; \r其他命令[^order]; [^order]: 其他命令 Snap 已经预装。 在中国大陆不建议使用 Snap","date":"2019-11-21T00:00:00.000Z","localizedDate":"2019年11月21日","category":["Linux"]},["/linux/ubuntu/manage","/linux/ubuntu/manage.md"]],
  ["v-28e445b4","/linux/ubuntu/",{"title":"ubuntu","icon":"ubuntu","type":"article","readingTime":{"minutes":0.1,"words":31},"excerpt":"ubuntu\r管理包; \r开发软件; \r网络服务器相关; \r语言切换;","date":"2019-11-21T00:00:00.000Z","localizedDate":"2019年11月21日","category":["Linux"]},["/linux/ubuntu/index.html","/linux/ubuntu/README.md"]],
  ["v-14aa1354","/linux/ubuntu/webserver.html",{"title":"网络服务器相关","icon":"network","type":"article","readingTime":{"minutes":1.21,"words":363},"excerpt":"网络服务器相关 ftp vsftpd\r安装; \r配置; 至少要更改: Nginx\r安装; Nginx 默认安装在 /etc/nginx 目录下\r配置; 配置文件为 nginx.conf。 默认站点配置文件在 /etc/nginx/sites-available/default 为了使得 Nginx 能使用 PHP，需要配置 PHP MySQL 安装 配置版本","date":"2019-11-23T00:00:00.000Z","localizedDate":"2019年11月23日"},["/linux/ubuntu/webserver","/linux/ubuntu/webserver.md"]],
  ["v-35ce46c6","/note/debug/debug.html",{"title":"","icon":"nodeJS","type":"article","readingTime":{"minutes":0.03,"words":8},"excerpt":"","date":"2019-09-10T00:00:00.000Z","localizedDate":"2019年9月10日","tag":["debug"]},["/note/debug/debug","/note/debug/debug.md"]],
  ["v-ab5ecf40","/note/debug/",{"title":"Debug","icon":"nodeJS","type":"article","readingTime":{"minutes":0.05,"words":16},"excerpt":"目录\rdebug 相关;","date":"2021-11-18T00:00:00.000Z","localizedDate":"2021年11月18日","tag":["Node.js"]},["/note/debug/index.html","/note/debug/README.md"]],
  ["v-0b2fe817","/note/life/1.html",{"title":"碎碎叨叨【一】","icon":"form","type":"article","readingTime":{"minutes":0.41,"words":124},"excerpt":"碎碎叨叨【一】\r精打细算你失去了多少， 求而不得你烦恼了多少， 斤斤计较你结怨了多少， 贪心不灭你造恶了多少， 日复一日你能放下多少， 千方百计你能得到多少， 人生在世你能享受多少， 临命终时你能带走多少? 唯大肚能容， 容天下难容之事， 只开口一笑， 笑世上可笑之人。","date":"2019-08-18T00:00:00.000Z","localizedDate":"2019年8月18日","category":["随笔"],"tag":["碎碎叨叨"]},["/note/life/1","/note/life/1.md"]],
  ["v-5885b80f","/note/life/",{"title":"碎碎叨叨","icon":"form","type":"article","readingTime":{"minutes":0.1,"words":30},"excerpt":"介绍 自己的一些碎碎叨","date":"2020-02-14T00:00:00.000Z","localizedDate":"2020年2月14日","category":["随笔"],"tag":["碎碎叨叨"]},["/note/life/index.html","/note/life/README.md"]],
  ["v-5dad642c","/code/github/actions/cache.html",{"title":"cache","type":"article","readingTime":{"minutes":1.81,"words":543},"excerpt":"<p>这个 Action 允许您缓存依赖项和构建输出内容以缩短 Workflow 执行时间。</p>\n<p>日常最多使用的就是缓存依赖项，在每个工作流程中，将安装后的依赖通过安装后生成的依赖版本文件的哈希值进行缓存。</p>\n<p>当前工作流程的版本文件哈希值与历史缓存中的某一项完全相同时，直接载入这些依赖项缓存，这样就可以免去安装步骤。</p>\n<div class=\"custom-container info\"><p class=\"custom-container-title\">缓存依赖</p>\n<p>关于缓存依赖的文档，详见 <a href=\"https://docs.github.com/cn/actions/guides/caching-dependencies-to-speed-up-workflows\" target=\"_blank\" rel=\"noopener noreferrer\">缓存依赖项以加快工作流程<ExternalLinkIcon/></a>。</p>\n</div>\n","date":"2021-02-20T00:00:00.000Z","localizedDate":"2021年2月20日","category":["GitHub"],"tag":["action","workflow"]},["/code/github/actions/cache","/code/github/actions/cache.md"]],
  ["v-74f1f99e","/code/github/actions/checkout.html",{"title":"checkout","type":"article","readingTime":{"minutes":3.03,"words":910},"excerpt":"<p>该操作将检出您的存储库 <code v-pre>$GITHUB_WORKSPACE</code>，使您的工作流可以访问它。</p>\n","date":"2021-02-18T00:00:00.000Z","localizedDate":"2021年2月18日","category":["GitHub"],"tag":["action","workflow"]},["/code/github/actions/checkout","/code/github/actions/checkout.md"]],
  ["v-74d837e2","/code/github/actions/config.html",{"title":"Action 配置","icon":"config","type":"article","readingTime":{"minutes":2.4,"words":721},"excerpt":"<p>GitHub Actions 的配置文件叫做 <code v-pre>workflow</code> 文件，存放在代码仓库的 <code v-pre>.github/workflows</code> 目录。</p>\n<p><code v-pre>workflow</code> 文件采用 <code v-pre>YAML</code> 格式，文件名可以任意取，但是后缀名统一为 <code v-pre>.yml</code>，比如<code v-pre>foo.yml</code>。</p>\n<p>一个库可以有多个 <code v-pre>workflow</code> 文件。GitHub 只要发现 <code v-pre>.github/workflows</code> 目录里面有 <code v-pre>.yml</code> 文件，就会自动运行该文件。</p>\n","date":"2021-02-18T00:00:00.000Z","localizedDate":"2021年2月18日","category":["GitHub"],"tag":["action","workflow"]},["/code/github/actions/config","/code/github/actions/config.md"]],
  ["v-4a20b532","/code/github/actions/gh-pages-deploy.html",{"title":"github-pages-deploy","type":"article","readingTime":{"minutes":2.43,"words":729},"excerpt":"<p>github-pages-deploy-action 用于自动将网站内容部署到 GitHub Pages。</p>\n<p>您可以使用这个 Action 将代码推送到您想要的任何分支中，包括 gh-pages 和 docs, 甚至可以处理跨存储库部署。</p>\n","date":"2021-02-20T00:00:00.000Z","localizedDate":"2021年2月20日","category":["GitHub"],"tag":["action","deploy","workflow"]},["/code/github/actions/gh-pages-deploy","/code/github/actions/gh-pages-deploy.md"]],
  ["v-b23b20fc","/code/github/actions/intro.html",{"title":"Actions 介绍","icon":"info","type":"article","readingTime":{"minutes":3.55,"words":1065},"excerpt":"<p>在 GitHub Actions 的仓库中自动化、自定义和执行软件开发工作流程。</p>\n<p>您可以发现、创建和共享操作以执行您喜欢的任何作业 (包括 CI/CD) ，并将操作合并到完全自定义的工作流程中。</p>\n","date":"2021-02-18T00:00:00.000Z","localizedDate":"2021年2月18日","category":["GitHub"],"tag":["action","介绍"]},["/code/github/actions/intro","/code/github/actions/intro.md"]],
  ["v-f6ed1056","/code/github/actions/",{"title":"GitHub Actions","icon":"actions","type":"article","readingTime":{"minutes":0.26,"words":79},"excerpt":"目录\rGitHub Actions 介绍; \rWorkflow 配置; 常用 GitHub Action\rcheckout; \rcache; \rGitHub Pages 部署; 官方文档\r文档地址; \rWorkflow 触发事件; \rWorkflow 配置;","date":"2021-02-18T00:00:00.000Z","localizedDate":"2021年2月18日","category":["GitHub"],"tag":["action","workflow"]},["/code/github/actions/index.html","/code/github/actions/README.md"]],
  ["v-e5b356ca","/code/java/database/basic.html",{"title":"数据库基础知识总结","type":"article","readingTime":{"minutes":12.29,"words":3688},"excerpt":"数据库知识基础，这部分内容一定要理解记忆。虽然这部分内容只是理论知识，但是非常重要，这是后面学习 MySQL 数据库的基础。PS: 这部分内容由于涉及太多概念性内容，所以参考了维基百科和百度百科相应的介绍。 什么是数据库, 数据库管理系统, 数据库系统, 数据库管理员?\r数据库 : 数据库(DataBase 简称 DB)就是信息的集合或者说数据库是由数据库管","date":"2020-11-24T00:00:00.000Z","localizedDate":"2020年11月24日","category":["数据库"],"tag":["数据库基础"]},["/code/java/database/basic","/code/java/database/basic.md"]],
  ["v-613f830b","/code/java/database/character-set.html",{"title":"字符集","type":"article","readingTime":{"minutes":6.55,"words":1966},"excerpt":"MySQL 字符编码集中有两套 UTF-8 编码实现：utf8 和 utf8mb4。 如果使用 utf8 的话，存储emoji 符号和一些比较复杂的汉字、繁体字就会出错。 为什么会这样呢？这篇文章可以从源头给你解答。 何为字符集？ 字符是各种文字和符号的统称，包括各个国家文字、标点符号、表情、数字等等。 字符集 就是一系列字符的集合。字符集的种类较多，每个字","date":"2020-11-24T00:00:00.000Z","localizedDate":"2020年11月24日","category":["数据库"],"tag":["数据库基础"]},["/code/java/database/character-set","/code/java/database/character-set.md"]],
  ["v-033eb28c","/code/java/distributed-system/api-gateway.html",{"title":"网关","type":"article","readingTime":{"minutes":4.16,"words":1248},"excerpt":"何为网关？为什么要网关？ 微服务背景下，一个系统被拆分为多个服务，但是像安全认证，流量控制，日志，监控等功能是每个服务都需要的，没有网关的话，我们就需要在每个服务中单独实现，这使得我们做了很多重复的事情并且没有一个全局的视图来统一管理这些功能。 综上：一般情况下，网关都会提供请求转发、安全认证（身份/权限认证）、流量控制、负载均衡、容灾、日志、监控这些功能。","date":"2021-02-20T00:00:00.000Z","localizedDate":"2021年2月20日","category":["分布式"]},["/code/java/distributed-system/api-gateway","/code/java/distributed-system/api-gateway.md"]],
  ["v-28dd4d62","/code/java/distributed-system/distributed-id.html",{"title":"分布式 ID","type":"article","readingTime":{"minutes":15.12,"words":4537},"excerpt":"分布式 ID 介绍 何为 ID？ 日常开发中，我们需要对系统中的各种数据使用 ID 唯一表示，比如用户 ID 对应且仅对应一个人，商品 ID 对应且仅对应一件商品，订单 ID 对应且仅对应一个订单。 我们现实生活中也有各种 ID，比如身份证 ID 对应且仅对应一个人、地址 ID 对应且仅对应 简单来说，ID 就是数据的唯一标识。 何为分布式 ID？ 分布式 ","date":"2021-02-20T00:00:00.000Z","localizedDate":"2021年2月20日","category":["分布式"]},["/code/java/distributed-system/distributed-id","/code/java/distributed-system/distributed-id.md"]],
  ["v-2c0d0477","/code/java/distributed-system/distributed-transaction.html",{"title":"分布式事务","type":"article","readingTime":{"minutes":0.08,"words":25},"excerpt":"分布式事务 相关的面试题","date":"2021-02-20T00:00:00.000Z","localizedDate":"2021年2月20日","category":["分布式"]},["/code/java/distributed-system/distributed-transaction","/code/java/distributed-system/distributed-transaction.md"]],
  ["v-5f11874c","/code/java/high-availability/cluster.html",{"title":"集群","type":"article","readingTime":{"minutes":0.09,"words":26},"excerpt":"相同的服务部署多份，避免单点故障。","date":"2021-03-20T00:00:00.000Z","localizedDate":"2021年3月20日","category":["高可用"]},["/code/java/high-availability/cluster","/code/java/high-availability/cluster.md"]],
  ["v-0d94f458","/code/java/high-availability/disaster-recovery&remote-live.html",{"title":"灾备设计&异地多活","type":"article","readingTime":{"minutes":0.86,"words":258},"excerpt":"灾备设计&异地多活 灾备 = 容灾+备份。\r备份 ： 将系统所产生的的所有重要数据多备份几份。; \r容灾 ： 在异地建立两个完全相同的系统。当某个地方的系统突然挂掉，整个应用系统可以切换到另一个，这样系统就可以正常提供服务了。; 异地多活 描述的是将服务部署在异地并且服务同时对外提供服务。和传统的灾备设计的最主要区别在于“多活”，即所有站点都是同时在对外提供","date":"2021-03-20T00:00:00.000Z","localizedDate":"2021年3月20日","category":["高可用"]},["/code/java/high-availability/disaster-recovery&remote-live","/code/java/high-availability/disaster-recovery&remote-live.md"]],
  ["v-65b9d8c8","/code/java/high-availability/fallback&circuit-breaker.html",{"title":"降级&熔断","type":"article","readingTime":{"minutes":0.08,"words":23},"excerpt":"降级&熔断 相关的面试题","date":"2021-03-20T00:00:00.000Z","localizedDate":"2021年3月20日","category":["高可用"]},["/code/java/high-availability/fallback&circuit-breaker","/code/java/high-availability/fallback&circuit-breaker.md"]],
  ["v-026e8df1","/code/java/high-availability/high-availability-system-design.html",{"title":"高可用系统设计指南","type":"article","readingTime":{"minutes":6.13,"words":1838},"excerpt":"一篇短小的文章，面试经常遇到的这个问题。本文主要包括下面这些内容： 1. 高可用的定义 2. 哪些情况可能会导致系统不可用？ 3. 有哪些提高系统可用性的方法？只是简单的提一嘴，更具体内容在后续的文章中介绍，就拿限流来说，你需要搞懂：何为限流？如何限流？为什么要限流？如何做呢？说一下原理？。 什么是高可用？可用性的判断标准是啥？ 高可用描述的是一个系统在大部","date":"2021-03-20T00:00:00.000Z","localizedDate":"2021年3月20日","category":["高可用"]},["/code/java/high-availability/high-availability-system-design","/code/java/high-availability/high-availability-system-design.md"]],
  ["v-e9a7b22e","/code/java/high-availability/limit-request.html",{"title":"限流","type":"article","readingTime":{"minutes":7.51,"words":2253},"excerpt":"何为限流？为什么要限流？ 针对软件系统来说，限流就是对请求的速率进行限制，避免瞬时的大量请求击垮软件系统。毕竟，软件系统的处理能力是有限的。如果说超过了其处理能力的范围，软件系统可能直接就挂掉了。 限流可能会导致用户的请求无法被正确处理，不过，这往往也是权衡了软件系统的稳定性之后得到的最优解。 现实生活中，处处都有限流的实际应用，就比如排队买票是为了避免大量","date":"2021-03-20T00:00:00.000Z","localizedDate":"2021年3月20日","category":["高可用"]},["/code/java/high-availability/limit-request","/code/java/high-availability/limit-request.md"]],
  ["v-536fb49d","/code/java/high-availability/performance-test.html",{"title":"性能测试入门","type":"article","readingTime":{"minutes":8.27,"words":2481},"excerpt":"性能测试入门 性能测试一般情况下都是由测试这个职位去做的，那还需要我们开发学这个干嘛呢？了解性能测试的指标、分类以及工具等知识有助于我们更好地去写出性能更好的程序，另外作为开发这个角色，如果你会性能测试的话，相信也会为你的履历加分不少。 这篇文章是我会结合自己的实际经历以及在测试这里取的经所得，除此之外，我还借鉴了一些优秀书籍，希望对你有帮助。 本文思维导图","date":"2021-03-18T00:00:00.000Z","localizedDate":"2021年3月18日","category":["高可用"]},["/code/java/high-availability/performance-test","/code/java/high-availability/performance-test.md"]],
  ["v-418a26c0","/code/java/high-availability/timeout-and-retry.html",{"title":"超时&重试机制","type":"article","readingTime":{"minutes":0.45,"words":136},"excerpt":"一旦用户的请求超过某个时间得不到响应就结束此次请求并抛出异常。 如果不进行超时设置可能会导致请求响应速度慢，甚至导致请求堆积进而让系统无法在处理请求。 另外，重试的次数一般设为 3 次，再多次的重试没有好处，反而会加重服务器压力（部分场景使用失败重试机制会不太适合）。","date":"2021-03-18T00:00:00.000Z","localizedDate":"2021年3月18日","category":["高可用"]},["/code/java/high-availability/timeout-and-retry","/code/java/high-availability/timeout-and-retry.md"]],
  ["v-0d03cc81","/code/java/high-performance/load-balancing.html",{"title":"负载均衡","type":"article","readingTime":{"minutes":0.61,"words":184},"excerpt":"负载均衡 负载均衡系统通常用于将任务比如用户请求处理分配到多个服务器处理以提高网站、应用或者数据库的性能和可靠性。 常见的负载均衡系统包括 3 种： 1. DNS 负载均衡 ：一般用来实现地理级别的均衡。 2. 硬件负载均衡 ： 通过单独的硬件设备比如 F5 来实现负载均衡功能（硬件的价格一般很贵）。 3. 软件负载均衡 ：通过负载均衡软件比如 Nginx ","date":"2021-04-22T00:00:00.000Z","localizedDate":"2021年4月22日","category":["架构"]},["/code/java/high-performance/load-balancing","/code/java/high-performance/load-balancing.md"]],
  ["v-1a823411","/code/java/high-performance/read-and-write-separation-and-library-subtable.html",{"title":"读写分离&分库分表","type":"article","readingTime":{"minutes":11.44,"words":3433},"excerpt":"读写分离&分库分表 大家好呀！今天和小伙伴们聊聊读写分离以及分库分表。 相信很多小伙伴们对于这两个概念已经比较熟悉了，这篇文章全程都是大白话的形式，希望能够给你带来不一样的感受。 如果你之前不太了解这两个概念，那我建议你搞懂之后，可以把自己对于读写分离以及分库分表的理解讲给你的同事/朋友听听。 原创不易，若有帮助，点赞/分享就是对我最大的鼓励！ 个人能力有限","date":"2021-04-22T00:00:00.000Z","localizedDate":"2021年4月22日","category":["高可用"]},["/code/java/high-performance/read-and-write-separation-and-library-subtable","/code/java/high-performance/read-and-write-separation-and-library-subtable.md"]],
  ["v-2202eb0d","/code/java/high-quality-technical-articles/",{"title":"Java 技术文章精选集","type":"article","readingTime":{"minutes":0.21,"words":62},"excerpt":"Java 技术文章精选集 在这里我会精选一些和 Java 相关的优质技术文章，每一篇都值得你阅读 3 遍以上！","date":"2021-04-29T00:00:00.000Z","localizedDate":"2021年4月29日","category":["技术文章精选集"]},["/code/java/high-quality-technical-articles/index.html","/code/java/high-quality-technical-articles/readme.md"]],
  ["v-68a128a1","/code/java/system-design/design-pattern.html",{"title":"","type":"article","readingTime":{"minutes":0,"words":0},"excerpt":""},["/code/java/system-design/design-pattern","/code/java/system-design/design-pattern.md"]],
  ["v-35091a0f","/code/java/system-design/J2EE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.html",{"title":"J2EE 基础知识","type":"article","readingTime":{"minutes":18.61,"words":5584},"excerpt":"点击关注公众号及时获取笔主最新更新文章，并可免费领取本文档配套的《Java面试突击》以及Java工程师必备学习资源。\rServlet总结; \r阐述Servlet和CGI的区别?; \rCGI的不足之处:; \rServlet的优点：; \rServlet接口中有哪些方法及Servlet生命周期探秘; \rget和post请求的区别; \r什么情况下调用doGet\\(\\","date":"2021-05-21T00:00:00.000Z","localizedDate":"2021年5月21日"},["/code/java/system-design/J2EE基础知识.html","/code/java/system-design/J2EE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86","/code/java/system-design/J2EE基础知识.md","/code/java/system-design/J2EE%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.md"]],
  ["v-31a56016","/code/java/system-design/schedule-task.html",{"title":"Java 定时任务详解","type":"article","readingTime":{"minutes":13.18,"words":3953},"excerpt":"Java 定时任务详解 为什么需要定时任务？ 我们来看一下几个非常常见的业务场景： 1. 某系统凌晨要进行数据备份。 2. 某电商平台，用户下单半个小时未支付的情况下需要自动取消订单。 3. 某媒体聚合平台，每 10 分钟动态抓取某某网站的数据为自己所用。 4. 某博客平台，支持定时发送文章。 5. 某基金平台，每晚定时计算用户当日收益情况并推送给用户最新的","date":"2021-05-21T00:00:00.000Z","localizedDate":"2021年5月21日","category":["MQ"]},["/code/java/system-design/schedule-task","/code/java/system-design/schedule-task.md"]],
  ["v-2f1c7ef4","/code/java/system-design/system-design-questions.html",{"title":"系统设计常见面试总结","type":"article","readingTime":{"minutes":0.11,"words":33},"excerpt":"系统设计常见面试总结 相关的面试题","date":"2021-05-22T00:00:00.000Z","localizedDate":"2021年5月22日","category":["interview"]},["/code/java/system-design/system-design-questions","/code/java/system-design/system-design-questions.md"]],
  ["v-eab063d0","/code/java/tools/",{"title":"常用开发工具总结","icon":"tool","type":"article","readingTime":{"minutes":0.49,"words":146},"excerpt":"常用开发工具总结 数据库\rCHINER: 干掉 PowerDesigner，这个国产数据库建模工具很强！; \rDBeaver:开源数据库管理工具。; \rscrew:一键生成数据库文档，堪称数据库界的Swagger; \rDataGrip:IDEA官方的这个数据库管理神器真香！; Git\rGit 入门; \rGithub 小技巧; Docker\rDocker 基本","date":"2021-05-30T00:00:00.000Z","localizedDate":"2021年5月30日","category":["开发工具"]},["/code/java/tools/index.html","/code/java/tools/readme.md"]],
  ["v-af52c4f2","/code/java/common/basic/bigdecimal.html",{"title":"BigDecimal 详解","type":"article","readingTime":{"minutes":6.85,"words":2055},"excerpt":"《阿里巴巴 Java 开发手册》中提到：“为了避免精度丢失，可以使用 BigDecimal 来进行浮点数的运算”。 这篇文章，我就简单解释一下浮点数运算出现精度丢失的原因以及 BigDecimal 的常见用法，希望对大家有帮助！ BigDecimal 介绍 BigDecimal 可以实现对浮点数的运算，不会造成精度丢失。通常情况下，大部分需要浮点数精确运算结","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java基础"]},["/code/java/common/basic/bigdecimal","/code/java/common/basic/bigdecimal.md"]],
  ["v-00298b26","/code/java/common/basic/generics-and-wildcards.html",{"title":"泛型&序列化详解","type":"article","readingTime":{"minutes":0.1,"words":29},"excerpt":"泛型&通配符 相关的面试题","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java基础"]},["/code/java/common/basic/generics-and-wildcards","/code/java/common/basic/generics-and-wildcards.md"]],
  ["v-19395a5c","/code/java/common/basic/io.html",{"title":"IO 模型详解","type":"article","readingTime":{"minutes":6.55,"words":1965},"excerpt":"IO 模型这块确实挺难理解的，需要太多计算机底层知识。写这篇文章用了挺久，就非常希望能把我所知道的讲出来吧!希望朋友们能有收获！为了写这篇文章，还翻看了一下《UNIX 网络编程》这本书，太难了，我滴乖乖！心痛~ 个人能力有限。如果文章有任何需要补充/完善/修改的地方，欢迎在评论区指出，共同进步！ 前言 I/O 一直是很多小伙伴难以理解的一个知识点，这篇文章我","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java基础"]},["/code/java/common/basic/io","/code/java/common/basic/io.md"]],
  ["v-60174a6f","/code/java/common/basic/java-basic-questions-01.html",{"title":"Java基础常见知识&面试题总结(上)","type":"article","readingTime":{"minutes":29.04,"words":8713},"excerpt":"基础概念与常识 Java 语言有哪些特点? 1. 简单易学； 2. 面向对象（封装，继承，多态）； 3. 平台无关性（ Java 虚拟机实现平台无关性）； 4. 支持多线程（ C++ 语言没有内置的多线程机制，因此必须调用操作系统的多线程功能来进行多线程程序设计，而 Java 语言却提供了多线程支持）； 5. 可靠性； 6. 安全性； 7. 支持网络编程并且","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java基础"]},["/code/java/common/basic/java-basic-questions-01","/code/java/common/basic/java-basic-questions-01.md"]],
  ["v-61cc230e","/code/java/common/basic/java-basic-questions-02.html",{"title":"Java基础常见知识&面试题总结(中)","type":"article","readingTime":{"minutes":26.17,"words":7850},"excerpt":"面向对象基础 面向对象和面向过程的区别 两者的主要区别在于解决问题的方式不同：\r面向过程把解决问题的过程拆成一个个方法，通过一个个方法的执行解决问题。; \r面向对象会先抽象出对象，然后用对象执行方法的方式解决问题。; 另外，面向对象开发的程序一般更易维护、易复用、易扩展。 相关 issue : 面向过程 ：面向过程性能比面向对象高？？ 成员变量与局部变量的区","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java基础"]},["/code/java/common/basic/java-basic-questions-02","/code/java/common/basic/java-basic-questions-02.md"]],
  ["v-6380fbad","/code/java/common/basic/java-basic-questions-03.html",{"title":"Java基础知识&面试题总结(下)","type":"article","readingTime":{"minutes":14.58,"words":4374},"excerpt":"异常 Java 异常类层次结构图概览 ： Exception 和 Error 有什么区别？ 在 Java 中，所有的异常都有一个共同的祖先 java.lang 包中的 Throwable 类。Throwable 类有两个重要的子类:\rException :程序本身可以处理的异常，可以通过 catch 来进行捕获。Exception 又可以分为 Checked","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java基础"]},["/code/java/common/basic/java-basic-questions-03","/code/java/common/basic/java-basic-questions-03.md"]],
  ["v-0c14fec1","/code/java/common/basic/java-keyword-summary.html",{"title":"final,static,this,super 关键字总结","type":"article","readingTime":{"minutes":11.4,"words":3420},"excerpt":"final,static,this,super 关键字总结 final 关键字 final 关键字，意思是最终的、不可修改的，最见不得变化 ，用来修饰类、方法和变量，具有以下特点： 1. final 修饰的类不能被继承，final 类中的所有成员方法都会被隐式的指定为 final 方法； 2. final 修饰的方法不能被重写； 3. final 修饰的变量","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java基础"]},["/code/java/common/basic/java-keyword-summary","/code/java/common/basic/java-keyword-summary.md"]],
  ["v-71d2c36c","/code/java/common/basic/proxy.html",{"title":"Java 代理模式详解","type":"article","readingTime":{"minutes":10.37,"words":3111},"excerpt":"1. 代理模式 代理模式是一种比较好理解的设计模式。简单来说就是 我们使用代理对象来代替对真实对象(real object)的访问，这样就可以在不修改原目标对象的前提下，提供额外的功能操作，扩展目标对象的功能。 代理模式的主要作用是扩展目标对象的功能，比如说在目标对象的某个方法执行前后你可以增加一些自定义的操作。 举个例子：新娘找来了自己的姨妈来代替自己处理","date":"2021-11-18T00:00:00.000Z","localizedDate":"2021年11月18日","category":["Java"],"tag":["Java基础"]},["/code/java/common/basic/proxy","/code/java/common/basic/proxy.md"]],
  ["v-95e58026","/code/java/common/basic/reflection.html",{"title":"反射机制详解","type":"article","readingTime":{"minutes":3.95,"words":1184},"excerpt":"何为反射？ 如果说大家研究过框架的底层原理或者咱们自己写过框架的话，一定对反射这个概念不陌生。 反射之所以被称为框架的灵魂，主要是因为它赋予了我们在运行时分析类以及执行类中方法的能力。 通过反射你可以获取任意一个类的所有属性和方法，你还可以调用这些方法和属性。 反射的应用场景了解么？ 像咱们平时大部分时候都是在写业务代码，很少会接触到直接使用反射机制的场景。","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java基础"]},["/code/java/common/basic/reflection","/code/java/common/basic/reflection.md"]],
  ["v-577c722a","/code/java/common/basic/serialization.html",{"title":"Java 序列化详解","type":"article","readingTime":{"minutes":7.46,"words":2238},"excerpt":"序列化和反序列化相关概念 什么是序列化?什么是反序列化? 如果我们需要持久化 Java 对象比如将 Java 对象保存在文件中，或者在网络传输 Java 对象，这些场景都需要用到序列化。 简单来说：\r序列化： 将数据结构或对象转换成二进制字节流的过程; \r反序列化：将在序列化过程中所生成的二进制字节流的过程转换成数据结构或者对象的过程; 对于 Java 这种","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java基础"]},["/code/java/common/basic/serialization","/code/java/common/basic/serialization.md"]],
  ["v-6098caf9","/code/java/common/basic/why-there-only-value-passing-in-java.html",{"title":"为什么 Java 中只有值传递？","type":"article","readingTime":{"minutes":3.63,"words":1089},"excerpt":"开始之前，我们先来搞懂下面这两个概念：\r形参&实参; \r值传递&引用传递; 形参&实参 方法的定义可能会用到 参数（有参的方法），参数在程序语言中分为：\r实参（实际参数） ：用于传递给函数/方法的参数，必须有确定的值。; \r形参（形式参数） ：用于定义函数/方法，接收实参，不需要有确定的值。; 值传递&引用传递 程序设计语言将实参传递给方法（或函数）的方式分","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java基础"]},["/code/java/common/basic/why-there-only-value-passing-in-java","/code/java/common/basic/why-there-only-value-passing-in-java.md"]],
  ["v-31603ec1","/code/java/common/collection/arraylist-source-code.html",{"title":"ArrayList源码&扩容机制分析","type":"article","readingTime":{"minutes":21.28,"words":6384},"excerpt":"1. ArrayList 简介 ArrayList 的底层是数组队列，相当于动态数组。与 Java 中的数组相比，它的容量能动态增长。在添加大量元素前，应用程序可以使用ensureCapacity操作来增加 ArrayList 实例的容量。这可以减少递增式再分配的数量。 ArrayList继承于 AbstractList ，实现了 List, RandomA","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java集合"]},["/code/java/common/collection/arraylist-source-code","/code/java/common/collection/arraylist-source-code.md"]],
  ["v-42b517f6","/code/java/common/collection/concurrent-hash-map-source-code.html",{"title":"ConcurrentHashMap源码&底层数据结构分析","type":"article","readingTime":{"minutes":13.76,"words":4127},"excerpt":"\" 本文来自公众号：末读代码的投稿，原文地址：https://mp.weixin.qq.com/s/AHWzboztt53ZfFZmsSnMSw 。\" 上一篇文章介绍了 HashMap 源码，反响不错，也有很多同学发表了自己的观点，这次又来了，这次是 ConcurrentHashMap 了，作为线程安全的HashMap ，它的使用频率也是很高。那么它的存储结","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java集合"]},["/code/java/common/collection/concurrent-hash-map-source-code","/code/java/common/collection/concurrent-hash-map-source-code.md"]],
  ["v-4cc3fcca","/code/java/common/collection/hashmap-source-code.html",{"title":"HashMap源码&底层数据结构分析","type":"article","readingTime":{"minutes":12.76,"words":3828},"excerpt":"\" 感谢 changfubai 对本文的改进做出的贡献！\" HashMap 简介 HashMap 主要用来存放键值对，它基于哈希表的 Map 接口实现，是常用的 Java 集合之一，是非线程安全的。 HashMap 可以存储 null 的 key 和 value，但 null 作为键只能有一个，null 作为值可以有多个 JDK1.8 之前 HashMap ","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java集合"]},["/code/java/common/collection/hashmap-source-code","/code/java/common/collection/hashmap-source-code.md"]],
  ["v-0e573126","/code/java/common/collection/java-collection-precautions-for-use.html",{"title":"Java集合使用注意事项总结","type":"article","readingTime":{"minutes":8.41,"words":2523},"excerpt":"这篇文章我根据《阿里巴巴 Java 开发手册》总结了关于集合使用常见的注意事项以及其具体原理。 强烈建议小伙伴们多多阅读几遍，避免自己写代码的时候出现这些低级的问题。 集合判空 《阿里巴巴 Java 开发手册》的描述如下：\r\" 判断所有集合内部的元素是否为空，使用 isEmpty() 方法，而不是 size()==0 的方式。\" 这是因为 isEmpty()","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java集合"]},["/code/java/common/collection/java-collection-precautions-for-use","/code/java/common/collection/java-collection-precautions-for-use.md"]],
  ["v-6b7f55e3","/code/java/common/collection/java-collection-questions-01.html",{"title":"Java集合常见知识点&面试题总结(上)","type":"article","readingTime":{"minutes":13.82,"words":4146},"excerpt":"集合概述 Java 集合概览 Java 集合， 也叫作容器，主要是由两大接口派生而来：一个是 Collection接口，主要用于存放单一元素；另一个是 Map 接口，主要用于存放键值对。对于Collection 接口，下面又有三个主要的子接口：List、Set 和 Queue。 Java 集合框架如下图所示： 注：图中只列举了主要的继承派生关系，并没有列举所","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java集合"]},["/code/java/common/collection/java-collection-questions-01","/code/java/common/collection/java-collection-questions-01.md"]],
  ["v-6d342e82","/code/java/common/collection/java-collection-questions-02.html",{"title":"Java集合常见知识点&面试题总结(下)","type":"article","readingTime":{"minutes":14.61,"words":4384},"excerpt":"Map 接口 HashMap 和 Hashtable 的区别 1. 线程是否安全： HashMap 是非线程安全的，Hashtable 是线程安全的,因为 Hashtable 内部的方法基本都经过synchronized 修饰。（如果你要保证线程安全的话就使用 ConcurrentHashMap 吧！）； 2. 效率： 因为线程安全的问题，HashMap 要","date":"2020-08-18T00:00:00.000Z","localizedDate":"2020年8月18日","category":["Java"],"tag":["Java集合"]},["/code/java/common/collection/java-collection-questions-02","/code/java/common/collection/java-collection-questions-02.md"]],
  ["v-5d42bc34","/code/java/common/jvm/class-file-structure.html",{"title":"类文件结构详解","type":"article","readingTime":{"minutes":8.57,"words":2570},"excerpt":"类文件结构详解 一 概述 在 Java 中，JVM 可以理解的代码就叫做字节码（即扩展名为 .class 的文件），它不面向任何特定的处理器，只面向虚拟机。Java 语言通过字节码的方式，在一定程度上解决了传统解释型语言执行效率低的问题，同时又保留了解释型语言可移植的特点。所以 Java 程序运行时比较高效，而且，由于字节码并不针对一种特定的机器，因此，Ja","date":"2020-09-21T00:00:00.000Z","localizedDate":"2020年9月21日","category":["Java"],"tag":["JVM"]},["/code/java/common/jvm/class-file-structure","/code/java/common/jvm/class-file-structure.md"]],
  ["v-d6bd4844","/code/java/common/jvm/class-loading-process.html",{"title":"类加载过程详解","type":"article","readingTime":{"minutes":7.46,"words":2239},"excerpt":"类加载过程详解 类的生命周期 一个类的完整生命周期如下： 类加载过程 Class 文件需要加载到虚拟机中之后才能运行和使用，那么虚拟机是如何加载这些 Class 文件呢？ 系统加载 Class 类型的文件主要三步：加载->连接->初始化。连接过程又可分为三步：验证->准备->解析。 详见：jvm规范5.4 。 加载 类加载过程的第一步，主要完成下面 3 件事","date":"2020-09-21T00:00:00.000Z","localizedDate":"2020年9月21日","category":["Java"],"tag":["JVM"]},["/code/java/common/jvm/class-loading-process","/code/java/common/jvm/class-loading-process.md"]],
  ["v-808fc0c8","/code/java/common/jvm/classloader.html",{"title":"类加载器详解","type":"article","readingTime":{"minutes":4.78,"words":1435},"excerpt":"类加载器详解 回顾一下类加载过程 类加载过程：加载->连接->初始化。连接过程又可分为三步：验证->准备->解析。 一个非数组类的加载阶段（加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，这一步我们可以去自定义类加载器去控制字节流的获取方式（重写一个类加载器的 loadClass() 方法）。数组类型不通过类加载器创建，它由 Java 虚拟机直接创建","date":"2020-09-21T00:00:00.000Z","localizedDate":"2020年9月21日","category":["Java"],"tag":["JVM"]},["/code/java/common/jvm/classloader","/code/java/common/jvm/classloader.md"]],
  ["v-87a55d62","/code/java/common/jvm/java-jvm-questions-01.html",{"title":"Java 内存区域","type":"article","readingTime":{"minutes":1.16,"words":348},"excerpt":"Java 内存区域 对于 Java 程序员来说，在虚拟机自动内存管理机制下，不再需要像 C/C++程序开发程序员这样为每一个 new 操作去写对应的 delete/free 操作，不容易出现内存泄漏和内存溢出问题。正是因为 Java 程序员把内存控制权利交给 Java 虚拟机，一旦出现内存泄漏和溢出方面的问题，如果不了解虚拟机是怎样使用内存的，那么排查错误将","date":"2020-09-21T00:00:00.000Z","localizedDate":"2020年9月21日","category":["Java"],"tag":["JVM"]},["/code/java/common/jvm/java-jvm-questions-01","/code/java/common/jvm/java-jvm-questions-01.md"]],
  ["v-367f8802","/code/java/common/jvm/jdk-monitoring-and-troubleshooting-tools.html",{"title":"Java 内存区域","type":"article","readingTime":{"minutes":9.98,"words":2995},"excerpt":"JDK 监控和故障处理工具总结 JDK 命令行工具 这些命令在 JDK 安装目录下的 bin 目录下：\rjps (JVM Process Status）: 类似 UNIX 的 ps 命令。用于查看所有 Java 进程的启动类、传入参数和 Java 虚拟机参数等信息；; \rjstat（JVM Statistics Monitoring Tool）: 用于收集 ","date":"2020-09-21T00:00:00.000Z","localizedDate":"2020年9月21日","category":["Java"],"tag":["JVM"]},["/code/java/common/jvm/jdk-monitoring-and-troubleshooting-tools","/code/java/common/jvm/jdk-monitoring-and-troubleshooting-tools.md"]],
  ["v-65877a09","/code/java/common/jvm/jvm-garbage-collection.html",{"title":"JVM 垃圾回收详解","type":"article","readingTime":{"minutes":30.64,"words":9191},"excerpt":"写在前面 本节常见面试题 问题答案在文中都有提到\r如何判断对象是否死亡（两种方法）。; \r简单的介绍一下强引用、软引用、弱引用、虚引用（虚引用与软引用和弱引用的区别、使用软引用能带来的好处）。; \r如何判断一个常量是废弃常量; \r如何判断一个类是无用的类; \r垃圾收集有哪些算法，各自的特点？; \rHotSpot 为什么要分为新生代和老年代？; \r常见的垃圾回","date":"2020-09-24T00:00:00.000Z","localizedDate":"2020年9月24日","category":["Java"],"tag":["JVM"]},["/code/java/common/jvm/jvm-garbage-collection","/code/java/common/jvm/jvm-garbage-collection.md"]],
  ["v-09ad1187","/code/java/common/jvm/jvm-intro.html",{"title":"大白话带你认识JVM","type":"article","readingTime":{"minutes":31.69,"words":9507},"excerpt":"大白话带你认识JVM\r\" 来自掘金用户：说出你的愿望吧丷投稿，原文地址：https://juejin.im/post/5e1505d0f265da5d5d744050#heading-28\" 前言 如果在文中用词或者理解方面出现问题，欢迎指出。此文旨在提及而不深究，但会尽量效率地把知识点都抛出来 一、JVM的基本介绍 JVM 是 Java Virtual M","date":"2020-09-24T00:00:00.000Z","localizedDate":"2020年9月24日","category":["Java"],"tag":["JVM"]},["/code/java/common/jvm/jvm-intro","/code/java/common/jvm/jvm-intro.md"]],
  ["v-00f2b9d6","/code/java/common/jvm/jvm-parameters-intro.html",{"title":"最重要的 JVM 参数总结","type":"article","readingTime":{"minutes":4.67,"words":1400},"excerpt":"最重要的 JVM 参数总结 本文由翻译自 https://www.baeldung.com/jvm-parameters，并对文章进行了大量的完善补充。翻译不易，如需转载请注明出处，作者：baeldung 。 1.概述 在本篇文章中，你将掌握最常用的 JVM 参数配置。如果对于下面提到了一些概念比如堆、 2.堆内存相关\r\"Java 虚拟机所管理的内存中最大的","date":"2020-09-24T00:00:00.000Z","localizedDate":"2020年9月24日","category":["Java"],"tag":["JVM"]},["/code/java/common/jvm/jvm-parameters-intro","/code/java/common/jvm/jvm-parameters-intro.md"]],
  ["v-150e920e","/code/java/common/jvm/memory-area.html",{"title":"Java 内存区域详解","type":"article","readingTime":{"minutes":23.18,"words":6954},"excerpt":"\" 如果没有特殊说明，都是针对的是 HotSpot 虚拟机。\"\r\"\"\r\" 本文基于《深入理解 Java 虚拟机：JVM 高级特性与最佳实践》进行总结补充。\"\r\"\"\r\" 常见面试题 ：\"\r\"\"\r\" - 介绍下 Java 内存区域（运行时数据区）\"\r\" - Java 对象的创建过程（五步，建议能默写出来并且要知道每一步虚拟机做了什么）\"\r\" - 对象的访问定位的","date":"2020-09-24T00:00:00.000Z","localizedDate":"2020年9月24日","category":["Java"],"tag":["JVM"]},["/code/java/common/jvm/memory-area","/code/java/common/jvm/memory-area.md"]],
  ["v-c5cb53e4","/code/java/common/concurrent/aqs.html",{"title":"AQS 原理以及 AQS 同步组件总结","type":"article","readingTime":{"minutes":21.26,"words":6378},"excerpt":"开始之前，先来看几道常见的面试题！建议你带着这些问题来看这篇文章：\r何为 AQS？AQS 原理了解吗？; \rCountDownLatch 和 CyclicBarrier 了解吗？两者的区别是什么？; \r用过 Semaphore 吗？应用场景了解吗？; \r......; AQS 简单介绍 AQS 的全称为 AbstractQueuedSynchronizer ","date":"2020-08-19T00:00:00.000Z","localizedDate":"2020年8月19日","category":["Java"],"tag":["Java并发"]},["/code/java/common/concurrent/aqs","/code/java/common/concurrent/aqs.md"]],
  ["v-74ff903d","/code/java/common/concurrent/atomic-classes.html",{"title":"Atomic 原子类总结","type":"article","readingTime":{"minutes":11.44,"words":3433},"excerpt":"Atomic 原子类介绍 Atomic 翻译成中文是原子的意思。在化学上，我们知道原子是构成一般物质的最小单位，在化学反应中是不可分割的。在我们这里 Atomic 是指一个操作是不可中断的。即使是在多个线程一起执行的时候，一个操作一旦开始，就不会被其他线程干扰。 所以，所谓原子类说简单点就是具有原子/原子操作特征的类。 并发包 java.util.concu","date":"2020-08-19T00:00:00.000Z","localizedDate":"2020年8月19日","category":["Java"],"tag":["Java并发"]},["/code/java/common/concurrent/atomic-classes","/code/java/common/concurrent/atomic-classes.md"]],
  ["v-2fe19e89","/code/java/common/concurrent/completablefuture-intro.html",{"title":"CompletableFuture入门","type":"article","readingTime":{"minutes":8.54,"words":2563},"excerpt":"自己在项目中使用 CompletableFuture 比较多，看到很多开源框架中也大量使用到了 CompletableFuture 。 因此，专门写一篇文章来介绍这个 Java 8 才被引入的一个非常有用的用于异步编程的类。 简单介绍 CompletableFuture 同时实现了 Future 和 CompletionStage 接口。 Completab","date":"2020-08-19T00:00:00.000Z","localizedDate":"2020年8月19日","category":["Java"],"tag":["Java并发"]},["/code/java/common/concurrent/completablefuture-intro","/code/java/common/concurrent/completablefuture-intro.md"]],
  ["v-01f75a27","/code/java/common/concurrent/java-concurrent-collections.html",{"title":"Java 常见并发容器总结","type":"article","readingTime":{"minutes":10.08,"words":3024},"excerpt":"JDK 提供的这些容器大部分在 java.util.concurrent 包中。\rConcurrentHashMap : 线程安全的 HashMap; \rCopyOnWriteArrayList : 线程安全的 List，在读多写少的场合性能非常好，远远好于 Vector。; \rConcurrentLinkedQueue : 高效的并发队列，使用链表实现。可","date":"2020-08-19T00:00:00.000Z","localizedDate":"2020年8月19日","category":["Java"],"tag":["Java并发"]},["/code/java/common/concurrent/java-concurrent-collections","/code/java/common/concurrent/java-concurrent-collections.md"]],
  ["v-71d6ecd6","/code/java/common/concurrent/java-concurrent-questions-01.html",{"title":"Java 并发常见知识点&面试题总结（基础篇）","type":"article","readingTime":{"minutes":15.53,"words":4659},"excerpt":"什么是线程和进程? 何为进程? 进程是程序的一次执行过程，是系统运行程序的基本单位，因此进程是动态的。系统运行一个程序即是一个进程从创建，运行到消亡的过程。 在 Java 中，当我们启动 main 函数时其实就是启动了一个 JVM 的进程，而 main 函数所在的线程就是这个进程中的一个线程，也称主线程。 如下图所示，在 windows 中通过查看任务管理器","date":"2020-08-19T00:00:00.000Z","localizedDate":"2020年8月19日","category":["Java"],"tag":["Java并发"]},["/code/java/common/concurrent/java-concurrent-questions-01","/code/java/common/concurrent/java-concurrent-questions-01.md"]],
  ["v-6e6d3b98","/code/java/common/concurrent/java-concurrent-questions-02.html",{"title":"Java 并发常见知识点&面试题总结（进阶篇）","type":"article","readingTime":{"minutes":43.95,"words":13186},"excerpt":"synchronized 关键字 说一说自己对于 synchronized 关键字的了解 synchronized 关键字解决的是多个线程之间访问资源的同步性，synchronized关键字可以保证被它修饰的方法或者代码块在任意时刻只能有一个线程执行。 另外，在 Java 早期版本中，synchronized 属于 重量级锁，效率低下。 为什么呢？ 因为监视","date":"2020-08-19T00:00:00.000Z","localizedDate":"2020年8月19日","category":["Java"],"tag":["Java并发"]},["/code/java/common/concurrent/java-concurrent-questions-02","/code/java/common/concurrent/java-concurrent-questions-02.md"]],
  ["v-4676cd69","/code/java/common/concurrent/java-thread-pool-best-practices.html",{"title":"Java 线程池最佳实践","type":"article","readingTime":{"minutes":13.81,"words":4144},"excerpt":"这篇文章篇幅虽短，但是绝对是干货。标题稍微有点夸张，嘿嘿，实际都是自己使用线程池的时候总结的一些个人感觉比较重要的点。 线程池知识回顾 开始这篇文章之前还是简单介绍一嘴线程池，之前写的《新手也能看懂的线程池学习总结》这篇文章介绍的很详细了。 为什么要使用线程池？\r\" 池化技术想必大家已经屡见不鲜了，线程池、数据库连接池、Http 连接池等等都是对这个思想的应","date":"2020-08-21T00:00:00.000Z","localizedDate":"2020年8月21日","category":["Java"],"tag":["Java并发"]},["/code/java/common/concurrent/java-thread-pool-best-practices","/code/java/common/concurrent/java-thread-pool-best-practices.md"]],
  ["v-95c0b698","/code/java/common/concurrent/java-thread-pool-summary.html",{"title":"Java 线程池详解","type":"article","readingTime":{"minutes":29.74,"words":8921},"excerpt":"一 使用线程池的好处\r\" 池化技术想必大家已经屡见不鲜了，线程池、数据库连接池、Http 连接池等等都是对这个思想的应用。池化技术的思想主要是为了减少每次获取资源的消耗，提高对资源的利用率。\" 线程池提供了一种限制和管理资源（包括执行一个任务）的方式。 每个线程池还维护一些基本统计信息，例如已完成任务的数量。 这里借用《Java 并发编程的艺术》提到的来说一","date":"2020-08-21T00:00:00.000Z","localizedDate":"2020年8月21日","category":["Java"],"tag":["Java并发"]},["/code/java/common/concurrent/java-thread-pool-summary","/code/java/common/concurrent/java-thread-pool-summary.md"]],
  ["v-3c8e1a8e","/code/java/common/concurrent/reentrantlock.html",{"title":"从ReentrantLock的实现看AQS的原理及应用","type":"article","readingTime":{"minutes":29.8,"words":8939},"excerpt":"\" 本文转载自：https://tech.meituan.com/2019/12/05/aqs-theory-and-apply.html\"\r\"\"\r\" 作者：美团技术团队\" 前言 Java 中的大部分同步类（Semaphore、ReentrantLock 等）都是基于 AbstractQueuedSynchronizer（简称为 AQS）实现的。AQS 是一","date":"2020-08-21T00:00:00.000Z","localizedDate":"2020年8月21日","category":["Java"],"tag":["Java并发"]},["/code/java/common/concurrent/reentrantlock","/code/java/common/concurrent/reentrantlock.md"]],
  ["v-243a5b70","/code/java/common/concurrent/threadlocal.html",{"title":"万字解析 ThreadLocal 关键字","type":"article","readingTime":{"minutes":24.06,"words":7218},"excerpt":"\" 本文来自一枝花算不算浪漫投稿， 原文地址：https://juejin.cn/post/6844904151567040519。\" 前言 全文共 10000+字，31 张图，这篇文章同样耗费了不少的时间和精力才创作完成，原创不易，请大家点点关注+在看，感谢。 对于ThreadLocal，大家的第一反应可能是很简单呀，线程的变量副本，每个线程隔离。那这里有","date":"2020-08-21T00:00:00.000Z","localizedDate":"2020年8月21日","category":["Java"],"tag":["Java并发"]},["/code/java/common/concurrent/threadlocal","/code/java/common/concurrent/threadlocal.md"]],
  ["v-160c569a","/code/java/common/new-features/java10.html",{"title":"Java 10 新特性概览","type":"article","readingTime":{"minutes":4.91,"words":1472},"excerpt":"Java 10 发布于 2018 年 3 月 20 日，最知名的特性应该是 var 关键字（局部变量类型推断）的引入了，其他还有垃圾收集器改善、GC 改进、性能提升、线程管控等一批新特性。 概览（精选了一部分） ：\rJEP 286：局部变量类型推断; \rJEP 304：垃圾回收器接口; \rJEP 307：G1 并行 Full GC; \rJEP 310：应用程","date":"2021-03-24T00:00:00.000Z","localizedDate":"2021年3月24日","category":["Java"],"tag":["Java新特性"]},["/code/java/common/new-features/java10","/code/java/common/new-features/java10.md"]],
  ["v-12a2a55c","/code/java/common/new-features/java11.html",{"title":"Java 11 新特性概览","type":"article","readingTime":{"minutes":4.42,"words":1327},"excerpt":"Java 11 于 2018 年 9 月 25 日正式发布，这是很重要的一个版本！Java 11 和 2017 年 9 月份发布的 Java 9 以及 2018 年 3 月份发布的 Java 10 相比，其最大的区别就是：在长期支持(Long-Term-Support)方面，Oracle 表示会对 Java 11 提供大力支持，这一支持将会持续至 2026 ","date":"2021-03-24T00:00:00.000Z","localizedDate":"2021年3月24日","category":["Java"],"tag":["Java新特性"]},["/code/java/common/new-features/java11","/code/java/common/new-features/java11.md"]],
  ["v-0de52712","/code/java/common/new-features/java12-13.html",{"title":"Java 12 ~ 13 新特性概览","type":"article","readingTime":{"minutes":5.91,"words":1772},"excerpt":"Java12 String 增强 Java 11 增加了两个的字符串处理方法，如以下所示。 indent() 方法可以实现字符串缩进。 输出： transform() 方法可以用来转变指定字符串。 Files 增强（文件比较） Java 12 添加了以下方法来比较两个文件： mismatch() 方法用于比较两个文件，并返回第一个不匹配字符的位置，如果文件相","date":"2021-03-24T00:00:00.000Z","localizedDate":"2021年3月24日","category":["Java"],"tag":["Java新特性"]},["/code/java/common/new-features/java12-13","/code/java/common/new-features/java12-13.md"]],
  ["v-39d7b652","/code/java/common/new-features/java14-15.html",{"title":"Java 14 ~ 15 新特性概览","type":"article","readingTime":{"minutes":6.77,"words":2030},"excerpt":"Java14 空指针异常精准提示 通过 JVM 参数中添加-XX:+ShowCodeDetailsInExceptionMessages，可以在空指针异常中获取更为详细的调用信息，更快的定位和解决问题。 Java 14 之前： Java 14 之后： switch 的增强(转正) Java12 引入的 switch（预览特性）在 Java14 变为正式版本，","date":"2021-03-24T00:00:00.000Z","localizedDate":"2021年3月24日","category":["Java"],"tag":["Java新特性"]},["/code/java/common/new-features/java14-15","/code/java/common/new-features/java14-15.md"]],
  ["v-a557caae","/code/java/common/new-features/java8-common-new-features.html",{"title":"Java8 新特性实战","type":"article","readingTime":{"minutes":20.11,"words":6034},"excerpt":"Java8 新特性实战\r\" 本文来自cowbi的投稿~\" Oracle 于 2014 发布了 Java8（jdk1.8），诸多原因使它成为目前市场上使用最多的 jdk 版本。虽然发布距今已将近 7 年，但很多程序员对其新特性还是不够了解，尤其是用惯了 Java8 之前版本的老程序员，比如我。 为了不脱离队伍太远，还是有必要对这些新特性做一些总结梳理。它较 j","date":"2021-03-24T00:00:00.000Z","localizedDate":"2021年3月24日","category":["Java"],"tag":["Java新特性"]},["/code/java/common/new-features/java8-common-new-features","/code/java/common/new-features/java8-common-new-features.md"]],
  ["v-3f080a5e","/code/java/common/new-features/java8-tutorial-translate.html",{"title":"《Java8指南》中文翻译","type":"article","readingTime":{"minutes":22.08,"words":6625},"excerpt":"《Java8指南》中文翻译 随着 Java 8 的普及度越来越高，很多人都提到面试中关于Java 8 也是非常常问的知识点。应各位要求和需要，我打算对这部分知识做一个总结。本来准备自己总结的，后面看到Github 上有一个相关的仓库，地址： https://github.com/winterbe/java8-tutorial。这个仓库是英文的，我对其进行了翻","date":"2021-03-24T00:00:00.000Z","localizedDate":"2021年3月24日","category":["Java"],"tag":["Java新特性"]},["/code/java/common/new-features/java8-tutorial-translate","/code/java/common/new-features/java8-tutorial-translate.md"]],
  ["v-158c2687","/code/java/common/new-features/java9.html",{"title":"Java 9 新特性概览","type":"article","readingTime":{"minutes":8.25,"words":2475},"excerpt":"Java 9 发布于 2017 年 9 月 21 日 。作为 Java 8 之后 3 年半才发布的新版本，Java 9 带来了很多重大的变化其中最重要的改动是 Java 平台模块系统的引入，其他还有诸如集合、Stream 流......。 你可以在 Archived OpenJDK General-Availability Releases 上下载自己需要的","date":"2021-03-24T00:00:00.000Z","localizedDate":"2021年3月24日","category":["Java"],"tag":["Java新特性"]},["/code/java/common/new-features/java9","/code/java/common/new-features/java9.md"]],
  ["v-af26fc70","/code/java/cs-basics/algorithms/10-classical-sorting-algorithms.html",{"title":"十大经典排序算法总结","type":"article","readingTime":{"minutes":21.56,"words":6467},"excerpt":"\" 本文转自：http://www.guoyaohua.com/sorting.html，JavaGuide 对其做了补充完善。\" 引言 所谓排序，就是使一串记录，按照其中的某个或某些关键字的大小，递增或递减的排列起来的操作。排序算法，就是如何使得记录按照要求排列的方法。排序算法在很多领域得到相当地重视，尤其是在大量数据的处理方面。一个优秀的算法可以节省大量","date":"2021-11-13T00:00:00.000Z","localizedDate":"2021年11月13日","category":["计算机基础"],"tag":["算法"]},["/code/java/cs-basics/algorithms/10-classical-sorting-algorithms","/code/java/cs-basics/algorithms/10-classical-sorting-algorithms.md"]],
  ["v-7433180b","/code/java/cs-basics/algorithms/linkedlist-algorithm-problems.html",{"title":"几道常见的链表算法题","type":"article","readingTime":{"minutes":7.51,"words":2254},"excerpt":"1. 两数相加 题目描述\r\" Leetcode:给定两个非空链表来表示两个非负整数。位数按照逆序方式存储，它们的每个节点只存储单个数字。将两数相加返回一个新的链表。\"\r\"\"\r\"你可以假设除了数字 0 之外，这两个数字都不会以零开头。\" 示例： 问题分析 Leetcode官方详细解答地址： https://leetcode-cn.com/problems/ad","date":"2021-11-13T00:00:00.000Z","localizedDate":"2021年11月13日","category":["计算机基础"],"tag":["算法"]},["/code/java/cs-basics/algorithms/linkedlist-algorithm-problems","/code/java/cs-basics/algorithms/linkedlist-algorithm-problems.md"]],
  ["v-05dde4e5","/code/java/cs-basics/algorithms/string-algorithm-problems.html",{"title":"几道常见的字符串算法题","type":"article","readingTime":{"minutes":9.49,"words":2847},"excerpt":"\" 授权转载！\"\r\"\"\r\" - 本文作者：wwwxmu\"\r\" - 原文地址:https://www.weiweiblog.cn/13string/\" 1. KMP 算法 谈到字符串问题，不得不提的就是 KMP 算法，它是用来解决字符串查找的问题，可以在一个字符串（S）中查找一个子串（W）出现的位置。KMP 算法把字符匹配的时间复杂度缩小到 O(m+n) ,而","date":"2021-11-13T00:00:00.000Z","localizedDate":"2021年11月13日","category":["计算机基础"],"tag":["算法"]},["/code/java/cs-basics/algorithms/string-algorithm-problems","/code/java/cs-basics/algorithms/string-algorithm-problems.md"]],
  ["v-b4536a8a","/code/java/cs-basics/algorithms/the-sword-refers-to-offer.html",{"title":"剑指offer部分编程题","type":"article","readingTime":{"minutes":16.2,"words":4861},"excerpt":"斐波那契数列 题目描述： 大家都知道斐波那契数列，现在要求输入一个整数n，请你输出斐波那契数列的第n项。 n<=39 问题分析： 可以肯定的是这一题通过递归的方式是肯定能做出来，但是这样会有一个很大的问题，那就是递归大量的重复计算会导致内存溢出。另外可以使用迭代法，用fn1和fn2保存计算过程中的结果，并复用起来。下面我会把两个方法示例代码都给出来并给出两个","date":"2021-11-13T00:00:00.000Z","localizedDate":"2021年11月13日","category":["计算机基础"],"tag":["算法"]},["/code/java/cs-basics/algorithms/the-sword-refers-to-offer","/code/java/cs-basics/algorithms/the-sword-refers-to-offer.md"]],
  ["v-ba6699ae","/code/java/cs-basics/data-structure/bloom-filter.html",{"title":"布隆过滤器","type":"article","readingTime":{"minutes":9.75,"words":2925},"excerpt":"布隆过滤器 海量数据处理以及缓存穿透这两个场景让我认识了 布隆过滤器 ，我查阅了一些资料来了解它，但是很多现成资料并不满足我的需求，所以就决定自己总结一篇关于布隆过滤器的文章。希望通过这篇文章让更多人了解布隆过滤器，并且会实际去使用它！ 下面我们将分为几个方面来介绍布隆过滤器： 1. 什么是布隆过滤器？ 2. 布隆过滤器的原理介绍。 3. 布隆过滤器使用场景","date":"2021-11-13T00:00:00.000Z","localizedDate":"2021年11月13日","category":["计算机基础"],"tag":["数据结构"]},["/code/java/cs-basics/data-structure/bloom-filter","/code/java/cs-basics/data-structure/bloom-filter.md"]],
  ["v-7a328e0e","/code/java/cs-basics/data-structure/graph.html",{"title":"图的基本概念","type":"article","readingTime":{"minutes":6.23,"words":1870},"excerpt":"图\r\" 开头还是求点赞，求转发！原创优质公众号，希望大家能让更多人看到我们的文章。\"\r\"\"\r\" 图片都是我们手绘的，可以说非常用心了！\" 图是一种较为复杂的非线性结构。 为啥说其较为复杂呢？ 根据前面的内容，我们知道：\r线性数据结构的元素满足唯一的线性关系，每个元素(除第一个和最后一个外)只有一个直接前趋和一个直接后继。; \r树形数据结构的元素之间有着明显的","date":"2021-11-13T00:00:00.000Z","localizedDate":"2021年11月13日","category":["计算机基础"],"tag":["数据结构"]},["/code/java/cs-basics/data-structure/graph","/code/java/cs-basics/data-structure/graph.md"]],
  ["v-5107dfff","/code/java/cs-basics/data-structure/heap.html",{"title":"堆的基本概念","type":"article","readingTime":{"minutes":9.06,"words":2718},"excerpt":"堆 什么是堆 堆是一种满足以下条件的树： 堆中的每一个节点值都大于等于（或小于等于）子树中所有节点的值。或者说，任意一个节点的值都大于等于（或小于等于）所有子节点的值。\r\" 大家可以把堆(最大堆)理解为一个公司,这个公司很公平,谁能力强谁就当老大,不存在弱的人当老大,老大手底下的人一定不会比他强。这样有助于理解后续堆的操作。\" !!!特别提示：\r很多博客说堆","date":"2021-11-13T00:00:00.000Z","localizedDate":"2021年11月13日","category":["计算机基础"],"tag":["数据结构"]},["/code/java/cs-basics/data-structure/heap","/code/java/cs-basics/data-structure/heap.md"]],
  ["v-26116dcf","/code/java/cs-basics/data-structure/linear-data-structure.html",{"title":"线性数据结构 :数组、链表、栈、队列的基本概念","type":"article","readingTime":{"minutes":11.46,"words":3437},"excerpt":"线性数据结构 :数组、链表、栈、队列\r\" 开头还是求点赞，求转发！原创优质公众号，希望大家能让更多人看到我们的文章。\"\r\"\"\r\" 图片都是我们手绘的，可以说非常用心了！\" 1. 数组 数组（Array） 是一种很常见的数据结构。它由相同类型的元素（element）组成，并且是使用一块连续的内存来存储。 我们直接可以利用元素的索引（index）可以计算出该元素","date":"2021-11-13T00:00:00.000Z","localizedDate":"2021年11月13日","category":["计算机基础"],"tag":["数据结构"]},["/code/java/cs-basics/data-structure/linear-data-structure","/code/java/cs-basics/data-structure/linear-data-structure.md"]],
  ["v-e0523cfa","/code/java/cs-basics/data-structure/red-black-tree.html",{"title":"红黑树","type":"article","readingTime":{"minutes":0.88,"words":265},"excerpt":"红黑树 红黑树特点 : 1. 每个节点非红即黑； 2. 根节点总是黑色的； 3. 每个叶子节点都是黑色的空节点（NIL节点）； 4. 如果节点是红色的，则它的子节点必须是黑色的（反之不一定）； 5. 从根节点到叶节点或空子节点的每条路径，必须包含相同数目的黑色节点（即相同的黑色高度）。 红黑树的应用 ：TreeMap、TreeSet以及JDK1.8的Hash","date":"2021-11-13T00:00:00.000Z","localizedDate":"2021年11月13日","category":["计算机基础"],"tag":["数据结构"]},["/code/java/cs-basics/data-structure/red-black-tree","/code/java/cs-basics/data-structure/red-black-tree.md"]],
  ["v-4b7ff98d","/code/java/cs-basics/data-structure/tree.html",{"title":"树的基本概念","type":"article","readingTime":{"minutes":7.03,"words":2109},"excerpt":"树 树就是一种类似现实生活中的树的数据结构（倒置的树）。任何一颗非空树只有一个根节点。 一棵树具有以下特点： 1. 一棵树中的任意两个结点有且仅有唯一的一条路径连通。 2. 一棵树如果有 n 个结点，那么它一定恰好有 n-1 条边。 3. 一棵树不包含回路。 下图就是一颗树，并且是一颗二叉树。 如上图所示，通过上面这张图说明一下树中的常用概念：\r节点 ：树中","date":"2021-11-13T00:00:00.000Z","localizedDate":"2021年11月13日","category":["计算机基础"],"tag":["数据结构"]},["/code/java/cs-basics/data-structure/tree","/code/java/cs-basics/data-structure/tree.md"]],
  ["v-11d2741a","/code/java/cs-basics/network/http&https.html",{"title":"HTTP vs HTTPS（应用层）","type":"article","readingTime":{"minutes":9.81,"words":2944},"excerpt":"\" 本文由 SnailClimb 和 csguide-dabai （公众号“CS指南”作者）共同完成。\" HTTP 协议 HTTP 协议介绍 HTTP 协议，全称超文本传输协议（Hypertext Transfer Protocol）。顾名思义，HTTP 协议就是用来规范超文本的传输，超文本，也就是网络上的包括文本在内的各式各样的消，具体来说，主要是来规范浏","date":"2021-11-13T00:00:00.000Z","localizedDate":"2021年11月13日","category":["计算机基础"],"tag":["计算机网络"]},["/code/java/cs-basics/network/http&https","/code/java/cs-basics/network/http&https.md"]],
  ["v-39b0e79a","/code/java/cs-basics/network/http1.0&http1.1.html",{"title":"HTTP 1.0 vs HTTP 1.1（应用层）","type":"article","readingTime":{"minutes":7.49,"words":2247},"excerpt":"\" 本文由 SnailClimb 和 csguide-dabai （公众号“CS指南”作者）共同完成。\" 这篇文章会从下面几个维度来对比 HTTP 1.0 和 HTTP 1.1：\r响应状态码; \r缓存处理; \r连接方式; \rHost头处理; \r带宽优化; 响应状态码 HTTP/1.0仅定义了16种状态码。HTTP/1.1中新加入了大量的状态码，光是错误响应状","date":"2021-11-13T00:00:00.000Z","localizedDate":"2021年11月13日","category":["计算机基础"],"tag":["计算机网络"]},["/code/java/cs-basics/network/http1.0&http1.1","/code/java/cs-basics/network/http1.0&http1.1.md"]],
  ["v-5225a252","/code/java/cs-basics/network/osi&tcp-ip-model.html",{"title":"OSI 和 TCP/IP 网络分层模型详解（基础）","type":"article","readingTime":{"minutes":7.38,"words":2215},"excerpt":"\" 本文由 SnailClimb 和 csguide-dabai （公众号“CS指南”作者）共同完成。\" OSI 七层模型 OSI 七层模型 是国际标准化组织提出一个网络分层模型，其大体结构以及每一层提供的功能如下图所示： 每一层都专注做一件事情，并且每一层都需要使用下一层提供的功能比如传输层需要使用网络层提供的路由和寻址功能，这样传输层才知道把数据传输到哪","date":"2021-11-13T00:00:00.000Z","localizedDate":"2021年11月13日","category":["计算机基础"],"tag":["计算机网络"]},["/code/java/cs-basics/network/osi&tcp-ip-model","/code/java/cs-basics/network/osi&tcp-ip-model.md"]],
  ["v-2701a5cc","/code/java/cs-basics/network/other-network-questions.html",{"title":"计算机网络常见知识点&面试题（补充）","type":"article","readingTime":{"minutes":21.93,"words":6579},"excerpt":"应用层有哪些常见的协议？ HTTP:超文本传输协议 超文本传输协议（HTTP，HyperText Transfer Protocol) 主要是为 Web 浏览器与 Web 服务器之间的通信而设计的。当我们使用浏览器浏览网页的时候，我们网页就是通过 HTTP 请求进行加载的，整个过程如下图所示。 HTTP 协是基于 TCP协议，发送 HTTP 请求之前首先要建","date":"2021-11-13T00:00:00.000Z","localizedDate":"2021年11月13日","category":["计算机基础"],"tag":["计算机网络"]},["/code/java/cs-basics/network/other-network-questions","/code/java/cs-basics/network/other-network-questions.md"]],
  ["v-ffade258","/code/java/cs-basics/network/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%80%81%E5%B8%88%E7%9A%84%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E3%80%8B%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93.html",{"title":"谢希仁老师的《计算机网络》内容总结","type":"article","readingTime":{"minutes":39.86,"words":11957},"excerpt":"本文是我在大二学习计算机网络期间整理， 大部分内容都来自于谢希仁老师的《计算机网络》这本书。 为了内容更容易理解，我对之前的整理进行了一波重构，并配上了一些相关的示意图便于理解。\r1. 计算机网络概述; \r1.1. 基本术语; \r1.2. 重要知识点总结; \r2. 物理层（Physical Layer）; \r2.1. 基本术语; \r2.2. 重要知识点总结;","date":"2021-11-13T00:00:00.000Z","localizedDate":"2021年11月13日","category":["计算机基础"],"tag":["计算机网络"]},["/code/java/cs-basics/network/谢希仁老师的《计算机网络》内容总结.html","/code/java/cs-basics/network/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%80%81%E5%B8%88%E7%9A%84%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E3%80%8B%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93","/code/java/cs-basics/network/谢希仁老师的《计算机网络》内容总结.md","/code/java/cs-basics/network/%E8%B0%A2%E5%B8%8C%E4%BB%81%E8%80%81%E5%B8%88%E7%9A%84%E3%80%8A%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E3%80%8B%E5%86%85%E5%AE%B9%E6%80%BB%E7%BB%93.md"]],
  ["v-71cdd109","/code/java/cs-basics/operating-system/linux-intro.html",{"title":"Linux 基础知识总结","type":"article","readingTime":{"minutes":25.04,"words":7512},"excerpt":"简单介绍一下 Java 程序员必知的 Linux 的一些概念以及常见命令。 如果文章有任何需要改善和完善的地方，欢迎在评论区指出，共同进步！笔芯！ 从认识操作系统开始 正式开始 Linux 之前，简单花一点点篇幅科普一下操作系统相关的内容。 操作系统简介 我通过以下四点介绍什么是操作系统： 1. 操作系统（Operating System，简称 OS）是管理","date":"2021-12-13T00:00:00.000Z","localizedDate":"2021年12月13日","category":["计算机基础"],"tag":["操作系统","Linux"]},["/code/java/cs-basics/operating-system/linux-intro","/code/java/cs-basics/operating-system/linux-intro.md"]],
  ["v-69c7472a","/code/java/cs-basics/operating-system/operating-system-basic-questions-01.html",{"title":"操作系统常见面试题总结","type":"article","readingTime":{"minutes":41.05,"words":12316},"excerpt":"很多读者抱怨计算操作系统的知识点比较繁杂，自己也没有多少耐心去看，但是面试的时候又经常会遇到。所以，我带着我整理好的操作系统的常见问题来啦！这篇文章总结了一些我觉得比较重要的操作系统相关的问题比如进程管理、内存管理、虚拟内存等等。 文章形式通过大部分比较喜欢的面试官和求职者之间的对话形式展开。另外，Guide 哥 也只是在大学的时候学习过操作系统，不过基本都","date":"2021-12-13T00:00:00.000Z","localizedDate":"2021年12月13日","category":["计算机基础"],"tag":["操作系统"]},["/code/java/cs-basics/operating-system/operating-system-basic-questions-01","/code/java/cs-basics/operating-system/operating-system-basic-questions-01.md"]],
  ["v-d9973366","/code/java/cs-basics/operating-system/shell-intro.html",{"title":"Shell 编程入门","type":"article","readingTime":{"minutes":11.37,"words":3411},"excerpt":"Shell 编程入门 走进 Shell 编程的大门 为什么要学Shell？ 学一个东西，我们大部分情况都是往实用性方向着想。从工作角度来讲，学习 Shell 是为了提高我们自己工作效率，提高产出，让我们在更少的时间完成更多的事情。 很多人会说 Shell 编程属于运维方面的知识了，应该是运维人员来做，我们做后端开发的没必要学。我觉得这种说法大错特错，相比于专","date":"2021-12-13T00:00:00.000Z","localizedDate":"2021年12月13日","category":["计算机基础"],"tag":["操作系统","Linux"]},["/code/java/cs-basics/operating-system/shell-intro","/code/java/cs-basics/operating-system/shell-intro.md"]],
  ["v-772b7229","/code/java/database/mysql/a-thousand-lines-of-mysql-study-notes.html",{"title":"一千行 MySQL 学习笔记","type":"article","readingTime":{"minutes":32.8,"words":9841},"excerpt":"\" 原文地址：https://shockerli.net/post/1000-line-mysql-note/ ，JavaGuide 对本文进行了简答排版，新增了目录。\"\r\" 作者：格物\" 非常不错的总结，强烈建议保存下来，需要的时候看一看。 基本操作 数据库操作 表的操作 数据操作 字符集编码 数据类型(列类型) 列属性(列约束) 建表规范 SELECT ","date":"2020-12-21T00:00:00.000Z","localizedDate":"2020年12月21日","category":["数据库"],"tag":["MySQL"]},["/code/java/database/mysql/a-thousand-lines-of-mysql-study-notes","/code/java/database/mysql/a-thousand-lines-of-mysql-study-notes.md"]],
  ["v-6b457bcc","/code/java/database/mysql/how-sql-executed-in-mysql.html",{"title":"SQL语句在MySQL中的执行过程","type":"article","readingTime":{"minutes":10.25,"words":3074},"excerpt":"\" 本文来自木木匠投稿。\" 本篇文章会分析下一个 SQL 语句在 MySQL 中的执行流程，包括 SQL 的查询在 MySQL 内部会怎么流转，SQL 语句的更新是怎么完成的。 在分析之前我会先带着你看看 MySQL 的基础架构，知道了 MySQL 由那些组件组成以及这些组件的作用是什么，可以帮助我们理解和解决这些问题。 一 MySQL 基础架构分析 1.1","date":"2020-12-21T00:00:00.000Z","localizedDate":"2020年12月21日","category":["数据库"],"tag":["MySQL"]},["/code/java/database/mysql/how-sql-executed-in-mysql","/code/java/database/mysql/how-sql-executed-in-mysql.md"]],
  ["v-49e02396","/code/java/database/mysql/index-invalidation-caused-by-implicit-conversion.html",{"title":"MySQL中的隐式转换造成的索引失效","type":"article","readingTime":{"minutes":9.06,"words":2717},"excerpt":"\" 本次测试使用的 MySQL 版本是 5.7.26，随着 MySQL 版本的更新某些特性可能会发生改变，本文不代表所述观点和结论于 MySQL 所有版本均准确无误，版本差异请自行甄别。\"\r\"\"\r\" 原文：https://www.guitu18.com/post/2019/11/24/61.html\" 前言 数据库优化是一个任重而道远的任务，想要做优化必须深","date":"2020-12-21T00:00:00.000Z","localizedDate":"2020年12月21日","category":["数据库"],"tag":["MySQL","性能优化"]},["/code/java/database/mysql/index-invalidation-caused-by-implicit-conversion","/code/java/database/mysql/index-invalidation-caused-by-implicit-conversion.md"]],
  ["v-b3b51aee","/code/java/database/mysql/innodb-implementation-of-mvcc.html",{"title":"InnoDB存储引擎对MVCC的实现","type":"article","readingTime":{"minutes":12.57,"words":3771},"excerpt":"一致性非锁定读和锁定读 一致性非锁定读 对于 一致性非锁定读（Consistent Nonlocking Reads） 的实现，通常做法是加一个版本号或者时间戳字段，在更新数据的同时版本号 + 1 或者更新时间戳。查询时，将当前可见的版本号与对应记录的版本号进行比对，如果记录的版本小于可见版本，则表示该记录可见 在 InnoDB 存储引擎中，多版本控制 (m","date":"2020-12-21T00:00:00.000Z","localizedDate":"2020年12月21日","category":["数据库"],"tag":["MySQL"]},["/code/java/database/mysql/innodb-implementation-of-mvcc","/code/java/database/mysql/innodb-implementation-of-mvcc.md"]],
  ["v-47dbb7e9","/code/java/database/mysql/mysql-high-performance-optimization-specification-recommendations.html",{"title":"MySQL高性能优化规范建议","type":"article","readingTime":{"minutes":17.08,"words":5124},"excerpt":"\" 作者: 听风，原文地址: 。JavaGuide 已获得作者授权。\" 数据库命令规范\r所有数据库对象名称必须使用小写字母并用下划线分割; \r所有数据库对象名称禁止使用 MySQL 保留关键字（如果表名中包含关键字查询时，需要将其用单引号括起来）; \r数据库对象的命名要能做到见名识意，并且最后不要超过 32 个字符; \r临时库表必须以 tmp为前缀并以日期为","date":"2020-12-21T00:00:00.000Z","localizedDate":"2020年12月21日","category":["数据库"],"tag":["MySQL"]},["/code/java/database/mysql/mysql-high-performance-optimization-specification-recommendations","/code/java/database/mysql/mysql-high-performance-optimization-specification-recommendations.md"]],
  ["v-8aa92b62","/code/java/database/mysql/mysql-index.html",{"title":"MySQL索引详解","type":"article","readingTime":{"minutes":14.73,"words":4420},"excerpt":"\" 感谢WT-AHA对本文的完善，相关 PR：https://github.com/Snailclimb/JavaGuide/pull/1648 。\" 何为索引？有什么作用？ 索引是一种用于快速查询和检索数据的数据结构。常见的索引结构有: B 树， B+树和 Hash。 索引的作用就相当于书的目录。打个比方: 我们在查字典的时候，如果没有目录，那我们就只能一","date":"2020-12-21T00:00:00.000Z","localizedDate":"2020年12月21日","category":["数据库"],"tag":["MySQL"]},["/code/java/database/mysql/mysql-index","/code/java/database/mysql/mysql-index.md"]],
  ["v-406b1082","/code/java/database/mysql/mysql-logs.html",{"title":"MySQL三大日志(binlog、redo log和undo log)详解","type":"article","readingTime":{"minutes":12.55,"words":3765},"excerpt":"前言 MySQL 日志 主要包括错误日志、查询日志、慢查询日志、事务日志、二进制日志几大类。其中，比较重要的还要属二进制日志 binlog（归档日志）和事务日志 redo log（重做日志）和 undo log（回滚日志）。 今天就来聊聊 redo log（重做日志）、binlog（归档日志）、两阶段提交、undo log （回滚日志）。 redo log ","date":"2020-12-21T00:00:00.000Z","localizedDate":"2020年12月21日","category":["数据库"],"tag":["MySQL"]},["/code/java/database/mysql/mysql-logs","/code/java/database/mysql/mysql-logs.md"]],
  ["v-3d6e42f0","/code/java/database/mysql/mysql-questions-01.html",{"title":"MySQL知识点&面试题总结","type":"article","readingTime":{"minutes":22.27,"words":6682},"excerpt":"MySQL 基础 关系型数据库介绍 顾名思义，关系型数据库就是一种建立在关系模型的基础上的数据库。关系模型表明了数据库中所存储的数据之间的联系（一对一、一对多、多对多）。 关系型数据库中，我们的数据都被存放在了各种表中（比如用户表），表中的每一行就存放着一条数据（比如一个用户的信息）。 大部分关系型数据库都使用 SQL 来操作数据库中的数据。并且，大部分关系","date":"2020-12-21T00:00:00.000Z","localizedDate":"2020年12月21日","category":["数据库"],"tag":["MySQL","大厂面试"]},["/code/java/database/mysql/mysql-questions-01","/code/java/database/mysql/mysql-questions-01.md"]],
  ["v-5d1d4cff","/code/java/database/mysql/some-thoughts-on-database-storage-time.html",{"title":"MySQL数据库时间类型数据存储建议","type":"article","readingTime":{"minutes":5.44,"words":1631},"excerpt":"我们平时开发中不可避免的就是要存储时间，比如我们要记录操作表中这条记录的时间、记录转账的交易时间、记录出发时间等等。你会发现时间这个东西与我们开发的联系还是非常紧密的，用的好与不好会给我们的业务甚至功能带来很大的影响。所以，我们有必要重新出发，好好认识一下这个东西。 这是一篇短小精悍的文章，仔细阅读一定能学到不少东西！ 1.切记不要用字符串存储日期 我记得我","date":"2020-12-21T00:00:00.000Z","localizedDate":"2020年12月21日","category":["数据库"],"tag":["MySQL"]},["/code/java/database/mysql/some-thoughts-on-database-storage-time","/code/java/database/mysql/some-thoughts-on-database-storage-time.md"]],
  ["v-0ffe16c0","/code/java/database/mysql/transaction-isolation-level.html",{"title":"MySQL事务隔离级别详解","type":"article","readingTime":{"minutes":8.87,"words":2661},"excerpt":"\" 本文由 SnailClimb 和 guang19 共同完成。\" 事务隔离级别(图文详解) 什么是事务? 事务是逻辑上的一组操作，要么都执行，要么都不执行。 事务最经典也经常被拿出来说例子就是转账了。假如小明要给小红转账 1000 元，这个转账会涉及到两个关键操作就是：将小明的余额减少 1000 元，将小红的余额增加 1000 元。万一在这两个操作之间突然","date":"2020-12-21T00:00:00.000Z","localizedDate":"2020年12月21日","category":["数据库"],"tag":["MySQL"]},["/code/java/database/mysql/transaction-isolation-level","/code/java/database/mysql/transaction-isolation-level.md"]],
  ["v-58f2155e","/code/java/database/redis/3-commonly-used-cache-read-and-write-strategies.html",{"title":"3种常用的缓存读写策略详解","type":"article","readingTime":{"minutes":5.69,"words":1708},"excerpt":"看到很多小伙伴简历上写了“熟练使用缓存”，但是被我问到“缓存常用的3种读写策略”的时候却一脸懵逼。 在我看来，造成这个问题的原因是我们在学习 Redis 的时候，可能只是简单了写一些 Demo，并没有去关注缓存的读写策略，或者说压根不知道这回事。 但是，搞懂3种常见的缓存读写策略对于实际工作中使用缓存以及面试中被问到缓存都是非常有帮助的！ 下面我会简单介绍一","date":"2021-11-18T00:00:00.000Z","localizedDate":"2021年11月18日","category":["数据库"],"tag":["Redis"]},["/code/java/database/redis/3-commonly-used-cache-read-and-write-strategies","/code/java/database/redis/3-commonly-used-cache-read-and-write-strategies.md"]],
  ["v-38760a41","/code/java/database/redis/redis-basic.html",{"title":"Redis 基础","type":"article","readingTime":{"minutes":7.32,"words":2196},"excerpt":"Redis 基础 Redis简介\r\" Redis是一个开源的，基于内存的数据结构存储，可用作于数据库、缓存、消息中间件。\"\r\" \" 大家好，我是咖飞。接下来以笔记的方式熟悉下Redis常见基础知识点。 为什么要用 Redis 无论Redis也好、MySQL也好、HDFS也好、HBase也好，他们都是用来存储数据的地方。也因为它们的设计理念的不同，我们在使用时","date":"2022-03-26T00:00:00.000Z","localizedDate":"2022年3月26日","category":["redis"]},["/code/java/database/redis/redis-basic","/code/java/database/redis/redis-basic.md"]],
  ["v-bd42304e","/code/java/database/redis/redis-data.html",{"title":"Redis 持久化","type":"article","readingTime":{"minutes":13.78,"words":4134},"excerpt":"Redis持久化 简介 由上一篇Redis基础中我们已经知道了，Redis 的数据操作都是基于内存的。假设我们没有其他备份的方法，一旦 Redis 服务器重启或者宕机，那内存中的数据就会全部丢失。所以需要有一套机制保证数据不会因各种突发情况丢失，自然，Redis 给我们提供了相应的持久化机制，分别是RDB和AOF。保证内存中的数据能保存到磁盘。 什么是RDB","date":"2022-03-26T00:00:00.000Z","localizedDate":"2022年3月26日","category":["redis"]},["/code/java/database/redis/redis-data","/code/java/database/redis/redis-data.md"]],
  ["v-6de4140b","/code/java/database/redis/redis-highAvailability-combat.html",{"title":"Redis 高可用实践","type":"article","readingTime":{"minutes":29.59,"words":8876},"excerpt":"Redis 高可用实践 Redis安装及高可用 1.安装及配置 Redis 官网： https://redis.io/ Redis 中文网（更新比较慢）： http://www.redis.cn/ 1.1 安装 以centos7为例 1.2 修改配置 需要修改redis.conf,初始化可以修改下面几项，其他根据需求调整 内核参数配置 也可以根据日志中的警告","date":"2022-03-27T00:00:00.000Z","localizedDate":"2022年3月27日","category":["redis"]},["/code/java/database/redis/redis-highAvailability-combat","/code/java/database/redis/redis-highAvailability-combat.md"]],
  ["v-77a77446","/code/java/database/redis/redis-highAvailability.html",{"title":"Redis 高可用","type":"article","readingTime":{"minutes":11.62,"words":3486},"excerpt":"Redis高可用 前言 Redis 作为一种高性能的内存数据库，普遍用于目前主流的分布式架构系统中。为了提高系统的容错率，使用多实例的 Redis 也是必不可免的，当然，随之而来的就是高可用问题，市面上也出现了一些高可用方案。今天，咖飞就带大家来学习下常见的几种方案是如何来保证高可用的。 高可用机制 Redis 的高可用从总体上来讲是通过 冗余 + 故障转移","date":"2022-03-27T00:00:00.000Z","localizedDate":"2022年3月27日","category":["redis"]},["/code/java/database/redis/redis-highAvailability","/code/java/database/redis/redis-highAvailability.md"]],
  ["v-c4df73ec","/code/java/database/redis/redis-memory-fragmentation.html",{"title":"Redis 内存碎片详解","type":"article","readingTime":{"minutes":4.76,"words":1428},"excerpt":"什么是内存碎片? 你可以将内存碎片简单地理解为那些不可用的空闲内存。 举个例子：操作系统为你分配了 32 字节的连续内存空间，而你存储数据实际只需要使用 24 字节内存空间，那这多余出来的 8 字节内存空间如果后续没办法再被分配存储其他数据的话，就可以被称为内存碎片。 Redis 内存碎片虽然不会影响 Redis 性能，但是会增加内存消耗。 为什么会有 Re","date":"2021-11-18T00:00:00.000Z","localizedDate":"2021年11月18日","category":["redis"],"tag":["Redis"]},["/code/java/database/redis/redis-memory-fragmentation","/code/java/database/redis/redis-memory-fragmentation.md"]],
  ["v-0499ad62","/code/java/database/redis/redis-questions-01.html",{"title":"Redis 知识点&面试题总结","type":"article","readingTime":{"minutes":41.1,"words":12331},"excerpt":"Redis 基础 简单介绍一下 Redis! 简单来说 Redis 就是一个使用 C 语言开发的数据库，不过与传统数据库不同的是 Redis 的数据是存在内存中的 ，也就是它是内存数据库，所以读写速度非常快，因此 Redis 被广泛应用于缓存方向。 另外，Redis 除了做缓存之外，也经常用来做分布式锁，甚至是消息队列。 Redis 提供了多种数据类型来支持","date":"2021-11-18T00:00:00.000Z","localizedDate":"2021年11月18日","category":["redis"],"tag":["Redis"]},["/code/java/database/redis/redis-questions-01","/code/java/database/redis/redis-questions-01.md"]],
  ["v-632c6557","/code/java/distributed-system/rpc/dubbo.html",{"title":"Dubbo知识点&面试题总结","icon":"rpc","type":"article","readingTime":{"minutes":22.62,"words":6787},"excerpt":"Dubbo知识点&面试题总结 这篇文章是我根据官方文档以及自己平时的使用情况，对 Dubbo 所做的一个总结。欢迎补充！ RPC基础 何为 RPC? RPC（Remote Procedure Call） 即远程过程调用，通过名字我们就能看出 RPC 关注的是远程调用而非本地调用。 为什么要 RPC ？ 因为，两个不同的服务器上的服务提供的方法不在一个内存空间","date":"2020-11-29T00:00:00.000Z","localizedDate":"2020年11月29日"},["/code/java/distributed-system/rpc/dubbo","/code/java/distributed-system/rpc/dubbo.md"]],
  ["v-13e5643b","/code/java/distributed-system/rpc/why-use-rpc.html",{"title":"服务之间的调用为啥不直接用 HTTP 而用 RPC？","type":"article","readingTime":{"minutes":5.59,"words":1678},"excerpt":"服务之间的调用为啥不直接用 HTTP 而用 RPC？ 什么是 RPC?RPC原理是什么? 什么是 RPC？ RPC（Remote Procedure Call）—远程过程调用，它是一种通过网络从远程计算机程序上请求服务，而不需要了解底层网络技术的协议。比如两个不同的服务 A、B 部署在两台不同的机器上，那么服务 A 如果想要调用服务 B 中的某个方法该怎么办","date":"2021-11-18T00:00:00.000Z","localizedDate":"2021年11月18日","category":["f分布式"]},["/code/java/distributed-system/rpc/why-use-rpc","/code/java/distributed-system/rpc/why-use-rpc.md"]],
  ["v-165895e1","/code/java/distributed-system/theorem&algorithm&protocol/cap&base-theorem.html",{"title":"CAP & BASE理论","type":"article","readingTime":{"minutes":10.25,"words":3075},"excerpt":"经历过技术面试的小伙伴想必对这个两个概念已经再熟悉不过了！ 当年参加面试的时候，不夸张地说，只要问到分布式相关的内容，面试官几乎是必定会问这两个分布式相关的理论。 并且，这两个理论也可以说是小伙伴们学习分布式相关内容的基础了！ 因此，小伙伴们非常非常有必要将这理论搞懂，并且能够用自己的理解给别人讲出来。 这篇文章我会站在自己的角度对这两个概念进行解读！ 个人","date":"2021-03-18T00:00:00.000Z","localizedDate":"2021年3月18日","category":["分布式"],"tag":["分布式协议&算法"]},["/code/java/distributed-system/theorem&algorithm&protocol/cap&base-theorem","/code/java/distributed-system/theorem&algorithm&protocol/cap&base-theorem.md"]],
  ["v-7396a8a6","/code/java/distributed-system/theorem&algorithm&protocol/gossip.html",{"title":"Gossip 协议介绍","icon":"分布式","type":"article","readingTime":{"minutes":7.23,"words":2169},"excerpt":"背景 在分布式系统中，不同的节点进行数据/信息共享是一个基本的需求。 一种比较简单粗暴的方法就是 集中式发散消息，简单来说就是一个主节点同时共享最新信息给其他所有节点，比较适合中心化系统。这种方法的缺陷也很明显，节点多的时候不光同步消息的效率低，还太依赖与中心节点，存在单点风险问题。 于是，分散式发散消息 的 Gossip 协议 就诞生了。 Gossip 协","date":"2020-11-30T00:00:00.000Z","localizedDate":"2020年11月30日"},["/code/java/distributed-system/theorem&algorithm&protocol/gossip","/code/java/distributed-system/theorem&algorithm&protocol/gossip.md"]],
  ["v-2e1ff0a0","/code/java/distributed-system/theorem&algorithm&protocol/paxos-algorithm.html",{"title":"Paxos 算法","type":"article","readingTime":{"minutes":5.03,"words":1510},"excerpt":"背景 Paxos 算法介绍 Paxos 算法是 Leslie Lamport（莱斯利·兰伯特）在 1990 年提出了一种分布式系统 共识 算法。这也是第一个被证明完备的共识算法（前提是不存在拜占庭将军问题，也就是没有恶意节点）。 为了介绍 Paxos 算法，兰伯特专门写了一篇幽默风趣的论文。在这篇论文中，他虚拟了一个叫做 Paxos 的希腊城邦来更形象化地介","date":"2020-11-30T00:00:00.000Z","localizedDate":"2020年11月30日","category":["分布式"],"tag":["分布式协议&算法"]},["/code/java/distributed-system/theorem&algorithm&protocol/paxos-algorithm","/code/java/distributed-system/theorem&algorithm&protocol/paxos-algorithm.md"]],
  ["v-472a9536","/code/java/distributed-system/theorem&algorithm&protocol/raft-algorithm.html",{"title":"Raft 算法","type":"article","readingTime":{"minutes":12.15,"words":3645},"excerpt":"\" 本文由 SnailClimb 和 Xieqijun 共同完成。\" 1 背景 当今的数据中心和应用程序在高度动态的环境中运行，为了应对高度动态的环境，它们通过额外的服务器进行横向扩展，并且根据需求进行扩展和收缩。同时，服务器和网络故障也很常见。 因此，系统必须在正常操作期间处理服务器的上下线。它们必须对变故做出反应并在几秒钟内自动适应；对客户来说的话，明显","date":"2020-11-30T00:00:00.000Z","localizedDate":"2020年11月30日","category":["分布式"],"tag":["分布式协议&算法"]},["/code/java/distributed-system/theorem&algorithm&protocol/raft-algorithm","/code/java/distributed-system/theorem&algorithm&protocol/raft-algorithm.md"]],
  ["v-8da27fb2","/code/java/high-performance/message-queue/kafka-questions-01.html",{"title":"Kafka知识点&面试题总结","type":"article","readingTime":{"minutes":15.67,"words":4700},"excerpt":"Kafka知识点&面试题总结 Kafka 是什么？主要应用场景有哪些？ Kafka 是一个分布式流式处理平台。这到底是什么意思呢？ 流平台具有三个关键功能： 1. 消息队列：发布和订阅消息流，这个功能类似于消息队列，这也是 Kafka 也被归类为消息队列的原因。 2. 容错的持久方式存储记录消息流： Kafka 会把消息持久化到磁盘，有效避免了消息丢失的风险","date":"2021-04-22T00:00:00.000Z","localizedDate":"2021年4月22日","category":["MQ"]},["/code/java/high-performance/message-queue/kafka-questions-01","/code/java/high-performance/message-queue/kafka-questions-01.md"]],
  ["v-e57e0bd0","/code/java/high-performance/message-queue/message-queue.html",{"title":"消息队列知识点&面试题总结","type":"article","readingTime":{"minutes":11.94,"words":3583},"excerpt":"消息队列知识点&面试题总结 “RabbitMQ？”“Kafka？”“RocketMQ？”...在日常学习与开发过程中，我们常常听到消息队列这个关键词。我也在我的多篇文章中提到了这个概念。可能你是熟练使用消息队列的老手，又或者你是不懂消息队列的新手，不论你了不了解消息队列，本文都将带你搞懂消息队列的一些基本理论。如果你是老手，你可能从本文学到你之前不曾注意的一","date":"2021-04-22T00:00:00.000Z","localizedDate":"2021年4月22日","category":["MQ"]},["/code/java/high-performance/message-queue/message-queue","/code/java/high-performance/message-queue/message-queue.md"]],
  ["v-671526f2","/code/java/high-performance/message-queue/rabbitmq-intro.html",{"title":"RabbitMQ 入门总结","type":"article","readingTime":{"minutes":11.87,"words":3562},"excerpt":"RabbitMQ 入门总结 一 RabbitMQ 介绍 这部分参考了 《RabbitMQ实战指南》这本书的第 1 章和第 2 章。 1.1 RabbitMQ 简介 RabbitMQ 是采用 Erlang 语言实现 AMQP(Advanced Message Queuing Protocol，高级消息队列协议）的消息中间件，它最初起源于金融系统，用于在分布式系","date":"2021-04-22T00:00:00.000Z","localizedDate":"2021年4月22日","category":["MQ"]},["/code/java/high-performance/message-queue/rabbitmq-intro","/code/java/high-performance/message-queue/rabbitmq-intro.md"]],
  ["v-0326f310","/code/java/high-performance/message-queue/rocketmq-intro.html",{"title":"RocketMQ 入门总结","type":"article","readingTime":{"minutes":39.31,"words":11794},"excerpt":"RocketMQ 入门总结\r\" 文章很长，点赞再看，养成好习惯😋😋😋\"\r\"\"\r\" 本文由 FrancisQ 老哥投稿！\" 消息队列扫盲 消息队列顾名思义就是存放消息的队列，队列我就不解释了，别告诉我你连队列都不知道是啥吧？ 所以问题并不是消息队列是什么，而是 消息队列为什么会出现？消息队列能用来干什么？用它来干这些事会带来什么好处？消息队列会带来副作用","date":"2021-04-22T00:00:00.000Z","localizedDate":"2021年4月22日","category":["MQ"]},["/code/java/high-performance/message-queue/rocketmq-intro","/code/java/high-performance/message-queue/rocketmq-intro.md"]],
  ["v-d15fda92","/code/java/high-performance/message-queue/rocketmq-questions.html",{"title":"RocketMQ 常见问题","type":"article","readingTime":{"minutes":8.31,"words":2492},"excerpt":"RocketMQ常见问题 本文来自读者 PR。 1 单机版消息中心 一个消息中心，最基本的需要支持多生产者、多消费者，例如下： 问题： 1. 没有实现真正执行消息存储落盘 2. 没有实现 NameServer 去作为注册中心，定位服务 3. 使用 LinkedBlockingQueue 作为消息队列，注意，参数是无限大，在真正 RocketMQ 也是如此是无","date":"2021-04-22T00:00:00.000Z","localizedDate":"2021年4月22日","category":["MQ"]},["/code/java/high-performance/message-queue/rocketmq-questions","/code/java/high-performance/message-queue/rocketmq-questions.md"]],
  ["v-647bc2e6","/code/java/high-quality-technical-articles/advanced-programmer/seven-tips-for-becoming-an-advanced-programmer.html",{"title":"给想成长为高级别开发同学的七条建议","type":"article","readingTime":{"minutes":7.86,"words":2359},"excerpt":"\" 推荐语 ：普通程序员要想成长为高级程序员甚至是专家等更高级别，应该注意在哪些方面注意加强？开发内功修炼号主飞哥在这篇文章中就给出了七条实用的建议。\"\r\"\"\r\" 内容概览 ：\"\r\"\"\r\" 1. 刻意加强需求评审能力\"\r\" 2. 主动思考效率\"\r\" 3. 加强内功能力\"\r\" 4. 思考性能\"\r\" 5. 重视线上\"\r\" 6. 关注全局\"\r\" 7. 归纳总结能力","date":"2021-04-29T00:00:00.000Z","localizedDate":"2021年4月29日","category":["技术文章精选集"],"tag":["练级攻略"]},["/code/java/high-quality-technical-articles/advanced-programmer/seven-tips-for-becoming-an-advanced-programmer","/code/java/high-quality-technical-articles/advanced-programmer/seven-tips-for-becoming-an-advanced-programmer.md"]],
  ["v-aada865e","/code/java/high-quality-technical-articles/interview/screen-candidates-for-packaging.html",{"title":"包装严重的IT行业，作为面试官，我是如何甄别应聘者的包装程度","type":"article","readingTime":{"minutes":10.12,"words":3036},"excerpt":"\" 推荐语 ：经常听到培训班待过的朋友给我说他们的老师是怎么教他们“包装”自己的，不光是培训班，我认识的很多朋友也都会在面试之前“包装”一下自己，所以这个现象是普遍存在的。但是面试官也不都是傻子，通过下面这篇文章来看看面试官是如何甄别应聘者的包装程度。\"\r\"\"\r\" 原文地址 ： https://my.oschina.net/hooker/blog/30146","date":"2021-04-29T00:00:00.000Z","localizedDate":"2021年4月29日","category":["技术文章精选集"],"tag":["面试"]},["/code/java/high-quality-technical-articles/interview/screen-candidates-for-packaging","/code/java/high-quality-technical-articles/interview/screen-candidates-for-packaging.md"]],
  ["v-c26b4db8","/code/java/high-quality-technical-articles/interview/technical-preliminary-preparation.html",{"title":"从面试官和候选者的角度谈如何准备技术初试","type":"article","readingTime":{"minutes":13.6,"words":4079},"excerpt":"\" 推荐语 ： 从面试官和面试者两个角度探讨了技术面试！非常不错！\"\r\"\"\r\" 内容概览：\"\r\"\"\r\" - 通过技术基础考察候选者，才能考察到候选者的真实技术实力：技术深度和广度。\"\r\" - 实战与理论结合。比如，候选人叙述 JVM 内存模型布局之后，可以接着问：有哪些原因可能会导致 OOM , 有哪些预防措施? 你是否遇到过内存泄露的问题? 如何排查和解决","date":"2021-04-29T00:00:00.000Z","localizedDate":"2021年4月29日","category":["技术文章精选集"],"tag":["面试"]},["/code/java/high-quality-technical-articles/interview/technical-preliminary-preparation","/code/java/high-quality-technical-articles/interview/technical-preliminary-preparation.md"]],
  ["v-2feb7b1c","/code/java/high-quality-technical-articles/interview/the-experience-and-thinking-of-an-interview-experienced-by-an-older-programmer.html",{"title":"一位大龄程序员所经历的面试的历炼和思考","type":"article","readingTime":{"minutes":35.67,"words":10700},"excerpt":"\" 推荐语 ：本文的作者，今年 36 岁，已有 8 年 JAVA 开发经验。在阿里云三年半，有赞四年半，已是标准的大龄程序员了。在这篇文章中，作者给出了一些关于面试和个人能力提升的一些小建议，非常实用！\"\r\"\"\r\" 内容概览 ：\"\r\"\"\r\" 1. 个人介绍，是对自己的一个更为清晰、深入和全面的认识契机。\"\r\"2. 简历是充分展示自己的浓缩精华，也是重新审视自","date":"2021-04-29T00:00:00.000Z","localizedDate":"2021年4月29日","category":["技术文章精选集"],"tag":["面试"]},["/code/java/high-quality-technical-articles/interview/the-experience-and-thinking-of-an-interview-experienced-by-an-older-programmer","/code/java/high-quality-technical-articles/interview/the-experience-and-thinking-of-an-interview-experienced-by-an-older-programmer.md"]],
  ["v-3ed8656e","/code/java/high-quality-technical-articles/personal-experience/8-years-programmer-work-summary.html",{"title":"一个中科大差生的 8 年程序员工作总结","type":"article","readingTime":{"minutes":34.54,"words":10361},"excerpt":"\" 推荐语 ：这篇文章讲述了一位中科大的朋友 8 年的经历：从 2013 年毕业之后加入上海航天 x 院某卫星研究所，再到入职华为，从华为离职。除了丰富的经历之外，作者在文章还给出了很多自己对于工作/生活的思考。我觉得非常受用！我在这里，向这位作者表达一下衷心的感谢。\"\r\"\"\r\" 原文地址 ：https://www.cnblogs.com/scada/p/1","date":"2021-04-29T00:00:00.000Z","localizedDate":"2021年4月29日","category":["技术文章精选集"],"tag":["个人经历"]},["/code/java/high-quality-technical-articles/personal-experience/8-years-programmer-work-summary","/code/java/high-quality-technical-articles/personal-experience/8-years-programmer-work-summary.md"]],
  ["v-7137fd96","/code/java/high-quality-technical-articles/personal-experience/two-years-of-back-end-develop--experience-in-didi&toutiao.html",{"title":"我在滴滴和头条的两年后端研发工作经验分享","type":"article","readingTime":{"minutes":21.3,"words":6390},"excerpt":"\" 推荐语 ：很实用的工作经验分享，看完之后十分受用！\"\r\"\"\r\" 内容概览 ：\"\r\"\"\r\" - 要学会深入思考，总结沉淀，这是我觉得最重要也是最有意义的一件事。\"\r\" - 积极学习，保持技术热情。如果我们积极学习，保持技术能力、知识储备与工作年限成正比，这到了 35 岁哪还有什么焦虑呢，这样的大牛我觉得应该也是各大公司抢着要吧？\"\r\" - 在能为公司办成事","date":"2021-04-29T00:00:00.000Z","localizedDate":"2021年4月29日","category":["技术文章精选集"],"tag":["个人经历"]},["/code/java/high-quality-technical-articles/personal-experience/two-years-of-back-end-develop--experience-in-didi&toutiao","/code/java/high-quality-technical-articles/personal-experience/two-years-of-back-end-develop--experience-in-didi&toutiao.md"]],
  ["v-2ed279aa","/code/java/high-quality-technical-articles/programmer/efficient-book-publishing-and-practice-guide.html",{"title":"程序员高效出书避坑和实践指南","type":"article","readingTime":{"minutes":21.16,"words":6349},"excerpt":"\" 推荐语 ：详细介绍了程序员出书的一些常见问题，强烈建议有出书想法的朋友看看这篇文章。\"\r\"\"\r\" \"\r\"\"\r\" 原文地址 ：https://www.cnblogs.com/JavaArchitect/p/14128202.html\" 古有三不朽， 所谓立德、立功、立言。程序员出一本属于自己的书，如果说是立言，可能过于高大上，但终究也算一件雅事。 出书其实","date":"2021-04-29T00:00:00.000Z","localizedDate":"2021年4月29日","category":["技术文章精选集"],"tag":["程序员"]},["/code/java/high-quality-technical-articles/programmer/efficient-book-publishing-and-practice-guide","/code/java/high-quality-technical-articles/programmer/efficient-book-publishing-and-practice-guide.md"]],
  ["v-6e74a08d","/code/java/high-quality-technical-articles/programmer/how-do-programmers-publish-a-technical-book.html",{"title":"程序员怎样出版一本技术书","type":"article","readingTime":{"minutes":12.34,"words":3701},"excerpt":"\" 推荐语 ：详细介绍了程序员应该如何从头开始出一本自己的书籍。\"\r\"\"\r\" \"\r\"\"\r\" 原文地址 ：https://www.cnblogs.com/JavaArchitect/p/12195219.html\" 在面试或联系副业的时候，如果能令人信服地证明自己的实力，那么很有可能事半功倍。如何证明自己的实力？最有信服力的是大公司职位背景背书，没有之一，比如","date":"2021-04-29T00:00:00.000Z","localizedDate":"2021年4月29日","category":["技术文章精选集"],"tag":["程序员"]},["/code/java/high-quality-technical-articles/programmer/how-do-programmers-publish-a-technical-book","/code/java/high-quality-technical-articles/programmer/how-do-programmers-publish-a-technical-book.md"]],
  ["v-e700c692","/code/java/high-quality-technical-articles/work/employee-performance.html",{"title":"聊聊大厂的绩效考核","type":"article","readingTime":{"minutes":8.04,"words":2411},"excerpt":"\" 内容概览 ：\"\r\"\"\r\" - 在大部分公司，绩效跟你的年终奖、职级晋升、薪水涨幅等等福利是直接相关的。\"\r\" - 你的上级、上上级对你的绩效拥有绝对的话语权，这是潜规则，放到任何公司都是。成年人的世界，没有绝对的公平，绩效考核尤为明显。\"\r\" - 提升绩效的打法：\"\r\" - 短期打法：找出 1-2 件事，体现出你的独特价值（抓关键事件）。\"\r\" - 长期","date":"2021-04-29T00:00:00.000Z","localizedDate":"2021年4月29日","category":["技术文章精选集"],"tag":["工作"]},["/code/java/high-quality-technical-articles/work/employee-performance","/code/java/high-quality-technical-articles/work/employee-performance.md"]],
  ["v-1c2e4cb0","/code/java/high-quality-technical-articles/work/get-into-work-mode-quickly-when-you-join-a-company.html",{"title":"新入职一家公司如何快速进入工作状态","type":"article","readingTime":{"minutes":9.82,"words":2946},"excerpt":"\" 推荐语 ：强烈建议每一位即将入职/在职的小伙伴看看这篇文章，看完之后可以帮助你少踩很多坑。整篇文章逻辑清晰，内容全面！\"\r\"\"\r\" \"\r\"\"\r\" 原文地址 ：https://www.cnblogs.com/hunternet/p/14675348.html\" 一年一度的金三银四跳槽大戏即将落幕，相信很多跳槽的小伙伴们已经找到了心仪的工作，即将或已经有了新","date":"2021-04-29T00:00:00.000Z","localizedDate":"2021年4月29日","category":["技术文章精选集"],"tag":["工作"]},["/code/java/high-quality-technical-articles/work/get-into-work-mode-quickly-when-you-join-a-company","/code/java/high-quality-technical-articles/work/get-into-work-mode-quickly-when-you-join-a-company.md"]],
  ["v-530158d9","/code/java/system-design/basic/naming.html",{"title":"命名","type":"article","readingTime":{"minutes":7.55,"words":2266},"excerpt":"我还记得我刚工作那一段时间， 项目 Code Review 的时候，我经常因为变量命名不规范而被 “diss”! 究其原因还是自己那会经验不足，而且，大学那会写项目的时候不太注意这些问题，想着只要把功能实现出来就行了。 但是，工作中就不一样，为了代码的可读性、可维护性，项目组对于代码质量的要求还是很高的！ 前段时间，项目组新来的一个实习生也经常在 Code ","date":"2021-05-03T00:00:00.000Z","localizedDate":"2021年5月3日","category":["代码质量"]},["/code/java/system-design/basic/naming","/code/java/system-design/basic/naming.md"]],
  ["v-13a50af1","/code/java/system-design/basic/refactoring.html",{"title":"重构","type":"article","readingTime":{"minutes":8.22,"words":2466},"excerpt":"前段时间重读了《重构：改善代码既有设计》，收货颇多。于是，简单写了一篇文章来聊聊我对重构的看法。 何谓重构？ 学习重构必看的一本神书《重构：改善代码既有设计》从两个角度给出了重构的定义：\r\" - 重构（名词）：对软件内部结构的一种调整，目的是在不改变软件可观察行为的前提下，提高其可理解性，降低其修改成本。\"\r\" - 重构（动词）：使用一系列重构手法，在不改变","date":"2021-05-03T00:00:00.000Z","localizedDate":"2021年5月3日","category":["代码质量"]},["/code/java/system-design/basic/refactoring","/code/java/system-design/basic/refactoring.md"]],
  ["v-f6fee260","/code/java/system-design/basic/RESTfulAPI.html",{"title":"RestFul API","type":"article","readingTime":{"minutes":8.44,"words":2533},"excerpt":"大家好，我是咖飞！ 这篇文章简单聊聊后端程序员必备的 RESTful API 相关的知识。 开始正式介绍 RESTful API 之前，我们需要首先搞清 ：API 到底是什么？ 何为 API？ API（Application Programming Interface） 翻译过来是应用程序编程接口的意思。 我们在进行后端开发的时候，主要的工作就是为前端或者其","date":"2021-05-03T00:00:00.000Z","localizedDate":"2021年5月3日","category":["代码质量"]},["/code/java/system-design/basic/RESTfulAPI","/code/java/system-design/basic/RESTfulAPI.md"]],
  ["v-53c95d42","/code/java/system-design/framework/netty.html",{"title":"Netty 知识点&面试题总结","type":"article","readingTime":{"minutes":0.08,"words":24},"excerpt":"Netty 相关的面试题","date":"2021-05-16T00:00:00.000Z","localizedDate":"2021年5月16日","category":["框架"]},["/code/java/system-design/framework/netty","/code/java/system-design/framework/netty.md"]],
  ["v-78a4b12b","/code/java/system-design/security/advantages&disadvantages-of-jwt.html",{"title":"JWT 身份认证优缺点分析","type":"article","readingTime":{"minutes":10.15,"words":3046},"excerpt":"在 JWT 基本概念详解这篇文章中，我介绍了：\r什么是 JWT?; \rJWT 由哪些部分组成？; \r如何基于 JWT 进行身份验证？; \rJWT 如何防止 Token 被篡改？; \r如何加强 JWT 的安全性？; 这篇文章，我们一起探讨一下 JWT 身份认证的优缺点以及常见问题的解决办法。 JWT 的优势 相比于 Session 认证的方式来说，使用 JWT","date":"2021-05-21T00:00:00.000Z","localizedDate":"2021年5月21日","category":["系统设计"],"tag":["安全"]},["/code/java/system-design/security/advantages&disadvantages-of-jwt","/code/java/system-design/security/advantages&disadvantages-of-jwt.md"]],
  ["v-5add8210","/code/java/system-design/security/basis-of-authority-certification.html",{"title":"认证授权基础","type":"article","readingTime":{"minutes":13.61,"words":4084},"excerpt":"认证 (Authentication) 和授权 (Authorization)的区别是什么？ 这是一个绝大多数人都会混淆的问题。首先先从读音上来认识这两个名词，很多人都会把它俩的读音搞混，所以我建议你先先去查一查这两个单词到底该怎么读，他们的具体含义是什么。 说简单点就是：\r认证 (Authentication)： 你是谁。; \r授权 (Authorizat","date":"2021-05-21T00:00:00.000Z","localizedDate":"2021年5月21日","category":["系统设计"],"tag":["安全"]},["/code/java/system-design/security/basis-of-authority-certification","/code/java/system-design/security/basis-of-authority-certification.md"]],
  ["v-33633eba","/code/java/system-design/security/data-desensitization.html",{"title":"数据脱敏","type":"article","readingTime":{"minutes":0.22,"words":66},"excerpt":"数据脱敏说的就是我们根据特定的规则对敏感信息数据进行变形，比如我们把手机号、身份证号某些位数使用 * 来代替。","date":"2021-05-21T00:00:00.000Z","localizedDate":"2021年5月21日","category":["系统设计"],"tag":["安全"]},["/code/java/system-design/security/data-desensitization","/code/java/system-design/security/data-desensitization.md"]],
  ["v-ba921aea","/code/java/system-design/security/jwt-intro.html",{"title":"JWT 基本概念详解","type":"article","readingTime":{"minutes":5.59,"words":1678},"excerpt":"什么是 JWT? JWT （JSON Web Token） 是目前最流行的跨域认证解决方案，是一种基于 Token 的认证授权机制。 从 JWT 的全称可以看出，JWT 本身也是 Token，一种规范化之后的 JSON 结构的 Token。 JWT 自身包含了身份验证所需要的所有信息，因此，我们的服务器不需要存储 Session 信息。这显然增加了系统的可用","date":"2021-05-21T00:00:00.000Z","localizedDate":"2021年5月21日","category":["系统设计"],"tag":["安全"]},["/code/java/system-design/security/jwt-intro","/code/java/system-design/security/jwt-intro.md"]],
  ["v-2a3c9a18","/code/java/system-design/security/sentive-words-filter.html",{"title":"敏感词过滤","type":"article","readingTime":{"minutes":2.8,"words":841},"excerpt":"系统需要对用户输入的文本进行敏感词过滤如色情、政治、暴力相关的词汇。 敏感词过滤用的使用比较多的 Trie 树算法 和 DFA 算法。 算法实现 Trie 树 Trie 树 也称为字典树、单词查找树，哈系树的一种变种，通常被用于字符串匹配，用来解决在一组字符串集合中快速查找某个字符串的问题。像浏览器搜索的关键词提示一般就是基于 Trie 树来做的。 假如我们","date":"2021-05-21T00:00:00.000Z","localizedDate":"2021年5月21日","category":["系统设计"],"tag":["安全"]},["/code/java/system-design/security/sentive-words-filter","/code/java/system-design/security/sentive-words-filter.md"]],
  ["v-9a02977a","/code/java/system-design/security/sso-intro.html",{"title":"SSO 单点登录","type":"article","readingTime":{"minutes":4.64,"words":1391},"excerpt":"\" 本文授权转载自 ： https://ken.io/note/sso-design-implement 作者：ken.io\"\r\"\" 一、前言 1、SSO说明 SSO英文全称Single Sign On，单点登录。SSO是在多个应用系统中，用户只需要登录一次就可以访问所有相互信任的应用系统。https://baike.baidu.com/item/SSO/3","date":"2021-05-21T00:00:00.000Z","localizedDate":"2021年5月21日","category":["系统设计"],"tag":["安全"]},["/code/java/system-design/security/sso-intro","/code/java/system-design/security/sso-intro.md"]],
  ["v-7762db1e","/code/java/tools/docker/docker-in-action.html",{"title":"Docker从入门到上手干事","type":"article","readingTime":{"minutes":16.76,"words":5029},"excerpt":"Docker介绍 什么是 Docker？ 说实话关于 Docker 是什么并不太好说，下面我通过四点向你说明 Docker 到底是个什么东西。\rDocker 是世界领先的软件容器平台，基于 Go 语言 进行开发实现。; \rDocker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放开发人员。; \r用户可以方便地创建和使用容器，把自己的应用放入容器。","date":"2021-05-30T00:00:00.000Z","localizedDate":"2021年5月30日","category":["开发工具"],"tag":["Docker"]},["/code/java/tools/docker/docker-in-action","/code/java/tools/docker/docker-in-action.md"]],
  ["v-70ca97a3","/code/java/tools/docker/docker-intro.html",{"title":"Docker 基本概念解读","type":"article","readingTime":{"minutes":18.24,"words":5472},"excerpt":"本文只是对 Docker 的概念做了较为详细的介绍，并不涉及一些像 Docker 环境的安装以及 Docker 的一些常见操作和命令。 一 认识容器 Docker 是世界领先的软件容器平台，所以想要搞懂 Docker 的概念我们必须先从容器开始说起。 1.1 什么是容器? 先来看看容器较为官方的解释 一句话概括容器：容器就是将软件打包成标准化单元，以用于开发","date":"2021-05-30T00:00:00.000Z","localizedDate":"2021年5月30日","category":["开发工具"],"tag":["Docker"]},["/code/java/tools/docker/docker-intro","/code/java/tools/docker/docker-intro.md"]],
  ["v-8fa4a286","/code/java/tools/git/git-intro.html",{"title":"Git 入门","type":"article","readingTime":{"minutes":11.35,"words":3404},"excerpt":"版本控制 什么是版本控制 版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。 除了项目源代码，你可以对任何类型的文件进行版本控制。 为什么要版本控制 有了它你就可以将某个文件回溯到之前的状态，甚至将整个项目都回退到过去某个时间点的状态，你可以比较文件的变化细节，查出最后是谁修改了哪个地方，从而找出导致怪异问题出现的原因，又是谁在何","date":"2021-05-30T00:00:00.000Z","localizedDate":"2021年5月30日","category":["开发工具"],"tag":["Git"]},["/code/java/tools/git/git-intro","/code/java/tools/git/git-intro.md"]],
  ["v-687251ec","/code/java/tools/git/github-tips.html",{"title":"Github 小技巧","type":"article","readingTime":{"minutes":6.79,"words":2037},"excerpt":"我使用 Github 已经有 6 年多了，今天毫无保留地把自己觉得比较有用的 Github 小技巧送给各位小伙伴。 这篇文章肝了很久，就挺用心的，大家看内容就知道了。 一键生成 Github 简历 & Github 年报 通过 https://resume.github.io/ 这个网站你可以一键生成一个在线的 Github 简历。 当时我参加的校招的时候，","date":"2021-05-30T00:00:00.000Z","localizedDate":"2021年5月30日","category":["开发工具"],"tag":["Git"]},["/code/java/tools/git/github-tips","/code/java/tools/git/github-tips.md"]],
  ["v-29493d59","/code/java/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.html",{"title":"ZooKeeper 实战","icon":"ZooKeeper","type":"article","readingTime":{"minutes":5.86,"words":1759},"excerpt":"ZooKeeper 实战 1. 前言 这篇文章简单给演示一下 ZooKeeper 常见命令的使用以及 ZooKeeper Java客户端 Curator 的基本使用。介绍到的内容都是最基本的操作，能满足日常工作的基本需要。 如果文章有任何需要改善和完善的地方，欢迎在评论区指出，共同进步！ 2. ZooKeeper 安装和使用 2.1. 使用Docker 安装","date":"2020-11-28T00:00:00.000Z","localizedDate":"2020年11月28日"},["/code/java/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action","/code/java/distributed-system/distributed-process-coordination/zookeeper/zookeeper-in-action.md"]],
  ["v-f34212ea","/code/java/distributed-system/distributed-process-coordination/zookeeper/zookeeper-intro.html",{"title":"ZooKeeper 实战","icon":"ZooKeeper","type":"article","readingTime":{"minutes":19.76,"words":5927},"excerpt":"ZooKeeper 相关概念总结(入门) 1. 前言 相信大家对 ZooKeeper 应该不算陌生。但是你真的了解 ZooKeeper 到底有啥用不？如果别人/面试官让你给他讲讲对于 ZooKeeper 的认识，你能回答到什么地步呢？ 拿我自己来说吧！我本人曾经使用 Dubbo 来做分布式项目的时候，使用了 ZooKeeper 作为注册中心。为了保证分布式系","date":"2020-11-28T00:00:00.000Z","localizedDate":"2020年11月28日"},["/code/java/distributed-system/distributed-process-coordination/zookeeper/zookeeper-intro","/code/java/distributed-system/distributed-process-coordination/zookeeper/zookeeper-intro.md"]],
  ["v-6faec1be","/code/java/distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus.html",{"title":"ZooKeeper 实战","icon":"ZooKeeper","type":"article","readingTime":{"minutes":33.67,"words":10101},"excerpt":"ZooKeeper 相关概念总结(进阶)\r\" FrancisQ 投稿。\" 1. 好久不见 离上一篇文章的发布也快一个月了，想想已经快一个月没写东西了，其中可能有期末考试、课程设计和驾照考试，但这都不是借口！ 一到冬天就懒的不行，望广大掘友督促我🙄🙄✍️✍️。\r\" 文章很长，先赞后看，养成习惯。❤️ 🧡 💛 💚 💙 💜\" 2. 什么是ZooKee","date":"2020-11-28T00:00:00.000Z","localizedDate":"2020年11月28日"},["/code/java/distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus","/code/java/distributed-system/distributed-process-coordination/zookeeper/zookeeper-plus.md"]],
  ["v-61daf316","/code/java/system-design/framework/mybatis/mybatis-interview.html",{"title":"MyBatis 常见面试总结","type":"article","readingTime":{"minutes":14.12,"words":4237},"excerpt":"MyBatis 常见面试总结\r\" 本篇文章是收集自网络，原出处不明。\" MyBatis 技术内幕系列博客，从原理和源码角度，介绍了其内部实现细节，无论是写的好与不好，我确实是用心写了，由于并不是介绍如何使用 MyBatis 的文章，所以，一些参数使用细节略掉了，我们的目标是介绍 MyBatis 的技术架构和重要组成部分，以及基本运行原理。 博客写的很辛苦，但","date":"2021-05-03T00:00:00.000Z","localizedDate":"2021年5月3日","category":["interview"]},["/code/java/system-design/framework/mybatis/mybatis-interview","/code/java/system-design/framework/mybatis/mybatis-interview.md"]],
  ["v-e09637f8","/code/java/system-design/framework/spring/spring-boot-auto-assembly-principles.html",{"title":"SpringBoot 自动装配原理详解","type":"article","readingTime":{"minutes":7.55,"words":2266},"excerpt":"每次问到 Spring Boot， 面试官非常喜欢问这个问题：“讲述一下 SpringBoot 自动装配原理？”。 我觉得我们可以从以下几个方面回答： 1. 什么是 SpringBoot 自动装配？ 2. SpringBoot 是如何实现自动装配的？如何实现按需加载？ 3. 如何实现一个 Starter？ 篇幅问题，这篇文章并没有深入，小伙伴们也可以直接使用","date":"2021-05-03T00:00:00.000Z","localizedDate":"2021年5月3日","category":["框架"],"tag":["SpringBoot"]},["/code/java/system-design/framework/spring/spring-boot-auto-assembly-principles","/code/java/system-design/framework/spring/spring-boot-auto-assembly-principles.md"]],
  ["v-264d8331","/code/java/system-design/framework/spring/spring-common-annotations.html",{"title":"Spring&Spring Boot 常用注解总结！","type":"article","readingTime":{"minutes":18.42,"words":5525},"excerpt":"0.前言 可以毫不夸张地说，这篇文章介绍的 Spring/SpringBoot 常用注解基本已经涵盖你工作中遇到的大部分常用的场景。对于每一个注解我都说了具体用法，掌握搞懂，使用 SpringBoot 来开发项目基本没啥大问题了！ 为什么要写这篇文章？ 最近看到网上有一篇关于 SpringBoot 常用注解的文章被转载的比较多，我看了文章内容之后属实觉得质量","date":"2021-05-03T00:00:00.000Z","localizedDate":"2021年5月3日","category":["框架"],"tag":["SpringBoot","Spring"]},["/code/java/system-design/framework/spring/spring-common-annotations","/code/java/system-design/framework/spring/spring-common-annotations.md"]],
  ["v-4aa5d5b4","/code/java/system-design/framework/spring/spring-design-patterns-summary.html",{"title":"Spring 中的设计模式详解","type":"article","readingTime":{"minutes":14.77,"words":4432},"excerpt":"JDK 中用到了哪些设计模式?Spring 中用到了哪些设计模式?这两个问题，在面试中比较常见。我在网上搜索了一下关于 Spring 中设计模式的讲解几乎都是千篇一律，而且大部分都年代久远。所以，花了几天时间自己总结了一下，由于我的个人能力有限，文中如有任何错误各位都可以指出。另外，文章篇幅有限，对于设计模式以及一些源码的解读我只是一笔带过，这篇文章的主要目","date":"2021-05-03T00:00:00.000Z","localizedDate":"2021年5月3日","category":["框架"],"tag":["Spring"]},["/code/java/system-design/framework/spring/spring-design-patterns-summary","/code/java/system-design/framework/spring/spring-design-patterns-summary.md"]],
  ["v-624c83be","/code/java/system-design/framework/spring/spring-knowledge-and-questions-summary.html",{"title":"Spring常见问题总结","type":"article","readingTime":{"minutes":23.26,"words":6979},"excerpt":"这篇文章主要是想通过一些问题，加深大家对于 Spring 的理解，所以不会涉及太多的代码！ 下面的很多问题我自己在使用 Spring 的过程中也并没有注意，自己也是临时查阅了很多资料和书籍补上的。网上也有一些很多关于 Spring 常见问题/面试题整理的文章，我感觉大部分都是互相 copy，而且很多问题也不是很好，有些回答也存在问题。所以，自己花了一周的业余","date":"2021-05-03T00:00:00.000Z","localizedDate":"2021年5月3日","category":["框架"],"tag":["Spring"]},["/code/java/system-design/framework/spring/spring-knowledge-and-questions-summary","/code/java/system-design/framework/spring/spring-knowledge-and-questions-summary.md"]],
  ["v-5af03abe","/code/java/system-design/framework/spring/spring-transaction.html",{"title":"Spring 事务详解","type":"article","readingTime":{"minutes":20.97,"words":6292},"excerpt":"前段时间答应读者的 Spring 事务 分析总结终于来了。这部分内容比较重要，不论是对于工作还是面试，但是网上比较好的参考资料比较少。 什么是事务？ 事务是逻辑上的一组操作，要么都执行，要么都不执行。 相信大家应该都能背上面这句话了，下面我结合我们日常的真实开发来谈一谈。 我们系统的每个业务方法可能包括了多个原子性的数据库操作，比如下面的 savePerso","date":"2021-05-03T00:00:00.000Z","localizedDate":"2021年5月3日","category":["框架"],"tag":["Spring"]},["/code/java/system-design/framework/spring/spring-transaction","/code/java/system-design/framework/spring/spring-transaction.md"]],
  ["v-562f538c","/code/java/system-design/framework/spring/springboot-knowledge-and-questions-summary.html",{"title":"SpringBoot 常见问题总结","type":"article","readingTime":{"minutes":0.08,"words":25},"excerpt":"Spring Boot 相关的面试题","date":"2021-05-03T00:00:00.000Z","localizedDate":"2021年5月3日","category":["框架"],"tag":["Spring"]},["/code/java/system-design/framework/spring/springboot-knowledge-and-questions-summary","/code/java/system-design/framework/spring/springboot-knowledge-and-questions-summary.md"]],
  ["v-3c952661","/code/java/system-design/framework/springcloud/springcloud-intro.html",{"title":"SpringBoot 常见问题总结","type":"article","readingTime":{"minutes":29.38,"words":8815},"excerpt":"Spring Cloud 入门\r\" 本文基于 Spring Cloud Netflix 。Spring Cloud Alibaba 也是非常不错的选择哦！\"\r\"\"\r\" 授权转载自：https://juejin.im/post/5de2553e5188256e885f4fa3\" 首先我给大家看一张图，如果大家对这张图有些地方不太理解的话，我希望你们看完我这篇文","date":"2021-05-16T00:00:00.000Z","localizedDate":"2021年5月16日","category":["框架"]},["/code/java/system-design/framework/springcloud/springcloud-intro","/code/java/system-design/framework/springcloud/springcloud-intro.md"]],
  ["v-3706649a","/404.html",{"title":"","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/404"]],
  ["v-5bc93818","/category/",{"title":"分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/index.html"]],
  ["v-744d024e","/tag/",{"title":"标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/index.html"]],
  ["v-e52c881c","/article/",{"title":"文章","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/article/index.html"]],
  ["v-75ed4ea4","/encrypted/",{"title":"加密","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/encrypted/index.html"]],
  ["v-d804e652","/slide/",{"title":"幻灯片","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/slide/index.html"]],
  ["v-154dc4c4","/star/",{"title":"收藏","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/star/index.html"]],
  ["v-01560935","/timeline/",{"title":"时间轴","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/timeline/index.html"]],
  ["v-f3d31dec","/category/%E8%AE%BE%E8%AE%A1/",{"title":"设计 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/设计/","/category/%E8%AE%BE%E8%AE%A1/index.html"]],
  ["v-0da0f70d","/tag/ui/",{"title":"UI 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/ui/index.html"]],
  ["v-da9d4e34","/category/interview/",{"title":"interview 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/interview/index.html"]],
  ["v-28949148","/tag/icon/",{"title":"Icon 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/icon/index.html"]],
  ["v-9c48d85a","/category/linux/",{"title":"Linux 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/linux/index.html"]],
  ["v-66019bfa","/tag/%E5%AF%BC%E8%88%AA/",{"title":"导航 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/导航/","/tag/%E5%AF%BC%E8%88%AA/index.html"]],
  ["v-2ae54282","/category/%E5%9F%BA%E7%A1%80/",{"title":"基础 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/基础/","/category/%E5%9F%BA%E7%A1%80/index.html"]],
  ["v-5b28d011","/tag/navbar/",{"title":"Navbar 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/navbar/index.html"]],
  ["v-60649a06","/category/%E9%9A%8F%E7%AC%94/",{"title":"随笔 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/随笔/","/category/%E9%9A%8F%E7%AC%94/index.html"]],
  ["v-cc0796be","/tag/sidebar/",{"title":"Sidebar 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/sidebar/index.html"]],
  ["v-548af50c","/category/%E6%9B%B4%E5%A4%9A/",{"title":"更多 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/更多/","/category/%E6%9B%B4%E5%A4%9A/index.html"]],
  ["v-d11744fa","/tag/tabbar/",{"title":"Tabbar 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/tabbar/index.html"]],
  ["v-71949b7a","/category/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/",{"title":"开源项目 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/开源项目/","/category/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE/index.html"]],
  ["v-b310d42a","/tag/git/",{"title":"Git 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/git/index.html"]],
  ["v-fd3344d8","/category/github/",{"title":"GitHub 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/github/index.html"]],
  ["v-50ae161a","/tag/deploy/",{"title":"deploy 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/deploy/index.html"]],
  ["v-5e0b61bd","/category/%E6%95%B0%E6%8D%AE%E5%BA%93/",{"title":"数据库 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/数据库/","/category/%E6%95%B0%E6%8D%AE%E5%BA%93/index.html"]],
  ["v-a0ba2788","/tag/%E4%BB%8B%E7%BB%8D/",{"title":"介绍 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/介绍/","/tag/%E4%BB%8B%E7%BB%8D/index.html"]],
  ["v-0ce25b6c","/category/%E5%88%86%E5%B8%83%E5%BC%8F/",{"title":"分布式 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/分布式/","/category/%E5%88%86%E5%B8%83%E5%BC%8F/index.html"]],
  ["v-0234a462","/tag/win10/",{"title":"Win10 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/win10/index.html"]],
  ["v-c90685ee","/category/%E9%AB%98%E5%8F%AF%E7%94%A8/",{"title":"高可用 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/高可用/","/category/%E9%AB%98%E5%8F%AF%E7%94%A8/index.html"]],
  ["v-c7bf80f0","/tag/%E5%BF%AB%E6%8D%B7%E9%94%AE/",{"title":"快捷键 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/快捷键/","/tag/%E5%BF%AB%E6%8D%B7%E9%94%AE/index.html"]],
  ["v-7f17a98f","/category/%E6%9E%B6%E6%9E%84/",{"title":"架构 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/架构/","/category/%E6%9E%B6%E6%9E%84/index.html"]],
  ["v-2831124d","/tag/bash/",{"title":"Bash 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/bash/index.html"]],
  ["v-a2e1f96c","/category/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E7%B2%BE%E9%80%89%E9%9B%86/",{"title":"技术文章精选集 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/技术文章精选集/","/category/%E6%8A%80%E6%9C%AF%E6%96%87%E7%AB%A0%E7%B2%BE%E9%80%89%E9%9B%86/index.html"]],
  ["v-3ce877ec","/tag/debug/",{"title":"debug 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/debug/index.html"]],
  ["v-3d1857f3","/category/mq/",{"title":"MQ 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/mq/index.html"]],
  ["v-60379330","/tag/node.js/",{"title":"Node.js 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/node.js/index.html"]],
  ["v-7cda78cb","/category/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/",{"title":"开发工具 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/开发工具/","/category/%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7/index.html"]],
  ["v-fb37f0fe","/tag/%E7%A2%8E%E7%A2%8E%E5%8F%A8%E5%8F%A8/",{"title":"碎碎叨叨 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/碎碎叨叨/","/tag/%E7%A2%8E%E7%A2%8E%E5%8F%A8%E5%8F%A8/index.html"]],
  ["v-5831b135","/category/java/",{"title":"Java 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/java/index.html"]],
  ["v-a26e9aaa","/tag/action/",{"title":"action 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/action/index.html"]],
  ["v-79574331","/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/",{"title":"计算机基础 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/计算机基础/","/category/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/index.html"]],
  ["v-54f4d5c2","/tag/workflow/",{"title":"workflow 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/workflow/index.html"]],
  ["v-8848dfa8","/category/redis/",{"title":"redis 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/redis/index.html"]],
  ["v-40f3339b","/tag/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/",{"title":"数据库基础 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/数据库基础/","/tag/%E6%95%B0%E6%8D%AE%E5%BA%93%E5%9F%BA%E7%A1%80/index.html"]],
  ["v-00f2bcbc","/category/f%E5%88%86%E5%B8%83%E5%BC%8F/",{"title":"f分布式 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/f分布式/","/category/f%E5%88%86%E5%B8%83%E5%BC%8F/index.html"]],
  ["v-68cf5b32","/tag/java%E5%9F%BA%E7%A1%80/",{"title":"Java基础 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/java基础/","/tag/java%E5%9F%BA%E7%A1%80/index.html"]],
  ["v-2d6ace71","/category/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/",{"title":"代码质量 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/代码质量/","/category/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F/index.html"]],
  ["v-12e56aa2","/tag/java%E9%9B%86%E5%90%88/",{"title":"Java集合 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/java集合/","/tag/java%E9%9B%86%E5%90%88/index.html"]],
  ["v-5baeeb3d","/category/%E6%A1%86%E6%9E%B6/",{"title":"框架 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/框架/","/category/%E6%A1%86%E6%9E%B6/index.html"]],
  ["v-b30dba08","/tag/jvm/",{"title":"JVM 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/jvm/index.html"]],
  ["v-0d7069e8","/category/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/",{"title":"系统设计 分类","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/category/系统设计/","/category/%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1/index.html"]],
  ["v-38421d72","/tag/java%E5%B9%B6%E5%8F%91/",{"title":"Java并发 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/java并发/","/tag/java%E5%B9%B6%E5%8F%91/index.html"]],
  ["v-58026271","/tag/java%E6%96%B0%E7%89%B9%E6%80%A7/",{"title":"Java新特性 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/java新特性/","/tag/java%E6%96%B0%E7%89%B9%E6%80%A7/index.html"]],
  ["v-2687e471","/tag/%E7%AE%97%E6%B3%95/",{"title":"算法 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/算法/","/tag/%E7%AE%97%E6%B3%95/index.html"]],
  ["v-13770b26","/tag/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/",{"title":"数据结构 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/数据结构/","/tag/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/index.html"]],
  ["v-7812146a","/tag/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/",{"title":"计算机网络 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/计算机网络/","/tag/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/index.html"]],
  ["v-10a04a2f","/tag/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/",{"title":"操作系统 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/操作系统/","/tag/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/index.html"]],
  ["v-211f44ee","/tag/linux/",{"title":"Linux 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/linux/index.html"]],
  ["v-1bee38ca","/tag/mysql/",{"title":"MySQL 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/mysql/index.html"]],
  ["v-91968ebe","/tag/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/",{"title":"性能优化 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/性能优化/","/tag/%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/index.html"]],
  ["v-c7c8ff72","/tag/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95/",{"title":"大厂面试 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/大厂面试/","/tag/%E5%A4%A7%E5%8E%82%E9%9D%A2%E8%AF%95/index.html"]],
  ["v-0d1f4c3c","/tag/redis/",{"title":"Redis 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/redis/index.html"]],
  ["v-37ee15b2","/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE&%E7%AE%97%E6%B3%95/",{"title":"分布式协议&算法 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/分布式协议&算法/","/tag/%E5%88%86%E5%B8%83%E5%BC%8F%E5%8D%8F%E8%AE%AE&%E7%AE%97%E6%B3%95/index.html"]],
  ["v-292780d1","/tag/%E7%BB%83%E7%BA%A7%E6%94%BB%E7%95%A5/",{"title":"练级攻略 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/练级攻略/","/tag/%E7%BB%83%E7%BA%A7%E6%94%BB%E7%95%A5/index.html"]],
  ["v-3b5171b1","/tag/%E9%9D%A2%E8%AF%95/",{"title":"面试 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/面试/","/tag/%E9%9D%A2%E8%AF%95/index.html"]],
  ["v-0818c0aa","/tag/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/",{"title":"个人经历 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/个人经历/","/tag/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/index.html"]],
  ["v-7cd0297b","/tag/%E7%A8%8B%E5%BA%8F%E5%91%98/",{"title":"程序员 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/程序员/","/tag/%E7%A8%8B%E5%BA%8F%E5%91%98/index.html"]],
  ["v-6c40ee0e","/tag/%E5%B7%A5%E4%BD%9C/",{"title":"工作 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/工作/","/tag/%E5%B7%A5%E4%BD%9C/index.html"]],
  ["v-2e7692e4","/tag/%E5%AE%89%E5%85%A8/",{"title":"安全 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/安全/","/tag/%E5%AE%89%E5%85%A8/index.html"]],
  ["v-6106c001","/tag/docker/",{"title":"Docker 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/docker/index.html"]],
  ["v-59fa8282","/tag/springboot/",{"title":"SpringBoot 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/springboot/index.html"]],
  ["v-7d0ba9b4","/tag/spring/",{"title":"Spring 标签","type":"page","readingTime":{"minutes":0,"words":0},"excerpt":""},["/tag/spring/index.html"]],
]
