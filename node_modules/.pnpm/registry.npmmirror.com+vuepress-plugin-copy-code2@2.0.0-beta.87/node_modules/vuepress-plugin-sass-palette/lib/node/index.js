"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("@vuepress/utils"),s=require("chokidar"),t=require("vuepress-shared");const a=e.path.resolve(__dirname,"../../styles/empty.scss"),n=new t.Logger("vuepress-plugin-sass-palette"),i=s=>e.fs.pathExistsSync(s)?s:a,l=(e,s)=>e.writeTemp(`sass-palette/${s}-inject.scss`,`\n@use "sass:color";\n@use "sass:list";\n@use "sass:math";\n@use "sass:map";\n@use "sass:meta";\n\n@use "@sass-palette/helper";\n@use "@sass-palette/${s}-palette";\n\n$variables: meta.module-variables("${s}-palette");\n\n${e.env.isDebug?`\n@debug "${s} palette variables: #{meta.inspect($variables)}";\n@debug "${s} config variables: #{meta.inspect(meta.module-variables("${s}-config"))}";\n`:""}\n\n@each $name, $value in $variables {\n  $key: helper.camel-to-kebab($name);\n\n  @if meta.type-of($value) == number or meta.type-of($value) == string {\n    :root {\n      #{$key}: #{$value};\n    }\n  } @else if helper.color-islegal($value) {\n    @if meta.global-variable-exists("dark-selector", $module: "${s}-config") {\n      @include helper.inject-color($key, $value, $dark-selector: ${s}-config.$dark-selector);\n    } @else {\n      @include helper.inject-color($key, $value);\n    }\n  }\n}\n`),r=(e,{id:s,defaultConfig:t,defaultPalette:a,generator:n,userConfig:l,userPalette:r})=>e.writeTemp(`sass-palette/${s}-config.scss`,`\n@import "file:///${i(a)}";\n@import "file:///${i(t)}";\n@import "file:///${i(r)}";\n@import "file:///${i(l)}";\n@import "file:///${i(n)}";\n`),o=(e,{id:s,defaultPalette:t,generator:a,userPalette:n})=>e.writeTemp(`sass-palette/${s}-palette.scss`,`\n@import "file:///${i(t)}";\n@import "file:///${i(n)}";\n@import "file:///${i(a)}";\n`),p=(e,{id:s,userStyle:t})=>t?e.writeTemp(`sass-palette/${s}-style.scss`,`@forward "file:///${i(t)}";\n`):Promise.resolve(null),u=a=>i=>{i.env.isDebug&&n.info(`Options: ${a.toString()}`);const{id:u="hope",config:c=`.vuepress/styles/${u}-config.scss`,defaultConfig:d=e.path.resolve(__dirname,"../../styles/default/config.scss"),palette:f=`.vuepress/styles/${u}-palette.scss`,defaultPalette:g=e.path.resolve(__dirname,"../../styles/default/palette.scss"),generator:$=e.path.resolve(__dirname,"../../styles/empty.scss"),style:m=""}=a,v=i.dir.source(c),h=i.dir.source(f),y=m?i.dir.source(m):null;return{name:"vuepress-plugin-sass-palette",multiple:!0,id:u,alias:{"@sass-palette/helper":e.path.resolve(__dirname,"../../styles/helper.scss"),[`@sass-palette/${u}-config`]:i.dir.temp(`sass-palette/${u}-config.scss`),[`@sass-palette/${u}-inject`]:i.dir.temp(`sass-palette/${u}-inject.scss`),[`@sass-palette/${u}-palette`]:i.dir.temp(`sass-palette/${u}-palette.scss`),...m?{[`@sass-palette/${u}-style`]:i.dir.temp(`sass-palette/${u}-style.scss`)}:{}},extendsBundlerOptions:(e,s)=>{((e,s,a)=>{const{bundler:n}=s.options;if(n.name.endsWith("vite")){const s=e,n=s.viteOptions?.css?.preprocessorOptions?.scss.additionalData;s.viteOptions=t.mergeViteConfig(s.viteOptions,{css:{preprocessorOptions:{scss:{charset:!1,additionalData:async(e,s)=>{const t="string"==typeof n?`${n}${e}`:"function"==typeof n?await n(e,s):e;return t.match(new RegExp(`@use\\s+["']@sass-palette\\/${a}-config["'];`))?t:`@use "@sass-palette/${a}-config";\n${t}`}}}}})}if(n.name.endsWith("webpack")){const s=e;s.scss||(s.scss={});const{additionalData:t}=s.scss,n=(e,s)=>{const n="string"==typeof t?`${t}${e}`:"function"==typeof t?t(e,s):e;return n.match(new RegExp(`@use\\s+["']@sass-palette\\/${a}-config["'];`))?n:`@use "@sass-palette/${a}-config";\n${n}`};s.scss.additionalData=n}})(e,s,u)},onInitialized:()=>Promise.all([l(i,u),r(i,{id:u,defaultConfig:d,defaultPalette:g,generator:$,userConfig:v,userPalette:h}),o(i,{id:u,defaultPalette:g,generator:$,userPalette:h}),p(i,{id:u,userStyle:y})]).then((()=>{i.env.isDebug&&n.info(`Style file for ${u} generated`)})),onWatched:(e,t)=>{const a=s.watch(v,{cwd:e.dir.source(),ignoreInitial:!0}),i=()=>r(e,{id:u,defaultConfig:d,defaultPalette:g,generator:$,userConfig:v,userPalette:h}).then((()=>{e.env.isDebug&&n.info(`Style file for ${u} updated`)}));a.on("add",(()=>{i()})),a.on("unlink",(()=>{i()})),t.push(a);const l=s.watch(h,{cwd:e.dir.source(),ignoreInitial:!0}),c=()=>Promise.all([r(e,{id:u,defaultConfig:d,defaultPalette:g,generator:$,userConfig:v,userPalette:h}),o(e,{id:u,defaultPalette:g,generator:$,userPalette:h})]).then((()=>{e.env.isDebug&&n.info(`Style file for ${u} updated`)}));if(l.on("add",(()=>{c()})),l.on("unlink",(()=>{c()})),t.push(l),y){const a=s.watch(y,{cwd:e.dir.source(),ignoreInitial:!0}),i=()=>p(e,{id:u,userStyle:y}).then((()=>{e.env.isDebug&&n.info(`Style file for ${u} updated`)}));a.on("add",(()=>{i()})),a.on("unlink",(()=>{i()})),t.push(a)}},clientConfigFile:e=>((e,s)=>e.writeTemp(`sass-palette/load-${s}.js`,`import "@sass-palette/${s}-inject";\n\nexport default {};`))(e,u)}};exports.default=u,exports.removePalettePlugin=(e,s)=>{const t=e.pluginApi.plugins.filter((e=>"vuepress-plugin-sass-palette"===e.name)).findIndex((e=>e.id===s));-1!==t&&e.pluginApi.plugins.splice(t,1)},exports.sassPalettePlugin=u,exports.useSassPalettePlugin=(e,s)=>{e.pluginApi.plugins.filter((e=>"vuepress-plugin-sass-palette"===e.name)).every((e=>e.id!==s.id))&&e.use(u(s))};
//# sourceMappingURL=index.js.map
