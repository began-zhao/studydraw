"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.createMarkdown = void 0;
const shared_1 = require("@mdit-vue/shared");
const MarkdownIt = require("markdown-it");
const plugins_1 = require("./plugins");
/**
 * Create vuepress customized markdown-it instance
 */
const createMarkdown = ({ anchor, assets, code, component, emoji, frontmatter, headers, title, importCode, links, sfc, slugify = shared_1.slugify, toc, ...markdownItOptions } = {}) => {
    // create raw markdown-it instance
    const md = MarkdownIt({
        ...markdownItOptions,
        // should always enable html option
        html: true,
    });
    // =====================================================
    // following plugins push rules to the end of chain, so
    // the order to use them is important
    // parse emoji
    if (emoji !== false) {
        md.use(plugins_1.emojiPlugin, emoji);
    }
    // add anchor to headers
    if (anchor !== false) {
        md.use(plugins_1.anchorPlugin, {
            level: [1, 2, 3, 4, 5, 6],
            slugify,
            permalink: plugins_1.anchorPlugin.permalink.ariaHidden({
                class: 'header-anchor',
                symbol: '#',
                space: true,
                placement: 'before',
            }),
            ...anchor,
        });
    }
    // allow toc syntax
    if (toc !== false) {
        md.use(plugins_1.tocPlugin, {
            level: [2, 3],
            slugify,
            linkTag: 'router-link',
            ...toc,
        });
    }
    // extract headers into env
    if (headers !== false) {
        md.use(plugins_1.headersPlugin, {
            level: [2, 3],
            slugify,
            ...headers,
        });
    }
    // extract title into env
    if (title !== false) {
        md.use(plugins_1.titlePlugin);
    }
    // =====================================================
    // following plugins modify or replace the rule in place
    // and have no conflicts, so the order is not important
    // treat unknown html tags as components
    if (component !== false) {
        md.use(plugins_1.componentPlugin);
    }
    // extract frontmatter and excerpt into env
    if (frontmatter !== false) {
        md.use(plugins_1.frontmatterPlugin, {
            ...frontmatter,
            grayMatterOptions: {
                excerpt: true,
                excerpt_separator: '<!-- more -->',
                ...frontmatter?.grayMatterOptions,
            },
        });
    }
    // replace relative link of assets with absolute link
    if (assets !== false) {
        md.use(plugins_1.assetsPlugin, assets);
    }
    // extract vue SFC blocks into env
    if (sfc !== false) {
        md.use(plugins_1.sfcPlugin, sfc);
    }
    // process external and internal links
    if (links !== false) {
        md.use(plugins_1.linksPlugin, links);
    }
    // process code fence
    if (code !== false) {
        md.use(plugins_1.codePlugin, code);
    }
    // handle import_code syntax
    if (importCode !== false) {
        md.use(plugins_1.importCodePlugin, importCode);
    }
    return md;
};
exports.createMarkdown = createMarkdown;
