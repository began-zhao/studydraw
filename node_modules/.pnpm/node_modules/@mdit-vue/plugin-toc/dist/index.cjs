'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

const shared = require('@mdit-vue/shared');

const createRenderHeaders = ({
  listTag,
  listClass,
  itemClass,
  linkTag,
  linkClass
}) => {
  const listTagString = shared.htmlEscape(listTag);
  const listClassString = listClass ? ` class="${shared.htmlEscape(listClass)}"` : "";
  const itemTagString = "li";
  const itemClassString = itemClass ? ` class="${shared.htmlEscape(itemClass)}"` : "";
  const linkTagString = shared.htmlEscape(linkTag);
  const linkClassString = linkClass ? ` class="${shared.htmlEscape(linkClass)}"` : "";
  const linkTo = (slug) => linkTag === "router-link" ? ` to="#${slug}"` : ` href="#${slug}"`;
  const renderHeaders = (headers) => `<${listTagString}${listClassString}>${headers.map((header) => `<${itemTagString}${itemClassString}${itemClassString}><${linkTagString}${linkClassString}${linkTo(header.slug)}>${header.title}</${linkTagString}>${header.children.length > 0 ? renderHeaders(header.children) : ""}</${itemTagString}>`).join("")}</${listTagString}>`;
  return renderHeaders;
};

const createTocBlockRule = ({
  pattern,
  containerTag,
  containerClass
}) => {
  return (state, startLine, endLine, silent) => {
    if (state.sCount[startLine] - state.blkIndent >= 4) {
      return false;
    }
    const pos = state.bMarks[startLine] + state.tShift[startLine];
    const max = state.eMarks[startLine];
    const lineFirstToken = state.src.slice(pos, max).split(" ")[0];
    if (!pattern.test(lineFirstToken))
      return false;
    if (silent)
      return true;
    state.line = startLine + 1;
    const tokenOpen = state.push("toc_open", containerTag, 1);
    tokenOpen.markup = "";
    tokenOpen.map = [startLine, state.line];
    if (containerClass) {
      tokenOpen.attrSet("class", containerClass);
    }
    const tokenBody = state.push("toc_body", "", 0);
    tokenBody.markup = lineFirstToken;
    tokenBody.map = [startLine, state.line];
    tokenBody.hidden = true;
    const tokenClose = state.push("toc_close", containerTag, -1);
    tokenClose.markup = "";
    tokenBody.map = [startLine, state.line];
    return true;
  };
};

const tocPlugin = (md, {
  pattern = /^\[\[toc\]\]$/i,
  slugify = shared.slugify,
  format,
  level = [2, 3],
  containerTag = "nav",
  containerClass = "table-of-contents",
  listTag = "ul",
  listClass = "",
  itemClass = "",
  linkTag = "a",
  linkClass = ""
} = {}) => {
  let headers;
  md.core.ruler.push("resolveTocHeaders", (state) => {
    headers = shared.resolveHeadersFromTokens(state.tokens, {
      level,
      shouldAllowHtml: true,
      shouldEscapeText: true,
      slugify,
      format
    });
    return true;
  });
  md.block.ruler.before("heading", "toc", createTocBlockRule({
    pattern,
    containerTag,
    containerClass
  }), {
    alt: ["paragraph", "reference", "blockquote"]
  });
  const renderHeaders = createRenderHeaders({
    listTag,
    listClass,
    itemClass,
    linkTag,
    linkClass
  });
  md.renderer.rules.toc_body = () => {
    if (!headers) {
      return "";
    }
    return renderHeaders(headers);
  };
};

exports.createRenderHeaders = createRenderHeaders;
exports.createTocBlockRule = createTocBlockRule;
exports.tocPlugin = tocPlugin;
