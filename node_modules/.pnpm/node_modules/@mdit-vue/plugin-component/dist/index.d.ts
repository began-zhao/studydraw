import { PluginSimple } from 'markdown-it';
import { RuleBlock } from 'markdown-it/lib/parser_block';
import { RuleInline } from 'markdown-it/lib/parser_inline';

/**
 * Replacing the default htmlBlock rule to allow using custom components
 * in markdown
 */
declare const componentPlugin: PluginSimple;

declare const htmlBlockRule: RuleBlock;

declare const htmlInlineRule: RuleInline;

declare const HTML_TAG_RE: RegExp;
declare const HTML_OPEN_CLOSE_TAG_RE: RegExp;

/**
 * According to markdown spec, all non-block html tags are treated as "inline"
 * tags (wrapped with <p></p>), including those "unknown" tags
 *
 * Therefore, markdown-it processes "inline" tags and "unknown" tags in the same
 * way, and does not care if a tag is "inline" or "unknown"
 *
 * As we want to take those "unknown" tags as custom components, we should
 * treat them as "block" tags
 *
 * So we have to distinguish between "inline" and "unknown" tags ourselves
 *
 * The inline tags list comes from MDN
 *
 * @see https://spec.commonmark.org/0.29/#raw-html
 * @see https://developer.mozilla.org/en-US/docs/Web/HTML/Inline_elements
 */
declare const inlineTags: string[];
/**
 * Vue reserved tags
 *
 * @see https://vuejs.org/api/built-in-components.html
 */
declare const vueReservedTags: string[];

export { HTML_OPEN_CLOSE_TAG_RE, HTML_TAG_RE, componentPlugin, htmlBlockRule, htmlInlineRule, inlineTags, vueReservedTags };
